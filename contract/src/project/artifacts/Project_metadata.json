{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "VotingStrategyChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "dataFrom",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "dataTo",
						"type": "bytes"
					}
				],
				"name": "VotingStrategyDataChanged",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DEFAULT_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "cid",
						"type": "uint64"
					}
				],
				"name": "getClaims",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "register",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							},
							{
								"internalType": "address[]",
								"name": "members",
								"type": "address[]"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "addr",
										"type": "address"
									},
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									},
									{
										"internalType": "uint256",
										"name": "passingRate",
										"type": "uint256"
									}
								],
								"internalType": "struct VotingStrategy",
								"name": "votingStrategy",
								"type": "tuple"
							},
							{
								"internalType": "address",
								"name": "token",
								"type": "address"
							}
						],
						"internalType": "struct InitializeParams",
						"name": "param",
						"type": "tuple"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "members",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "schema",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "time",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "expirationTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "revocationTime",
								"type": "uint64"
							},
							{
								"internalType": "bytes32",
								"name": "refUID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "attester",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "revocable",
								"type": "bool"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct Attestation",
						"name": "attestation",
						"type": "tuple"
					}
				],
				"name": "onPassClaimContribution",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "schema",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "time",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "expirationTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "revocationTime",
								"type": "uint64"
							},
							{
								"internalType": "bytes32",
								"name": "refUID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "attester",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "revocable",
								"type": "bool"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct Attestation",
						"name": "attestation",
						"type": "tuple"
					}
				],
				"name": "onPassMakeContribution",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "schema",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "time",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "expirationTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "revocationTime",
								"type": "uint64"
							},
							{
								"internalType": "bytes32",
								"name": "refUID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "attester",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "revocable",
								"type": "bool"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct Attestation",
						"name": "attestation",
						"type": "tuple"
					}
				],
				"name": "onPassRevokeContribution",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "schema",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "time",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "expirationTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "revocationTime",
								"type": "uint64"
							},
							{
								"internalType": "bytes32",
								"name": "refUID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "attester",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "revocable",
								"type": "bool"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct Attestation",
						"name": "attestation",
						"type": "tuple"
					}
				],
				"name": "onPassVoteContribution",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "register",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "addList",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "removeList",
						"type": "address[]"
					}
				],
				"name": "setMembers",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token",
				"outputs": [
					{
						"internalType": "contract IProjectToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_votingStrategy",
						"type": "address"
					}
				],
				"name": "updateVotingStrategy",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "updateVotingStrategyData",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "version",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "votingStrategy",
				"outputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "passingRate",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"RoleAdminChanged(bytes32,bytes32,bytes32)": {
					"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
				},
				"RoleGranted(bytes32,address,address)": {
					"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
				},
				"RoleRevoked(bytes32,address,address)": {
					"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
				},
				"VotingStrategyChanged(address,address,address)": {
					"details": "Emitted when voting strategy changed."
				},
				"VotingStrategyDataChanged(address,bytes,bytes)": {
					"details": "Emitted when voting strategy data changed."
				}
			},
			"kind": "dev",
			"methods": {
				"getClaims(uint64)": {
					"details": "Get claims"
				},
				"getOwner()": {
					"details": "Get project owner"
				},
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"getToken()": {
					"details": "Get project token address"
				},
				"grantRole(bytes32,address)": {
					"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"initialize((address,address,address[],(address,bytes,uint256),address))": {
					"details": "Constructors are replaced by initialize function"
				},
				"onPassClaimContribution((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
					"details": "Delegate - Verify attesting for claim resolver"
				},
				"onPassMakeContribution((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
					"details": "Delegate - Verify attesting for contribute resolver"
				},
				"onPassRevokeContribution((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
					"details": "Delegate - Verify revoke for contribution resolver"
				},
				"onPassVoteContribution((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
					"details": "Delegate - Verify attesting for voting resolver"
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
				},
				"revokeRole(bytes32,address)": {
					"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
				},
				"setMembers(address[],address[])": {
					"details": "Update project members"
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"updateVotingStrategy(address)": {
					"details": "Update project voting strategy"
				},
				"updateVotingStrategyData(bytes)": {
					"details": "Update project voting strategy data"
				},
				"version()": {
					"details": "Version of the ProjectRegistry contract. Default: \"1.0.0\""
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/project/Project.sol": "Project"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [
			":ds-test/=lib/forge-std/lib/ds-test/src/",
			":forge-std/=lib/forge-std/src/"
		]
	},
	"sources": {
		"@ethereum-attestation-service/eas-contracts/contracts/Common.sol": {
			"keccak256": "0x4bab9ec76bdb009e9fb505c45a679d39c9e80771eb13ed901029a1068025752a",
			"license": "MIT",
			"urls": [
				"bzz-raw://f7eee2a67a0951a97f07b15335a1553068c7bb5e208bb2a2c0d90cdff32b9280",
				"dweb:/ipfs/QmVBUCtd2Yocadu7nYZKZKePDyvU1BkYaNdSX2C5kvhCsg"
			]
		},
		"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol": {
			"keccak256": "0xd530be686226f3c8d7b02bb59797901620f64749a02228539afc8b082a1ee036",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ba131bf90235d1a9ce53c013e238a9c1c4fbe670b8eac6b598adc6986ef5f65",
				"dweb:/ipfs/QmeNjveV6LP8Wp4aRuziwZB4pNaVnBnGw8cbmHjKcwxyRK"
			]
		},
		"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol": {
			"keccak256": "0xef47e449dd02bd034e26b1dea505ce533906f8462fc674c938ed0e872a68d640",
			"license": "MIT",
			"urls": [
				"bzz-raw://62f96084887d44e3e2c91c2b020f861d36ffcce620ee1312ed330653d999930d",
				"dweb:/ipfs/QmWXrErdfQxoFsJw8L4kaKHqPLX3Zg9ruf9FJvyMRatF8S"
			]
		},
		"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
			"keccak256": "0xc628c6540da258f76192eaa34c21699c9cbcc4a4029d7ee04e88dc9c18c981fd",
			"license": "MIT",
			"urls": [
				"bzz-raw://a2229a862abb07e2ee6d1d511ab8a4326035d450b67a617b957b1117602ba5d6",
				"dweb:/ipfs/QmTSV7fYuoxwU8GmsgWttHWTEbiZdVhs846k4B2tficPvP"
			]
		},
		"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
			"keccak256": "0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98",
			"license": "MIT",
			"urls": [
				"bzz-raw://99c8cb3cd19a44bbfb6612605affb7d8b06cee1f6aa9362a37a8672b4f7eeaf8",
				"dweb:/ipfs/QmasyxFDBUp7k5KFgfDWEzM8PYSKEq7GVznzMJ1VxVRF4B"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
			"keccak256": "0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794",
			"license": "MIT",
			"urls": [
				"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e",
				"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
			"keccak256": "0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784",
			"license": "MIT",
			"urls": [
				"bzz-raw://29d6a502187e88fdb4ac51319b6cfc82e7ba886a435480e229e5f838d2da55ee",
				"dweb:/ipfs/QmQNWKr3axXvQowZi31ydXRdeZ7UnE7oN8XAz9FCkx1JhN"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
			"keccak256": "0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f",
			"license": "MIT",
			"urls": [
				"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f",
				"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
			"keccak256": "0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb",
			"license": "MIT",
			"urls": [
				"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d",
				"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
			"keccak256": "0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422",
			"license": "MIT",
			"urls": [
				"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b",
				"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
			"keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
			"license": "MIT",
			"urls": [
				"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
				"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
			]
		},
		"@openzeppelin/contracts/access/AccessControl.sol": {
			"keccak256": "0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f",
			"license": "MIT",
			"urls": [
				"bzz-raw://dc117ce50ea746cab6b97ed1a1facee17a715ae0cb95d67b943dacbaf15176fb",
				"dweb:/ipfs/QmYRZ2UGNYwsHwfNu7Wjr8L2j1LBZ1mKv6NvbwgterYMXc"
			]
		},
		"@openzeppelin/contracts/access/IAccessControl.sol": {
			"keccak256": "0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57",
			"license": "MIT",
			"urls": [
				"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a",
				"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32",
				"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0",
			"license": "MIT",
			"urls": [
				"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f",
				"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58",
			"license": "MIT",
			"urls": [
				"bzz-raw://8b93a1e39a4a19eba1600b92c96f435442db88cac91e315c8291547a2a7bcfe2",
				"dweb:/ipfs/QmTm34KVe6uZBZwq8dZDNWwPcm24qBJdxqL3rPxBJ4LrMv"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3",
			"license": "MIT",
			"urls": [
				"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c",
				"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc",
			"license": "MIT",
			"urls": [
				"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7",
				"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6"
			]
		},
		"src/project/IProject.sol": {
			"keccak256": "0x75638cf0fea0045910e2fc36dcf61ff57d9b04342b68ff17a15379881184a8e5",
			"license": "MIT",
			"urls": [
				"bzz-raw://1649ea196a329da3335ef3f94da45dc67b0d51ccd152eb65bb66512b6462a636",
				"dweb:/ipfs/Qmbc7Jz2hwiLUDa78rXVgGyTCTCoq1vNG5VAzi2yHbr3Lw"
			]
		},
		"src/project/IProjectRegister.sol": {
			"keccak256": "0x8723e1356b434e723d928cff85f650b5674375d9b376e42338d1ad148132348e",
			"license": "MIT",
			"urls": [
				"bzz-raw://7fef2ead6c625fbc5ad1eb0984c2845fbb0216de6d05a5be873e5b1a8932ca68",
				"dweb:/ipfs/QmebWsCQTPi3qNxZNRpQ6Ua65WDDYSGkB7eNWauH8w6ms6"
			]
		},
		"src/project/IProjectToken.sol": {
			"keccak256": "0x924b067f02f30bf87b07028947fa2767d38b1ebeeada73fa04ff4b9f0589b402",
			"license": "MIT",
			"urls": [
				"bzz-raw://e6a7a14b42cf3165ac60c2c5390d463b319bd4ee64159464bd9f2c9cc47bc624",
				"dweb:/ipfs/QmU9Tkr9fsn3Dm3QZreMja4jeKRtYG3thx2kuV4sbCa2jE"
			]
		},
		"src/project/Project.sol": {
			"keccak256": "0x2524e78002a1efcaf8ac63e3052bb89e4f62d73add8e829f5839be02c94cd703",
			"license": "MIT",
			"urls": [
				"bzz-raw://36d97fffc502f34fa438ace0e1db1df2e10ac5e86b9532210ad91d586a109393",
				"dweb:/ipfs/Qmcq6HHEZmsszNT51CU3iTSN2rbVB91vNXsauwoT4wYYkd"
			]
		},
		"src/project/ProjectToken.sol": {
			"keccak256": "0x04f90bcf43fe4211e67039e3d107f4fd2d37d90b17d0ce2c9bde6403228fac2c",
			"license": "MIT",
			"urls": [
				"bzz-raw://52d6d17899106605ec6331598bd15b5d9e8b2678e56aa93eb1d2c5fa4d0b6f8c",
				"dweb:/ipfs/QmQfd9du32uUDsPCqiqimJutqyY2SsH8FyTPxHiJNCor4m"
			]
		},
		"src/votingStrategy/IVotingStrategy.sol": {
			"keccak256": "0xc7eefffcdd4d220ddad0affa473518abcb2b7060f71fe17ac8ec3e67c91565ab",
			"license": "MIT",
			"urls": [
				"bzz-raw://13574f1012523724a8446931365f84c26ca9d36a5c1a9de601b2d60e381238f9",
				"dweb:/ipfs/QmT9SExfiGvshTRXYGJ269noRtAnMj2yJJja7FLNYsZstG"
			]
		}
	},
	"version": 1
}