{
	"id": "7fbf3b114ffaf735ba4d87bf65c4e49d",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.19",
	"solcLongVersion": "0.8.19+commit.7dd6d404",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [
				"ds-test/=lib/forge-std/lib/ds-test/src/",
				"forge-std/=lib/forge-std/src/"
			]
		},
		"sources": {
			"src/project/ProjectToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"./IProjectToken.sol\";\n\ncontract ProjectToken is OwnableUpgradeable, ERC20Upgradeable, IProjectToken {\n    function initialize(\n        string memory name,\n        string memory symbol,\n        address owner\n    ) external initializer {\n        __ERC20_init(name, symbol);\n        _transferOwnership(owner);\n    }\n\n    function mint(address account, uint256 amount) public onlyOwner {\n        _mint(account, amount);\n    }\n}\n"
			},
			"src/project/IProjectToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface IProjectToken {\n    function initialize(string memory name, string memory symbol, address owner) external;\n\n    function mint(address account, uint256 amount) external;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"events": {
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99c8cb3cd19a44bbfb6612605affb7d8b06cee1f6aa9362a37a8672b4f7eeaf8\",\"dweb:/ipfs/QmasyxFDBUp7k5KFgfDWEzM8PYSKEq7GVznzMJ1VxVRF4B\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1386,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"events": {
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"custom:oz-retyped-from": "bool",
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":1611:13472  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":1611:13472  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2495:2593  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":1169:1183   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1162:1184   */\n      iszero\n        /* \"#utility.yul\":1144:1185   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1132:1134   */\n      0x20\n        /* \"#utility.yul\":1117:1135   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_17\n        /* \"#utility.yul\":1004:1191   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3592:3698  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3679:3691  _totalSupply */\n      sload(0x35)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3592:3698  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":1342:1367   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1330:1332   */\n      0x20\n        /* \"#utility.yul\":1315:1333   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3592:3698  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_17\n        /* \"#utility.yul\":1196:1373   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5540:5796  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3441:3532  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3523:3525  18 */\n      0x12\n        /* \"#utility.yul\":1853:1889   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1841:1843   */\n      0x20\n        /* \"#utility.yul\":1826:1844   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3441:3532  function decimals() public view virtual override returns (uint8) {... */\n      tag_17\n        /* \"#utility.yul\":1711:1895   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6191:6425  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_19\n      tag_39\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3756:3881  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_25\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3856:3874  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3830:3837  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3856:3874  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3856:3865  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3856:3874  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3756:3881  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2706:2808  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_15\n      tag_48\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6912:7339  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_19\n      tag_51\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4077:4266  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_19\n      tag_55\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4324:4473  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_25\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2495:2593  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2549:2562  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2581:2586  _name */\n      0x36\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2574:2586  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2495:2593  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4864:4868  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4918:4950  _approve(owner, spender, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4934:4941  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4943:4949  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4918:4926  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4918:4950  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4967:4971  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4960:4971  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_70:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5540:5796  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_32:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5637:5641  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5693:5731  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5709:5713  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5724:5730  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5693:5708  _spendAllowance */\n      tag_79\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5693:5731  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5741:5768  _transfer(from, to, amount) */\n      tag_80\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5751:5755  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5757:5759  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5761:5767  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5741:5750  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5741:5768  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5785:5789  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5540:5796  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6191:6425  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6279:6283  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6333:6397  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6349:6356  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6386:6396  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6358:6383  allowance(owner, spender) */\n      tag_86\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6349:6356  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6358:6367  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6358:6383  allowance(owner, spender) */\n      jump\t// in\n    tag_86:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6358:6396  allowance(owner, spender) + addedValue */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6333:6341  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6333:6397  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2706:2808  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2762:2775  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2794:2801  _symbol */\n      0x37\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2787:2801  return _symbol */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6912:7339  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7005:7009  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7005:7009  bool */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7086:7111  allowance(owner, spender) */\n      tag_98\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7103:7110  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7086:7095  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7086:7111  allowance(owner, spender) */\n      jump\t// in\n    tag_98:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7059:7111  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7149:7164  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7129:7145  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7129:7164  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7121:7206  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3170:3172   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7121:7206  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3152:3173   */\n      mstore\n        /* \"#utility.yul\":3209:3211   */\n      0x25\n        /* \"#utility.yul\":3189:3207   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3182:3212   */\n      mstore\n        /* \"#utility.yul\":3248:3282   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":3228:3246   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3221:3283   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":3299:3317   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3292:3327   */\n      mstore\n        /* \"#utility.yul\":3344:3363   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7121:7206  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7240:7300  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_80\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7249:7254  owner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7256:7263  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7284:7299  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7265:7281  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7265:7299  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7240:7248  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7240:7300  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4077:4266  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4156:4160  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4210:4238  _transfer(owner, to, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4227:4229  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4231:4237  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4210:4219  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4210:4238  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4324:4473  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4439:4457  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4413:4420  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4439:4457  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4439:4450  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4439:4457  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4439:4466  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4324:4473  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10794:11134  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_74:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10895:10914  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10887:10955  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3576:3578   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10887:10955  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3558:3579   */\n      mstore\n        /* \"#utility.yul\":3615:3617   */\n      0x24\n        /* \"#utility.yul\":3595:3613   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":3588:3618   */\n      mstore\n        /* \"#utility.yul\":3654:3688   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":3634:3652   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3627:3689   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":3705:3723   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3698:3732   */\n      mstore\n        /* \"#utility.yul\":3749:3768   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10887:10955  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3374:3774   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10887:10955  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_109:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10973:10994  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10965:11033  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_112\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3981:3983   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10965:11033  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3963:3984   */\n      mstore\n        /* \"#utility.yul\":4020:4022   */\n      0x22\n        /* \"#utility.yul\":4000:4018   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3993:4023   */\n      mstore\n        /* \"#utility.yul\":4059:4093   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":4039:4057   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4032:4094   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":4110:4128   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4103:4135   */\n      mstore\n        /* \"#utility.yul\":4152:4171   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10965:11033  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3779:4177   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10965:11033  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_112:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11044:11062  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11044:11055  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11044:11062  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11044:11071  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11044:11080  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11095:11127  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1342:1367   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11095:11127  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1315:1333   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11095:11127  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10794:11134  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11415:11826  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_79:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11515:11539  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11542:11567  allowance(owner, spender) */\n      tag_117\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11552:11557  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11559:11566  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11542:11551  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11542:11567  allowance(owner, spender) */\n      jump\t// in\n    tag_117:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11515:11567  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11581:11597  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11581:11618  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11577:11820  if (currentAllowance != type(uint256).max) {... */\n      tag_122\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11662:11668  amount */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11642:11658  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11642:11668  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11634:11702  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4384:4386   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11634:11702  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4366:4387   */\n      mstore\n        /* \"#utility.yul\":4423:4425   */\n      0x1d\n        /* \"#utility.yul\":4403:4421   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4396:4426   */\n      mstore\n        /* \"#utility.yul\":4462:4493   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":4442:4460   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4435:4494   */\n      mstore\n        /* \"#utility.yul\":4511:4529   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11634:11702  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_100\n        /* \"#utility.yul\":4182:4535   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11634:11702  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_119:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11744:11795  _approve(owner, spender, currentAllowance - amount) */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11753:11758  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11760:11767  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11788:11794  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11769:11785  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11769:11794  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11744:11752  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11744:11795  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_122:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11505:11826  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11415:11826  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7793:8581  function _transfer(address from, address to, uint256 amount) internal virtual {... */\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7889:7907  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7881:7949  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4742:4744   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7881:7949  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4724:4745   */\n      mstore\n        /* \"#utility.yul\":4781:4783   */\n      0x25\n        /* \"#utility.yul\":4761:4779   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4754:4784   */\n      mstore\n        /* \"#utility.yul\":4820:4854   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":4800:4818   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4793:4855   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":4871:4889   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4864:4899   */\n      mstore\n        /* \"#utility.yul\":4916:4935   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7881:7949  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4540:4941   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7881:7949  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_124:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7967:7983  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7959:8023  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5148:5150   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7959:8023  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5130:5151   */\n      mstore\n        /* \"#utility.yul\":5187:5189   */\n      0x23\n        /* \"#utility.yul\":5167:5185   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5160:5190   */\n      mstore\n        /* \"#utility.yul\":5226:5260   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":5206:5224   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5199:5261   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":5277:5295   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5270:5303   */\n      mstore\n        /* \"#utility.yul\":5320:5339   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7959:8023  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4946:5345   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7959:8023  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_127:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8105:8120  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8083:8102  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8105:8120  _balances[from] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8105:8114  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8105:8120  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8138:8159  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8130:8202  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5552:5554   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8130:8202  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5534:5555   */\n      mstore\n        /* \"#utility.yul\":5591:5593   */\n      0x26\n        /* \"#utility.yul\":5571:5589   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5564:5594   */\n      mstore\n        /* \"#utility.yul\":5630:5664   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":5610:5628   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5603:5665   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":5681:5699   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5674:5710   */\n      mstore\n        /* \"#utility.yul\":5727:5746   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8130:8202  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_100\n        /* \"#utility.yul\":5350:5752   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8130:8202  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_132:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8236:8251  _balances[from] */\n      dup1\n      dup6\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8236:8245  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8236:8251  _balances[from] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8254:8274  fromBalance - amount */\n      dup7\n      dup7\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8236:8274  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8451:8464  _balances[to] */\n      swap3\n      dup7\n      and\n      dup1\n      dup3\n      mstore\n      swap1\n      dup4\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8451:8474  _balances[to] += amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8500:8526  Transfer(from, to, amount) */\n      swap2\n      mload\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n      tag_135\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8268:8274  amount */\n      dup7\n        /* \"#utility.yul\":1342:1367   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1330:1332   */\n      0x20\n        /* \"#utility.yul\":1315:1333   */\n      add\n      swap1\n        /* \"#utility.yul\":1196:1373   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8500:8526  Transfer(from, to, amount) */\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8537:8574  _afterTokenTransfer(from, to, amount) */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12410:12501  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {} */\n      jump\n        /* \"#utility.yul\":14:562   */\n    tag_18:\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":155:157   */\n      0x20\n        /* \"#utility.yul\":184:186   */\n      dup1\n        /* \"#utility.yul\":173:182   */\n      dup4\n        /* \"#utility.yul\":166:187   */\n      mstore\n        /* \"#utility.yul\":216:222   */\n      dup4\n        /* \"#utility.yul\":210:223   */\n      mload\n        /* \"#utility.yul\":259:265   */\n      dup1\n        /* \"#utility.yul\":254:256   */\n      dup3\n        /* \"#utility.yul\":243:252   */\n      dup6\n        /* \"#utility.yul\":239:257   */\n      add\n        /* \"#utility.yul\":232:266   */\n      mstore\n        /* \"#utility.yul\":284:285   */\n      0x00\n        /* \"#utility.yul\":294:434   */\n    tag_143:\n        /* \"#utility.yul\":308:314   */\n      dup2\n        /* \"#utility.yul\":305:306   */\n      dup2\n        /* \"#utility.yul\":302:315   */\n      lt\n        /* \"#utility.yul\":294:434   */\n      iszero\n      tag_145\n      jumpi\n        /* \"#utility.yul\":403:417   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":399:422   */\n      dup4\n      add\n        /* \"#utility.yul\":393:423   */\n      mload\n        /* \"#utility.yul\":369:386   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":388:390   */\n      0x40\n        /* \"#utility.yul\":365:391   */\n      add\n        /* \"#utility.yul\":358:424   */\n      mstore\n        /* \"#utility.yul\":323:333   */\n      dup3\n      add\n        /* \"#utility.yul\":294:434   */\n      jump(tag_143)\n    tag_145:\n        /* \"#utility.yul\":298:301   */\n      pop\n        /* \"#utility.yul\":483:484   */\n      0x00\n        /* \"#utility.yul\":478:480   */\n      0x40\n        /* \"#utility.yul\":469:475   */\n      dup3\n        /* \"#utility.yul\":458:467   */\n      dup7\n        /* \"#utility.yul\":454:476   */\n      add\n        /* \"#utility.yul\":450:481   */\n      add\n        /* \"#utility.yul\":443:485   */\n      mstore\n        /* \"#utility.yul\":553:555   */\n      0x40\n        /* \"#utility.yul\":546:548   */\n      0x1f\n        /* \"#utility.yul\":542:549   */\n      not\n        /* \"#utility.yul\":537:539   */\n      0x1f\n        /* \"#utility.yul\":529:535   */\n      dup4\n        /* \"#utility.yul\":525:540   */\n      add\n        /* \"#utility.yul\":521:550   */\n      and\n        /* \"#utility.yul\":510:519   */\n      dup6\n        /* \"#utility.yul\":506:551   */\n      add\n        /* \"#utility.yul\":502:556   */\n      add\n        /* \"#utility.yul\":494:556   */\n      swap3\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":14:562   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":567:740   */\n    tag_140:\n        /* \"#utility.yul\":635:655   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":684:715   */\n      dup2\n      and\n        /* \"#utility.yul\":674:716   */\n      dup2\n      eq\n        /* \"#utility.yul\":664:734   */\n      tag_147\n      jumpi\n        /* \"#utility.yul\":730:731   */\n      0x00\n        /* \"#utility.yul\":727:728   */\n      dup1\n        /* \"#utility.yul\":720:732   */\n      revert\n        /* \"#utility.yul\":664:734   */\n    tag_147:\n        /* \"#utility.yul\":567:740   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":745:999   */\n    tag_21:\n        /* \"#utility.yul\":813:819   */\n      0x00\n        /* \"#utility.yul\":821:827   */\n      dup1\n        /* \"#utility.yul\":874:876   */\n      0x40\n        /* \"#utility.yul\":862:871   */\n      dup4\n        /* \"#utility.yul\":853:860   */\n      dup6\n        /* \"#utility.yul\":849:872   */\n      sub\n        /* \"#utility.yul\":845:877   */\n      slt\n        /* \"#utility.yul\":842:894   */\n      iszero\n      tag_149\n      jumpi\n        /* \"#utility.yul\":890:891   */\n      0x00\n        /* \"#utility.yul\":887:888   */\n      dup1\n        /* \"#utility.yul\":880:892   */\n      revert\n        /* \"#utility.yul\":842:894   */\n    tag_149:\n        /* \"#utility.yul\":913:942   */\n      tag_150\n        /* \"#utility.yul\":932:941   */\n      dup4\n        /* \"#utility.yul\":913:942   */\n      tag_140\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":903:942   */\n      swap5\n        /* \"#utility.yul\":989:991   */\n      0x20\n        /* \"#utility.yul\":974:992   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":961:993   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":745:999   */\n      jump\t// out\n        /* \"#utility.yul\":1378:1706   */\n    tag_31:\n        /* \"#utility.yul\":1455:1461   */\n      0x00\n        /* \"#utility.yul\":1463:1469   */\n      dup1\n        /* \"#utility.yul\":1471:1477   */\n      0x00\n        /* \"#utility.yul\":1524:1526   */\n      0x60\n        /* \"#utility.yul\":1512:1521   */\n      dup5\n        /* \"#utility.yul\":1503:1510   */\n      dup7\n        /* \"#utility.yul\":1499:1522   */\n      sub\n        /* \"#utility.yul\":1495:1527   */\n      slt\n        /* \"#utility.yul\":1492:1544   */\n      iszero\n      tag_154\n      jumpi\n        /* \"#utility.yul\":1540:1541   */\n      0x00\n        /* \"#utility.yul\":1537:1538   */\n      dup1\n        /* \"#utility.yul\":1530:1542   */\n      revert\n        /* \"#utility.yul\":1492:1544   */\n    tag_154:\n        /* \"#utility.yul\":1563:1592   */\n      tag_155\n        /* \"#utility.yul\":1582:1591   */\n      dup5\n        /* \"#utility.yul\":1563:1592   */\n      tag_140\n      jump\t// in\n    tag_155:\n        /* \"#utility.yul\":1553:1592   */\n      swap3\n      pop\n        /* \"#utility.yul\":1611:1649   */\n      tag_156\n        /* \"#utility.yul\":1645:1647   */\n      0x20\n        /* \"#utility.yul\":1634:1643   */\n      dup6\n        /* \"#utility.yul\":1630:1648   */\n      add\n        /* \"#utility.yul\":1611:1649   */\n      tag_140\n      jump\t// in\n    tag_156:\n        /* \"#utility.yul\":1601:1649   */\n      swap2\n      pop\n        /* \"#utility.yul\":1696:1698   */\n      0x40\n        /* \"#utility.yul\":1685:1694   */\n      dup5\n        /* \"#utility.yul\":1681:1699   */\n      add\n        /* \"#utility.yul\":1668:1700   */\n      calldataload\n        /* \"#utility.yul\":1658:1700   */\n      swap1\n      pop\n        /* \"#utility.yul\":1378:1706   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1900:2086   */\n    tag_44:\n        /* \"#utility.yul\":1959:1965   */\n      0x00\n        /* \"#utility.yul\":2012:2014   */\n      0x20\n        /* \"#utility.yul\":2000:2009   */\n      dup3\n        /* \"#utility.yul\":1991:1998   */\n      dup5\n        /* \"#utility.yul\":1987:2010   */\n      sub\n        /* \"#utility.yul\":1983:2015   */\n      slt\n        /* \"#utility.yul\":1980:2032   */\n      iszero\n      tag_159\n      jumpi\n        /* \"#utility.yul\":2028:2029   */\n      0x00\n        /* \"#utility.yul\":2025:2026   */\n      dup1\n        /* \"#utility.yul\":2018:2030   */\n      revert\n        /* \"#utility.yul\":1980:2032   */\n    tag_159:\n        /* \"#utility.yul\":2051:2080   */\n      tag_160\n        /* \"#utility.yul\":2070:2079   */\n      dup3\n        /* \"#utility.yul\":2051:2080   */\n      tag_140\n      jump\t// in\n    tag_160:\n        /* \"#utility.yul\":2041:2080   */\n      swap4\n        /* \"#utility.yul\":1900:2086   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2091:2351   */\n    tag_60:\n        /* \"#utility.yul\":2159:2165   */\n      0x00\n        /* \"#utility.yul\":2167:2173   */\n      dup1\n        /* \"#utility.yul\":2220:2222   */\n      0x40\n        /* \"#utility.yul\":2208:2217   */\n      dup4\n        /* \"#utility.yul\":2199:2206   */\n      dup6\n        /* \"#utility.yul\":2195:2218   */\n      sub\n        /* \"#utility.yul\":2191:2223   */\n      slt\n        /* \"#utility.yul\":2188:2240   */\n      iszero\n      tag_162\n      jumpi\n        /* \"#utility.yul\":2236:2237   */\n      0x00\n        /* \"#utility.yul\":2233:2234   */\n      dup1\n        /* \"#utility.yul\":2226:2238   */\n      revert\n        /* \"#utility.yul\":2188:2240   */\n    tag_162:\n        /* \"#utility.yul\":2259:2288   */\n      tag_163\n        /* \"#utility.yul\":2278:2287   */\n      dup4\n        /* \"#utility.yul\":2259:2288   */\n      tag_140\n      jump\t// in\n    tag_163:\n        /* \"#utility.yul\":2249:2288   */\n      swap2\n      pop\n        /* \"#utility.yul\":2307:2345   */\n      tag_164\n        /* \"#utility.yul\":2341:2343   */\n      0x20\n        /* \"#utility.yul\":2330:2339   */\n      dup5\n        /* \"#utility.yul\":2326:2344   */\n      add\n        /* \"#utility.yul\":2307:2345   */\n      tag_140\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":2297:2345   */\n      swap1\n      pop\n        /* \"#utility.yul\":2091:2351   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2356:2736   */\n    tag_65:\n        /* \"#utility.yul\":2435:2436   */\n      0x01\n        /* \"#utility.yul\":2431:2443   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":2478:2490   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":2499:2560   */\n      tag_166\n      jumpi\n        /* \"#utility.yul\":2553:2557   */\n      0x7f\n        /* \"#utility.yul\":2545:2551   */\n      dup3\n        /* \"#utility.yul\":2541:2558   */\n      and\n        /* \"#utility.yul\":2531:2558   */\n      swap2\n      pop\n        /* \"#utility.yul\":2499:2560   */\n    tag_166:\n        /* \"#utility.yul\":2606:2608   */\n      0x20\n        /* \"#utility.yul\":2598:2604   */\n      dup3\n        /* \"#utility.yul\":2595:2609   */\n      lt\n        /* \"#utility.yul\":2575:2593   */\n      dup2\n        /* \"#utility.yul\":2572:2610   */\n      sub\n        /* \"#utility.yul\":2569:2730   */\n      tag_167\n      jumpi\n        /* \"#utility.yul\":2652:2662   */\n      0x4e487b71\n        /* \"#utility.yul\":2647:2650   */\n      0xe0\n        /* \"#utility.yul\":2643:2663   */\n      shl\n        /* \"#utility.yul\":2640:2641   */\n      0x00\n        /* \"#utility.yul\":2633:2664   */\n      mstore\n        /* \"#utility.yul\":2687:2691   */\n      0x22\n        /* \"#utility.yul\":2684:2685   */\n      0x04\n        /* \"#utility.yul\":2677:2692   */\n      mstore\n        /* \"#utility.yul\":2715:2719   */\n      0x24\n        /* \"#utility.yul\":2712:2713   */\n      0x00\n        /* \"#utility.yul\":2705:2720   */\n      revert\n        /* \"#utility.yul\":2569:2730   */\n    tag_167:\n      pop\n        /* \"#utility.yul\":2356:2736   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2741:2963   */\n    tag_88:\n        /* \"#utility.yul\":2806:2815   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":2827:2837   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":2824:2957   */\n      iszero\n      tag_70\n      jumpi\n        /* \"#utility.yul\":2879:2889   */\n      0x4e487b71\n        /* \"#utility.yul\":2874:2877   */\n      0xe0\n        /* \"#utility.yul\":2870:2890   */\n      shl\n        /* \"#utility.yul\":2867:2868   */\n      0x00\n        /* \"#utility.yul\":2860:2891   */\n      mstore\n        /* \"#utility.yul\":2914:2918   */\n      0x11\n        /* \"#utility.yul\":2911:2912   */\n      0x04\n        /* \"#utility.yul\":2904:2919   */\n      mstore\n        /* \"#utility.yul\":2942:2946   */\n      0x24\n        /* \"#utility.yul\":2939:2940   */\n      0x00\n        /* \"#utility.yul\":2932:2947   */\n      revert\n\n    auxdata: 0xa264697066735822122065af93d51c0ada73eb1e418d9b04f9077736c71605cc0765863c7761bb5a52e164736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610859806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c391906106a3565b60405180910390f35b6100df6100da36600461070d565b610232565b60405190151581526020016100c3565b6035545b6040519081526020016100c3565b6100df61010f366004610737565b61024c565b604051601281526020016100c3565b6100df61013136600461070d565b610270565b6100f3610144366004610773565b6001600160a01b031660009081526033602052604090205490565b6100b6610292565b6100df61017536600461070d565b6102a1565b6100df61018836600461070d565b610321565b6100f361019b366004610795565b61032f565b6060603680546101af906107c8565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107c8565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b60003361024081858561035a565b60019150505b92915050565b60003361025a85828561047e565b6102658585856104f8565b506001949350505050565b600033610240818585610283838361032f565b61028d9190610802565b61035a565b6060603780546101af906107c8565b600033816102af828661032f565b9050838110156103145760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b610265828686840361035a565b6000336102408185856104f8565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103bc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161030b565b6001600160a01b03821661041d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161030b565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061048a848461032f565b905060001981146104f257818110156104e55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161030b565b6104f2848484840361035a565b50505050565b6001600160a01b03831661055c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161030b565b6001600160a01b0382166105be5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161030b565b6001600160a01b038316600090815260336020526040902054818110156106365760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161030b565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106969086815260200190565b60405180910390a36104f2565b600060208083528351808285015260005b818110156106d0578581018301518582016040015282016106b4565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461070857600080fd5b919050565b6000806040838503121561072057600080fd5b610729836106f1565b946020939093013593505050565b60008060006060848603121561074c57600080fd5b610755846106f1565b9250610763602085016106f1565b9150604084013590509250925092565b60006020828403121561078557600080fd5b61078e826106f1565b9392505050565b600080604083850312156107a857600080fd5b6107b1836106f1565b91506107bf602084016106f1565b90509250929050565b600181811c908216806107dc57607f821691505b6020821081036107fc57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561024657634e487b7160e01b600052601160045260246000fdfea264697066735822122065af93d51c0ada73eb1e418d9b04f9077736c71605cc0765863c7761bb5a52e164736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x859 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6A3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x70D JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x737 JUMP JUMPDEST PUSH2 0x24C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x70D JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x773 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x292 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x70D JUMP JUMPDEST PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x70D JUMP JUMPDEST PUSH2 0x321 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x795 JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7C8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x7C8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x35A JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x25A DUP6 DUP3 DUP6 PUSH2 0x47E JUMP JUMPDEST PUSH2 0x265 DUP6 DUP6 DUP6 PUSH2 0x4F8 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x283 DUP4 DUP4 PUSH2 0x32F JUMP JUMPDEST PUSH2 0x28D SWAP2 SWAP1 PUSH2 0x802 JUMP JUMPDEST PUSH2 0x35A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AF DUP3 DUP7 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x314 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x265 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x35A JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48A DUP5 DUP5 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F2 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30B JUMP JUMPDEST PUSH2 0x4F2 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x35A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x636 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x696 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6D0 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6B4 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x708 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x729 DUP4 PUSH2 0x6F1 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x74C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x755 DUP5 PUSH2 0x6F1 JUMP JUMPDEST SWAP3 POP PUSH2 0x763 PUSH1 0x20 DUP6 ADD PUSH2 0x6F1 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x785 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x78E DUP3 PUSH2 0x6F1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7B1 DUP4 PUSH2 0x6F1 JUMP JUMPDEST SWAP2 POP PUSH2 0x7BF PUSH1 0x20 DUP5 ADD PUSH2 0x6F1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x7DC JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x7FC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x246 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0xAF93D51C0ADA PUSH20 0xEB1E418D9B04F9077736C71605CC0765863C7761 0xBB GAS MSTORE 0xE1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "1611:11861:2:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfer_906": {
									"entryPoint": null,
									"id": 906,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_841": {
									"entryPoint": 858,
									"id": 841,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_895": {
									"entryPoint": null,
									"id": 895,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_msgSender_1372": {
									"entryPoint": null,
									"id": 1372,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_884": {
									"entryPoint": 1150,
									"id": 884,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_667": {
									"entryPoint": 1272,
									"id": 667,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_462": {
									"entryPoint": 815,
									"id": 462,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_487": {
									"entryPoint": 562,
									"id": 487,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_419": {
									"entryPoint": null,
									"id": 419,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_395": {
									"entryPoint": null,
									"id": 395,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_590": {
									"entryPoint": 673,
									"id": 590,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_549": {
									"entryPoint": 624,
									"id": 549,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_375": {
									"entryPoint": 416,
									"id": 375,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_385": {
									"entryPoint": 658,
									"id": 385,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_405": {
									"entryPoint": null,
									"id": 405,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_520": {
									"entryPoint": 588,
									"id": 520,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_444": {
									"entryPoint": 801,
									"id": 444,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 1777,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1907,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 1941,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 1847,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 1805,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1699,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2050,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 1992,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5754:9",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:9",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "135:427:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "145:12:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "155:2:9",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "149:2:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "173:9:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "184:2:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:21:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "196:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "216:6:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "210:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "210:13:9"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "200:6:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "243:9:9"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "254:2:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "239:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "239:18:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "259:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "232:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "232:34:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "275:10:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "284:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "279:1:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "344:90:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "373:9:9"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "384:1:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "369:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "369:17:9"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "388:2:9",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "365:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "365:26:9"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "407:6:9"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "415:1:9"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "403:3:9"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "403:14:9"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "419:2:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "399:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "399:23:9"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "393:5:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "393:30:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "358:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "358:66:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "358:66:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "305:1:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "308:6:9"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "302:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "302:13:9"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "316:19:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "318:15:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "327:1:9"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "330:2:9"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "323:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "323:10:9"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "318:1:9"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "298:3:9",
																"statements": []
															},
															"src": "294:140:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "458:9:9"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "469:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "454:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "454:22:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "478:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "450:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "450:31:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "483:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "443:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "443:42:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "443:42:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "494:62:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "510:9:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "529:6:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "537:2:9",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "525:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "525:15:9"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "546:2:9",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "542:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "542:7:9"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "521:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "521:29:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "506:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "506:45:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "553:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "502:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "502:54:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "494:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "104:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "115:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "126:4:9",
														"type": ""
													}
												],
												"src": "14:548:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "616:124:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "626:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "648:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "635:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "635:20:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "626:5:9"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "718:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "727:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "730:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "720:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "720:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "720:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "677:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "688:5:9"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "703:3:9",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "708:1:9",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "699:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "699:11:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "712:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "695:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "695:19:9"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "684:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "684:31:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "674:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "674:42:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "667:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "667:50:9"
															},
															"nodeType": "YulIf",
															"src": "664:70:9"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "595:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "606:5:9",
														"type": ""
													}
												],
												"src": "567:173:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "832:167:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "878:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "887:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "890:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "880:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "880:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "880:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "853:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "862:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "849:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "849:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "874:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "845:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "845:32:9"
															},
															"nodeType": "YulIf",
															"src": "842:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "903:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "932:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "913:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "913:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "903:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "951:42:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "978:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "989:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "974:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "974:18:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "961:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "961:32:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "951:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "790:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "801:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "813:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "821:6:9",
														"type": ""
													}
												],
												"src": "745:254:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1099:92:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1109:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1121:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1132:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1117:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1117:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1109:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1151:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1176:6:9"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1169:6:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1169:14:9"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1162:6:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1162:22:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1144:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1144:41:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1144:41:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1068:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1079:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1090:4:9",
														"type": ""
													}
												],
												"src": "1004:187:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1297:76:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1307:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1319:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1330:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1315:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1315:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1307:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1349:9:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1360:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1342:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1342:25:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1342:25:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1266:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1277:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1288:4:9",
														"type": ""
													}
												],
												"src": "1196:177:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1482:224:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1528:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1537:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1540:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1530:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1530:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1530:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1503:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1512:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1499:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1499:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1524:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1495:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1495:32:9"
															},
															"nodeType": "YulIf",
															"src": "1492:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1553:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1582:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1563:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1563:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1553:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1601:48:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1634:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1645:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1630:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1630:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1611:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1611:38:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1601:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1658:42:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1685:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1696:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1681:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1681:18:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1668:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1668:32:9"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1658:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1432:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1443:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1455:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1463:6:9",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1471:6:9",
														"type": ""
													}
												],
												"src": "1378:328:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1808:87:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1818:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1830:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1841:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1826:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1826:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1818:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1860:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1875:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1883:4:9",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1871:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1871:17:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1853:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1853:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1853:36:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1777:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1788:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1799:4:9",
														"type": ""
													}
												],
												"src": "1711:184:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1970:116:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2016:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2025:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2028:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2018:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2018:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2018:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1991:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2000:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1987:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1987:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2012:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1983:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1983:32:9"
															},
															"nodeType": "YulIf",
															"src": "1980:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2041:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2070:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2051:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2051:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2041:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1936:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1947:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1959:6:9",
														"type": ""
													}
												],
												"src": "1900:186:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2178:173:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2224:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2233:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2236:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2226:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2226:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2226:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2199:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2208:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2195:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2195:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2220:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2191:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2191:32:9"
															},
															"nodeType": "YulIf",
															"src": "2188:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2249:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2278:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2259:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2259:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2249:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2297:48:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2330:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2341:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2326:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2326:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2307:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2307:38:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2297:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2136:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2147:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2159:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2167:6:9",
														"type": ""
													}
												],
												"src": "2091:260:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2411:325:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2421:22:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2435:1:9",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2438:4:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "2431:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2431:12:9"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "2421:6:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2452:38:9",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2482:4:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2488:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2478:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2478:12:9"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "2456:18:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2529:31:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2531:27:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "2545:6:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2553:4:9",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "2541:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2541:17:9"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2531:6:9"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2509:18:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2502:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2502:26:9"
															},
															"nodeType": "YulIf",
															"src": "2499:61:9"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2619:111:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2640:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2647:3:9",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2652:10:9",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2643:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2643:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2633:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2633:31:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2633:31:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2684:1:9",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2687:4:9",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2677:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2677:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2677:15:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2712:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2715:4:9",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2705:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2705:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2705:15:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2575:18:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2598:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2606:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2595:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2595:14:9"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2572:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2572:38:9"
															},
															"nodeType": "YulIf",
															"src": "2569:161:9"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2391:4:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2400:6:9",
														"type": ""
													}
												],
												"src": "2356:380:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2789:174:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2799:16:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2810:1:9"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2813:1:9"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2806:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2806:9:9"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2799:3:9"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2846:111:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2867:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2874:3:9",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2879:10:9",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2870:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2870:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2860:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2860:31:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2860:31:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2911:1:9",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2914:4:9",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2904:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2904:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2904:15:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2939:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2942:4:9",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2932:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2932:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2932:15:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2830:1:9"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "2833:3:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2827:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2827:10:9"
															},
															"nodeType": "YulIf",
															"src": "2824:133:9"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2772:1:9",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2775:1:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2781:3:9",
														"type": ""
													}
												],
												"src": "2741:222:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3142:227:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3159:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3170:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3152:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3152:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3152:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3193:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3204:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3189:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3189:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3209:2:9",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3182:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3182:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3182:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3232:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3243:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3228:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3228:18:9"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3248:34:9",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3221:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3221:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3221:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3303:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3314:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3299:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3299:18:9"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3319:7:9",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3292:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3292:35:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3292:35:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3336:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3348:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3359:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3344:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3344:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3336:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3119:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3133:4:9",
														"type": ""
													}
												],
												"src": "2968:401:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3548:226:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3565:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3576:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3558:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3558:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3558:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3599:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3610:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3595:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3595:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3615:2:9",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3588:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3588:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3588:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3638:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3649:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3634:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3634:18:9"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3654:34:9",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3627:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3627:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3627:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3709:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3720:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3705:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3705:18:9"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3725:6:9",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3698:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3698:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3698:34:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3741:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3753:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3764:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3749:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3749:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3741:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3525:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3539:4:9",
														"type": ""
													}
												],
												"src": "3374:400:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3953:224:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3970:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3981:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3963:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3963:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3963:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4004:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4015:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4000:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4000:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4020:2:9",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3993:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3993:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3993:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4043:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4054:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4039:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4039:18:9"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4059:34:9",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4032:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4032:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4032:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4114:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4125:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4110:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4110:18:9"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4130:4:9",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4103:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4103:32:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4103:32:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4144:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4156:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4167:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4152:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4152:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4144:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3930:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3944:4:9",
														"type": ""
													}
												],
												"src": "3779:398:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4356:179:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4373:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4384:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4366:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4366:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4366:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4407:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4418:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4403:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4403:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4423:2:9",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4396:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4396:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4396:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4446:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4457:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4442:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4442:18:9"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4462:31:9",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4435:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4435:59:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4435:59:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4503:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4515:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4526:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4511:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4511:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4503:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4333:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4347:4:9",
														"type": ""
													}
												],
												"src": "4182:353:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4714:227:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4731:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4742:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4724:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4724:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4724:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4765:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4776:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4761:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4761:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4781:2:9",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4754:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4754:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4754:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4804:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4815:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4800:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4800:18:9"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4820:34:9",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4793:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4793:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4793:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4875:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4886:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4871:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4871:18:9"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4891:7:9",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4864:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4864:35:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4864:35:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4908:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4920:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4931:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4916:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4916:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4908:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4691:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4705:4:9",
														"type": ""
													}
												],
												"src": "4540:401:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5120:225:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5137:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5148:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5130:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5130:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5130:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5171:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5182:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5167:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5167:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5187:2:9",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5160:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5160:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5160:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5210:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5221:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5206:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5206:18:9"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5226:34:9",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5199:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5199:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5199:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5281:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5292:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5277:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5277:18:9"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5297:5:9",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5270:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5270:33:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5270:33:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5312:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5324:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5335:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5320:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5320:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5312:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5097:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5111:4:9",
														"type": ""
													}
												],
												"src": "4946:399:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5524:228:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5541:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5552:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5534:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5534:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5534:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5575:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5586:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5571:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5571:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5591:2:9",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5564:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5564:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5564:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5614:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5625:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5610:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5610:18:9"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5630:34:9",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5603:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5603:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5603:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5685:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5696:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5681:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5681:18:9"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5701:8:9",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5674:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5674:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5674:36:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5719:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5731:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5742:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5727:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5727:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5719:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5501:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5515:4:9",
														"type": ""
													}
												],
												"src": "5350:402:9"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c391906106a3565b60405180910390f35b6100df6100da36600461070d565b610232565b60405190151581526020016100c3565b6035545b6040519081526020016100c3565b6100df61010f366004610737565b61024c565b604051601281526020016100c3565b6100df61013136600461070d565b610270565b6100f3610144366004610773565b6001600160a01b031660009081526033602052604090205490565b6100b6610292565b6100df61017536600461070d565b6102a1565b6100df61018836600461070d565b610321565b6100f361019b366004610795565b61032f565b6060603680546101af906107c8565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107c8565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b60003361024081858561035a565b60019150505b92915050565b60003361025a85828561047e565b6102658585856104f8565b506001949350505050565b600033610240818585610283838361032f565b61028d9190610802565b61035a565b6060603780546101af906107c8565b600033816102af828661032f565b9050838110156103145760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b610265828686840361035a565b6000336102408185856104f8565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103bc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161030b565b6001600160a01b03821661041d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161030b565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061048a848461032f565b905060001981146104f257818110156104e55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161030b565b6104f2848484840361035a565b50505050565b6001600160a01b03831661055c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161030b565b6001600160a01b0382166105be5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161030b565b6001600160a01b038316600090815260336020526040902054818110156106365760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161030b565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106969086815260200190565b60405180910390a36104f2565b600060208083528351808285015260005b818110156106d0578581018301518582016040015282016106b4565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461070857600080fd5b919050565b6000806040838503121561072057600080fd5b610729836106f1565b946020939093013593505050565b60008060006060848603121561074c57600080fd5b610755846106f1565b9250610763602085016106f1565b9150604084013590509250925092565b60006020828403121561078557600080fd5b61078e826106f1565b9392505050565b600080604083850312156107a857600080fd5b6107b1836106f1565b91506107bf602084016106f1565b90509250929050565b600181811c908216806107dc57607f821691505b6020821081036107fc57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561024657634e487b7160e01b600052601160045260246000fdfea264697066735822122065af93d51c0ada73eb1e418d9b04f9077736c71605cc0765863c7761bb5a52e164736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6A3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x70D JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x737 JUMP JUMPDEST PUSH2 0x24C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x70D JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x773 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x292 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x70D JUMP JUMPDEST PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x70D JUMP JUMPDEST PUSH2 0x321 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x795 JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7C8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x7C8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x35A JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x25A DUP6 DUP3 DUP6 PUSH2 0x47E JUMP JUMPDEST PUSH2 0x265 DUP6 DUP6 DUP6 PUSH2 0x4F8 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x283 DUP4 DUP4 PUSH2 0x32F JUMP JUMPDEST PUSH2 0x28D SWAP2 SWAP1 PUSH2 0x802 JUMP JUMPDEST PUSH2 0x35A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AF DUP3 DUP7 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x314 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x265 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x35A JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48A DUP5 DUP5 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F2 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30B JUMP JUMPDEST PUSH2 0x4F2 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x35A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x636 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x696 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6D0 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6B4 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x708 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x729 DUP4 PUSH2 0x6F1 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x74C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x755 DUP5 PUSH2 0x6F1 JUMP JUMPDEST SWAP3 POP PUSH2 0x763 PUSH1 0x20 DUP6 ADD PUSH2 0x6F1 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x785 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x78E DUP3 PUSH2 0x6F1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7B1 DUP4 PUSH2 0x6F1 JUMP JUMPDEST SWAP2 POP PUSH2 0x7BF PUSH1 0x20 DUP5 ADD PUSH2 0x6F1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x7DC JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x7FC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x246 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0xAF93D51C0ADA PUSH20 0xEB1E418D9B04F9077736C71605CC0765863C7761 0xBB GAS MSTORE 0xE1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "1611:11861:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2495:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4781:197;;;;;;:::i;:::-;;:::i;:::-;;;1169:14:9;;1162:22;1144:41;;1132:2;1117:18;4781:197:2;1004:187:9;3592:106:2;3679:12;;3592:106;;;1342:25:9;;;1330:2;1315:18;3592:106:2;1196:177:9;5540:256:2;;;;;;:::i;:::-;;:::i;3441:91::-;;;3523:2;1853:36:9;;1841:2;1826:18;3441:91:2;1711:184:9;6191:234:2;;;;;;:::i;:::-;;:::i;3756:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3856:18:2;3830:7;3856:18;;;:9;:18;;;;;;;3756:125;2706:102;;;:::i;6912:427::-;;;;;;:::i;:::-;;:::i;4077:189::-;;;;;;:::i;:::-;;:::i;4324:149::-;;;;;;:::i;:::-;;:::i;2495:98::-;2549:13;2581:5;2574:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2495:98;:::o;4781:197::-;4864:4;929:10:6;4918:32:2;929:10:6;4934:7:2;4943:6;4918:8;:32::i;:::-;4967:4;4960:11;;;4781:197;;;;;:::o;5540:256::-;5637:4;929:10:6;5693:38:2;5709:4;929:10:6;5724:6:2;5693:15;:38::i;:::-;5741:27;5751:4;5757:2;5761:6;5741:9;:27::i;:::-;-1:-1:-1;5785:4:2;;5540:256;-1:-1:-1;;;;5540:256:2:o;6191:234::-;6279:4;929:10:6;6333:64:2;929:10:6;6349:7:2;6386:10;6358:25;929:10:6;6349:7:2;6358:9;:25::i;:::-;:38;;;;:::i;:::-;6333:8;:64::i;2706:102::-;2762:13;2794:7;2787:14;;;;;:::i;6912:427::-;7005:4;929:10:6;7005:4:2;7086:25;929:10:6;7103:7:2;7086:9;:25::i;:::-;7059:52;;7149:15;7129:16;:35;;7121:85;;;;-1:-1:-1;;;7121:85:2;;3170:2:9;7121:85:2;;;3152:21:9;3209:2;3189:18;;;3182:30;3248:34;3228:18;;;3221:62;-1:-1:-1;;;3299:18:9;;;3292:35;3344:19;;7121:85:2;;;;;;;;;7240:60;7249:5;7256:7;7284:15;7265:16;:34;7240:8;:60::i;4077:189::-;4156:4;929:10:6;4210:28:2;929:10:6;4227:2:2;4231:6;4210:9;:28::i;4324:149::-;-1:-1:-1;;;;;4439:18:2;;;4413:7;4439:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4324:149::o;10794:340::-;-1:-1:-1;;;;;10895:19:2;;10887:68;;;;-1:-1:-1;;;10887:68:2;;3576:2:9;10887:68:2;;;3558:21:9;3615:2;3595:18;;;3588:30;3654:34;3634:18;;;3627:62;-1:-1:-1;;;3705:18:9;;;3698:34;3749:19;;10887:68:2;3374:400:9;10887:68:2;-1:-1:-1;;;;;10973:21:2;;10965:68;;;;-1:-1:-1;;;10965:68:2;;3981:2:9;10965:68:2;;;3963:21:9;4020:2;4000:18;;;3993:30;4059:34;4039:18;;;4032:62;-1:-1:-1;;;4110:18:9;;;4103:32;4152:19;;10965:68:2;3779:398:9;10965:68:2;-1:-1:-1;;;;;11044:18:2;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11095:32;;1342:25:9;;;11095:32:2;;1315:18:9;11095:32:2;;;;;;;10794:340;;;:::o;11415:411::-;11515:24;11542:25;11552:5;11559:7;11542:9;:25::i;:::-;11515:52;;-1:-1:-1;;11581:16:2;:37;11577:243;;11662:6;11642:16;:26;;11634:68;;;;-1:-1:-1;;;11634:68:2;;4384:2:9;11634:68:2;;;4366:21:9;4423:2;4403:18;;;4396:30;4462:31;4442:18;;;4435:59;4511:18;;11634:68:2;4182:353:9;11634:68:2;11744:51;11753:5;11760:7;11788:6;11769:16;:25;11744:8;:51::i;:::-;11505:321;11415:411;;;:::o;7793:788::-;-1:-1:-1;;;;;7889:18:2;;7881:68;;;;-1:-1:-1;;;7881:68:2;;4742:2:9;7881:68:2;;;4724:21:9;4781:2;4761:18;;;4754:30;4820:34;4800:18;;;4793:62;-1:-1:-1;;;4871:18:9;;;4864:35;4916:19;;7881:68:2;4540:401:9;7881:68:2;-1:-1:-1;;;;;7967:16:2;;7959:64;;;;-1:-1:-1;;;7959:64:2;;5148:2:9;7959:64:2;;;5130:21:9;5187:2;5167:18;;;5160:30;5226:34;5206:18;;;5199:62;-1:-1:-1;;;5277:18:9;;;5270:33;5320:19;;7959:64:2;4946:399:9;7959:64:2;-1:-1:-1;;;;;8105:15:2;;8083:19;8105:15;;;:9;:15;;;;;;8138:21;;;;8130:72;;;;-1:-1:-1;;;8130:72:2;;5552:2:9;8130:72:2;;;5534:21:9;5591:2;5571:18;;;5564:30;5630:34;5610:18;;;5603:62;-1:-1:-1;;;5681:18:9;;;5674:36;5727:19;;8130:72:2;5350:402:9;8130:72:2;-1:-1:-1;;;;;8236:15:2;;;;;;;:9;:15;;;;;;8254:20;;;8236:38;;8451:13;;;;;;;;;;:23;;;;;;8500:26;;;;;;8268:6;1342:25:9;;1330:2;1315:18;;1196:177;8500:26:2;;;;;;;;8537:37;12410:91;14:548:9;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:173::-;635:20;;-1:-1:-1;;;;;684:31:9;;674:42;;664:70;;730:1;727;720:12;664:70;567:173;;;:::o;745:254::-;813:6;821;874:2;862:9;853:7;849:23;845:32;842:52;;;890:1;887;880:12;842:52;913:29;932:9;913:29;:::i;:::-;903:39;989:2;974:18;;;;961:32;;-1:-1:-1;;;745:254:9:o;1378:328::-;1455:6;1463;1471;1524:2;1512:9;1503:7;1499:23;1495:32;1492:52;;;1540:1;1537;1530:12;1492:52;1563:29;1582:9;1563:29;:::i;:::-;1553:39;;1611:38;1645:2;1634:9;1630:18;1611:38;:::i;:::-;1601:48;;1696:2;1685:9;1681:18;1668:32;1658:42;;1378:328;;;;;:::o;1900:186::-;1959:6;2012:2;2000:9;1991:7;1987:23;1983:32;1980:52;;;2028:1;2025;2018:12;1980:52;2051:29;2070:9;2051:29;:::i;:::-;2041:39;1900:186;-1:-1:-1;;;1900:186:9:o;2091:260::-;2159:6;2167;2220:2;2208:9;2199:7;2195:23;2191:32;2188:52;;;2236:1;2233;2226:12;2188:52;2259:29;2278:9;2259:29;:::i;:::-;2249:39;;2307:38;2341:2;2330:9;2326:18;2307:38;:::i;:::-;2297:48;;2091:260;;;;;:::o;2356:380::-;2435:1;2431:12;;;;2478;;;2499:61;;2553:4;2545:6;2541:17;2531:27;;2499:61;2606:2;2598:6;2595:14;2575:18;2572:38;2569:161;;2652:10;2647:3;2643:20;2640:1;2633:31;2687:4;2684:1;2677:15;2715:4;2712:1;2705:15;2569:161;;2356:380;;;:::o;2741:222::-;2806:9;;;2827:10;;;2824:133;;;2879:10;2874:3;2870:20;2867:1;2860:31;2914:4;2911:1;2904:15;2942:4;2939:1;2932:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "427400",
								"executionCost": "461",
								"totalCost": "427861"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24628",
								"balanceOf(address)": "2559",
								"decimals()": "266",
								"decreaseAllowance(address,uint256)": "27016",
								"increaseAllowance(address,uint256)": "infinite",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2326",
								"transfer(address,uint256)": "51147",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"__ERC20_init(string memory,string memory)": "infinite",
								"__ERC20_init_unchained(string memory,string memory)": "infinite",
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122065af93d51c0ada73eb1e418d9b04f9077736c71605cc0765863c7761bb5a52e164736f6c63430008130033",
									".code": [
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "39509351"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "39509351"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "70A08231"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "95D89B41"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "A457C2D7"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "DD62ED3E"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "6FDDE03"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "95EA7B3"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "18160DDD"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "23B872DD"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "313CE567"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2495,
											"end": 2593,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 2495,
											"end": 2593,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 4781,
											"end": 4978,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4781,
											"end": 4978,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1169,
											"end": 1183,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1169,
											"end": 1183,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1162,
											"end": 1184,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1144,
											"end": 1185,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1144,
											"end": 1185,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1132,
											"end": 1134,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1117,
											"end": 1135,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1004,
											"end": 1191,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3679,
											"end": 3691,
											"name": "PUSH",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3679,
											"end": 3691,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1330,
											"end": 1332,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1333,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1196,
											"end": 1373,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 5540,
											"end": 5796,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5540,
											"end": 5796,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3523,
											"end": 3525,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1853,
											"end": 1889,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1853,
											"end": 1889,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1841,
											"end": 1843,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1711,
											"end": 1895,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 6191,
											"end": 6425,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6191,
											"end": 6425,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 3756,
											"end": 3881,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "tag",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3830,
											"end": 3837,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 2706,
											"end": 2808,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 6912,
											"end": 7339,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 6912,
											"end": 7339,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 4077,
											"end": 4266,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 4077,
											"end": 4266,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 4324,
											"end": 4473,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 4324,
											"end": 4473,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2549,
											"end": 2562,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2581,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2574,
											"end": 2586,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2574,
											"end": 2586,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4864,
											"end": 4868,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4934,
											"end": 4941,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4943,
											"end": 4949,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4918,
											"end": 4926,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 4918,
											"end": 4950,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "tag",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4967,
											"end": 4971,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4960,
											"end": 4971,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4960,
											"end": 4971,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4960,
											"end": 4971,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5637,
											"end": 5641,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 5709,
											"end": 5713,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5724,
											"end": 5730,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5693,
											"end": 5708,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 5693,
											"end": 5731,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "tag",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 5751,
											"end": 5755,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5757,
											"end": 5759,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5761,
											"end": 5767,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5741,
											"end": 5750,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 5741,
											"end": 5768,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5785,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5785,
											"end": 5789,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5540,
											"end": 5796,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6279,
											"end": 6283,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 6333,
											"end": 6397,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6349,
											"end": 6356,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6386,
											"end": 6396,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6349,
											"end": 6356,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6358,
											"end": 6367,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 6358,
											"end": 6383,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "tag",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 6358,
											"end": 6396,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6333,
											"end": 6341,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 6333,
											"end": 6397,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2762,
											"end": 2775,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2794,
											"end": 2801,
											"name": "PUSH",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2787,
											"end": 2801,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7005,
											"end": 7009,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7005,
											"end": 7009,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7103,
											"end": 7110,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7086,
											"end": 7095,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 7086,
											"end": 7111,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "tag",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7059,
											"end": 7111,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7059,
											"end": 7111,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7149,
											"end": 7164,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7129,
											"end": 7145,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7129,
											"end": 7164,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 7129,
											"end": 7164,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3170,
											"end": 3172,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3152,
											"end": 3173,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3209,
											"end": 3211,
											"name": "PUSH",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 3189,
											"end": 3207,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 3189,
											"end": 3207,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3189,
											"end": 3207,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3182,
											"end": 3212,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3248,
											"end": 3282,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 3228,
											"end": 3246,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 3228,
											"end": 3246,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3228,
											"end": 3246,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3221,
											"end": 3283,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3299,
											"end": 3317,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 3299,
											"end": 3317,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3299,
											"end": 3317,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3292,
											"end": 3327,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3344,
											"end": 3363,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 3344,
											"end": 3363,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "tag",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7240,
											"end": 7300,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 7249,
											"end": 7254,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7256,
											"end": 7263,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7299,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7265,
											"end": 7281,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7265,
											"end": 7299,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7240,
											"end": 7248,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 7240,
											"end": 7300,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4156,
											"end": 4160,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4210,
											"end": 4238,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4227,
											"end": 4229,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4231,
											"end": 4237,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4210,
											"end": 4219,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 4210,
											"end": 4238,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4413,
											"end": 4420,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4450,
											"name": "PUSH",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4324,
											"end": 4473,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "tag",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10895,
											"end": 10914,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10895,
											"end": 10914,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3576,
											"end": 3578,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3558,
											"end": 3579,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3615,
											"end": 3617,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 3595,
											"end": 3613,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3595,
											"end": 3613,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3595,
											"end": 3613,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3588,
											"end": 3618,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3654,
											"end": 3688,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 3634,
											"end": 3652,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 3634,
											"end": 3652,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3634,
											"end": 3652,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3627,
											"end": 3689,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3705,
											"end": 3723,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 3705,
											"end": 3723,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3705,
											"end": 3723,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3698,
											"end": 3732,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3749,
											"end": 3768,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 3749,
											"end": 3768,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3374,
											"end": 3774,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "tag",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10973,
											"end": 10994,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10973,
											"end": 10994,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3981,
											"end": 3983,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3963,
											"end": 3984,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4020,
											"end": 4022,
											"name": "PUSH",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3993,
											"end": 4023,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4059,
											"end": 4093,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 4039,
											"end": 4057,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 4039,
											"end": 4057,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4039,
											"end": 4057,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4032,
											"end": 4094,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4110,
											"end": 4128,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 4110,
											"end": 4128,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4110,
											"end": 4128,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4103,
											"end": 4135,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4152,
											"end": 4171,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 4152,
											"end": 4171,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3779,
											"end": 4177,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "tag",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11055,
											"name": "PUSH",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11080,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11080,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11080,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1315,
											"end": 1333,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10794,
											"end": 11134,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11515,
											"end": 11539,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 11552,
											"end": 11557,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11559,
											"end": 11566,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11542,
											"end": 11551,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 11542,
											"end": 11567,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "tag",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11515,
											"end": 11567,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11515,
											"end": 11567,
											"name": "POP",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11581,
											"end": 11597,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11581,
											"end": 11618,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 11577,
											"end": 11820,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 11577,
											"end": 11820,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11662,
											"end": 11668,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11642,
											"end": 11658,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11642,
											"end": 11668,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 11642,
											"end": 11668,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4384,
											"end": 4386,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4366,
											"end": 4387,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4423,
											"end": 4425,
											"name": "PUSH",
											"source": 9,
											"value": "1D"
										},
										{
											"begin": 4403,
											"end": 4421,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 4403,
											"end": 4421,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4403,
											"end": 4421,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4396,
											"end": 4426,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4462,
											"end": 4493,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 4442,
											"end": 4460,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 4442,
											"end": 4460,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4442,
											"end": 4460,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4435,
											"end": 4494,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4511,
											"end": 4529,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 4511,
											"end": 4529,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 4182,
											"end": 4535,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "tag",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11744,
											"end": 11795,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 11753,
											"end": 11758,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11760,
											"end": 11767,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11788,
											"end": 11794,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11769,
											"end": 11785,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11769,
											"end": 11794,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11744,
											"end": 11752,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 11744,
											"end": 11795,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11744,
											"end": 11795,
											"name": "tag",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 11744,
											"end": 11795,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11505,
											"end": 11826,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11415,
											"end": 11826,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7793,
											"end": 8581,
											"name": "tag",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 7793,
											"end": 8581,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7889,
											"end": 7907,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7889,
											"end": 7907,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4742,
											"end": 4744,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4724,
											"end": 4745,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4783,
											"name": "PUSH",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 4761,
											"end": 4779,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 4761,
											"end": 4779,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4761,
											"end": 4779,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4754,
											"end": 4784,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4820,
											"end": 4854,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 4800,
											"end": 4818,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 4800,
											"end": 4818,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4800,
											"end": 4818,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4793,
											"end": 4855,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4871,
											"end": 4889,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 4871,
											"end": 4889,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4871,
											"end": 4889,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4864,
											"end": 4899,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4916,
											"end": 4935,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 4916,
											"end": 4935,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 4540,
											"end": 4941,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "tag",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7967,
											"end": 7983,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7967,
											"end": 7983,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5148,
											"end": 5150,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5130,
											"end": 5151,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5187,
											"end": 5189,
											"name": "PUSH",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 5167,
											"end": 5185,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 5167,
											"end": 5185,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5185,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5160,
											"end": 5190,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5226,
											"end": 5260,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5199,
											"end": 5261,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5277,
											"end": 5295,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 5277,
											"end": 5295,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5277,
											"end": 5295,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5270,
											"end": 5303,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5320,
											"end": 5339,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 5320,
											"end": 5339,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 4946,
											"end": 5345,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "tag",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8083,
											"end": 8102,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8105,
											"end": 8114,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5552,
											"end": 5554,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5534,
											"end": 5555,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5591,
											"end": 5593,
											"name": "PUSH",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 5571,
											"end": 5589,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 5571,
											"end": 5589,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5571,
											"end": 5589,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5564,
											"end": 5594,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5630,
											"end": 5664,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 5610,
											"end": 5628,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 5610,
											"end": 5628,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5610,
											"end": 5628,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5603,
											"end": 5665,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5681,
											"end": 5699,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 5681,
											"end": 5699,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5681,
											"end": 5699,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5674,
											"end": 5710,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5727,
											"end": 5746,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 5727,
											"end": 5746,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 5350,
											"end": 5752,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "tag",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8245,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8254,
											"end": 8274,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8254,
											"end": 8274,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8254,
											"end": 8274,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8274,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8274,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8268,
											"end": 8274,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1330,
											"end": 1332,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1333,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1315,
											"end": 1333,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1196,
											"end": 1373,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "tag",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 8537,
											"end": 8574,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 12410,
											"end": 12501,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 14,
											"end": 562,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 14,
											"end": 562,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 157,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 184,
											"end": 186,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 173,
											"end": 182,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 166,
											"end": 187,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 216,
											"end": 222,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 210,
											"end": 223,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 259,
											"end": 265,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 254,
											"end": 256,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 243,
											"end": 252,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 239,
											"end": 257,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 232,
											"end": 266,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 284,
											"end": 285,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 308,
											"end": 314,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 305,
											"end": 306,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 302,
											"end": 315,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 294,
											"end": 434,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 403,
											"end": 417,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 399,
											"end": 422,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 399,
											"end": 422,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 369,
											"end": 386,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 388,
											"end": 390,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 391,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 358,
											"end": 424,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 323,
											"end": 333,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 323,
											"end": 333,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 298,
											"end": 301,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 483,
											"end": 484,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 478,
											"end": 480,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 469,
											"end": 475,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 458,
											"end": 467,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 454,
											"end": 476,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 450,
											"end": 481,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 443,
											"end": 485,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 553,
											"end": 555,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 546,
											"end": 548,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 542,
											"end": 549,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 537,
											"end": 539,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 529,
											"end": 535,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 525,
											"end": 540,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 521,
											"end": 550,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 510,
											"end": 519,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 506,
											"end": 551,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 502,
											"end": 556,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 494,
											"end": 556,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 494,
											"end": 556,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 494,
											"end": 556,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 494,
											"end": 556,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14,
											"end": 562,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 14,
											"end": 562,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 14,
											"end": 562,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14,
											"end": 562,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14,
											"end": 562,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 567,
											"end": 740,
											"name": "tag",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 567,
											"end": 740,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 635,
											"end": 655,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 635,
											"end": 655,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 684,
											"end": 715,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 684,
											"end": 715,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 674,
											"end": 716,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 674,
											"end": 716,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 664,
											"end": 734,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 664,
											"end": 734,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 730,
											"end": 731,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 727,
											"end": 728,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 720,
											"end": 732,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 664,
											"end": 734,
											"name": "tag",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 664,
											"end": 734,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 567,
											"end": 740,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 567,
											"end": 740,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 567,
											"end": 740,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 567,
											"end": 740,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 745,
											"end": 999,
											"name": "tag",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 745,
											"end": 999,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 813,
											"end": 819,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 821,
											"end": 827,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 874,
											"end": 876,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 862,
											"end": 871,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 853,
											"end": 860,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 849,
											"end": 872,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 845,
											"end": 877,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 842,
											"end": 894,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 842,
											"end": 894,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 842,
											"end": 894,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 890,
											"end": 891,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 887,
											"end": 888,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 880,
											"end": 892,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 842,
											"end": 894,
											"name": "tag",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 842,
											"end": 894,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 913,
											"end": 942,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 932,
											"end": 941,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 913,
											"end": 942,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 913,
											"end": 942,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 913,
											"end": 942,
											"name": "tag",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 913,
											"end": 942,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 903,
											"end": 942,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 989,
											"end": 991,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 974,
											"end": 992,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 974,
											"end": 992,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 974,
											"end": 992,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 974,
											"end": 992,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 961,
											"end": 993,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 961,
											"end": 993,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 745,
											"end": 999,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "tag",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1455,
											"end": 1461,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1463,
											"end": 1469,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1471,
											"end": 1477,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1524,
											"end": 1526,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 1512,
											"end": 1521,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1503,
											"end": 1510,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1499,
											"end": 1522,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1495,
											"end": 1527,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1540,
											"end": 1541,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1537,
											"end": 1538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1530,
											"end": 1542,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "tag",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1563,
											"end": 1592,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 1582,
											"end": 1591,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1563,
											"end": 1592,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 1563,
											"end": 1592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1563,
											"end": 1592,
											"name": "tag",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 1563,
											"end": 1592,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1553,
											"end": 1592,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1553,
											"end": 1592,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 1645,
											"end": 1647,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1634,
											"end": 1643,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1630,
											"end": 1648,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 1611,
											"end": 1649,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1649,
											"name": "tag",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 1611,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1601,
											"end": 1649,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1601,
											"end": 1649,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1696,
											"end": 1698,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1685,
											"end": 1694,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1681,
											"end": 1699,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1668,
											"end": 1700,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1658,
											"end": 1700,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1658,
											"end": 1700,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1378,
											"end": 1706,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1900,
											"end": 2086,
											"name": "tag",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 1900,
											"end": 2086,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1959,
											"end": 1965,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2012,
											"end": 2014,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2000,
											"end": 2009,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1991,
											"end": 1998,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1987,
											"end": 2010,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1983,
											"end": 2015,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "159"
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2028,
											"end": 2029,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2025,
											"end": 2026,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2018,
											"end": 2030,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "tag",
											"source": 9,
											"value": "159"
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2051,
											"end": 2080,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 2070,
											"end": 2079,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2051,
											"end": 2080,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 2051,
											"end": 2080,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2051,
											"end": 2080,
											"name": "tag",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 2051,
											"end": 2080,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2041,
											"end": 2080,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 1900,
											"end": 2086,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1900,
											"end": 2086,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "tag",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2159,
											"end": 2165,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2167,
											"end": 2173,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2220,
											"end": 2222,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2208,
											"end": 2217,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2206,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2195,
											"end": 2218,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2191,
											"end": 2223,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 2188,
											"end": 2240,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2188,
											"end": 2240,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 2188,
											"end": 2240,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2236,
											"end": 2237,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2233,
											"end": 2234,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2226,
											"end": 2238,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2188,
											"end": 2240,
											"name": "tag",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 2188,
											"end": 2240,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2259,
											"end": 2288,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 2278,
											"end": 2287,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2259,
											"end": 2288,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 2259,
											"end": 2288,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2259,
											"end": 2288,
											"name": "tag",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 2259,
											"end": 2288,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2249,
											"end": 2288,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2249,
											"end": 2288,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2307,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 2341,
											"end": 2343,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2330,
											"end": 2339,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2326,
											"end": 2344,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2307,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 2307,
											"end": 2345,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2307,
											"end": 2345,
											"name": "tag",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 2307,
											"end": 2345,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2297,
											"end": 2345,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2297,
											"end": 2345,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2351,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2736,
											"name": "tag",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 2356,
											"end": 2736,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2435,
											"end": 2436,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2431,
											"end": 2443,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2431,
											"end": 2443,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2431,
											"end": 2443,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2431,
											"end": 2443,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2478,
											"end": 2490,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2478,
											"end": 2490,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2478,
											"end": 2490,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2499,
											"end": 2560,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 2499,
											"end": 2560,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2553,
											"end": 2557,
											"name": "PUSH",
											"source": 9,
											"value": "7F"
										},
										{
											"begin": 2545,
											"end": 2551,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2531,
											"end": 2558,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2531,
											"end": 2558,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2499,
											"end": 2560,
											"name": "tag",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 2499,
											"end": 2560,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2606,
											"end": 2608,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2598,
											"end": 2604,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 2575,
											"end": 2593,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2572,
											"end": 2610,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2569,
											"end": 2730,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 2569,
											"end": 2730,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2652,
											"end": 2662,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 2647,
											"end": 2650,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 2643,
											"end": 2663,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 2640,
											"end": 2641,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2633,
											"end": 2664,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2687,
											"end": 2691,
											"name": "PUSH",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 2684,
											"end": 2685,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2677,
											"end": 2692,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2715,
											"end": 2719,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2712,
											"end": 2713,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2705,
											"end": 2720,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2569,
											"end": 2730,
											"name": "tag",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 2569,
											"end": 2730,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2569,
											"end": 2730,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2736,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2736,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2736,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2736,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2741,
											"end": 2963,
											"name": "tag",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 2741,
											"end": 2963,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2806,
											"end": 2815,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2806,
											"end": 2815,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2806,
											"end": 2815,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2837,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2837,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2837,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 2824,
											"end": 2957,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2824,
											"end": 2957,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 2824,
											"end": 2957,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2879,
											"end": 2889,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 2874,
											"end": 2877,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 2870,
											"end": 2890,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 2867,
											"end": 2868,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2860,
											"end": 2891,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2914,
											"end": 2918,
											"name": "PUSH",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 2911,
											"end": 2912,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2904,
											"end": 2919,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2942,
											"end": 2946,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2939,
											"end": 2940,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2932,
											"end": 2947,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
								"src/project/IProjectToken.sol",
								"src/project/ProjectToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29d6a502187e88fdb4ac51319b6cfc82e7ba886a435480e229e5f838d2da55ee\",\"dweb:/ipfs/QmQNWKr3axXvQowZi31ydXRdeZ7UnE7oN8XAz9FCkx1JhN\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f\",\"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1386,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 319,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 325,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 327,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 329,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 331,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 911,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"IERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f\",\"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"IERC20MetadataUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":\"IERC20MetadataUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f\",\"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:9374  library AddressUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:9374  library AddressUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220d84162932f9684acba36887aafb287fd3f3398d7fce39e1bcce915e92e11e55464736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d84162932f9684acba36887aafb287fd3f3398d7fce39e1bcce915e92e11e55464736f6c63430008130033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 COINBASE PUSH3 0x932F96 DUP5 0xAC 0xBA CALLDATASIZE DUP9 PUSH27 0xAFB287FD3F3398D7FCE39E1BCCE915E92E11E55464736F6C634300 ADDMOD SGT STOP CALLER ",
							"sourceMap": "194:9180:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9180:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d84162932f9684acba36887aafb287fd3f3398d7fce39e1bcce915e92e11e55464736f6c63430008130033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 COINBASE PUSH3 0x932F96 DUP5 0xAC 0xBA CALLDATASIZE DUP9 PUSH27 0xAFB287FD3F3398D7FCE39E1BCCE915E92E11E55464736F6C634300 ADDMOD SGT STOP CALLER ",
							"sourceMap": "194:9180:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d84162932f9684acba36887aafb287fd3f3398d7fce39e1bcce915e92e11e55464736f6c63430008130033",
									".code": [
										{
											"begin": 194,
											"end": 9374,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
								"src/project/IProjectToken.sol",
								"src/project/ProjectToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"events": {
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1386,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/project/IProjectToken.sol": {
				"IProjectToken": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"initialize(string,string,address)": "077f224a",
							"mint(address,uint256)": "40c10f19"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/project/IProjectToken.sol\":\"IProjectToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/project/IProjectToken.sol\":{\"keccak256\":\"0x924b067f02f30bf87b07028947fa2767d38b1ebeeada73fa04ff4b9f0589b402\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e6a7a14b42cf3165ac60c2c5390d463b319bd4ee64159464bd9f2c9cc47bc624\",\"dweb:/ipfs/QmU9Tkr9fsn3Dm3QZreMja4jeKRtYG3thx2kuV4sbCa2jE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/project/ProjectToken.sol": {
				"ProjectToken": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/project/ProjectToken.sol\":244:644  contract ProjectToken is OwnableUpgradeable, ERC20Upgradeable, IProjectToken {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/project/ProjectToken.sol\":244:644  contract ProjectToken is OwnableUpgradeable, ERC20Upgradeable, IProjectToken {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x70a08231\n      gt\n      tag_19\n      jumpi\n      dup1\n      0xa457c2d7\n      gt\n      tag_20\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      dup1\n      0x70a08231\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_19:\n      dup1\n      0x23b872dd\n      gt\n      tag_21\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_21:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x077f224a\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2495:2593  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_22\n      tag_23\n      jump\t// in\n    tag_22:\n      mload(0x40)\n      tag_24\n      swap2\n      swap1\n      tag_25\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/project/ProjectToken.sol\":327:533  function initialize(... */\n    tag_4:\n      tag_26\n      tag_27\n      calldatasize\n      0x04\n      tag_28\n      jump\t// in\n    tag_27:\n      tag_29\n      jump\t// in\n    tag_26:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_5:\n      tag_30\n      tag_31\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_31:\n      tag_33\n      jump\t// in\n    tag_30:\n      mload(0x40)\n        /* \"#utility.yul\":2647:2661   */\n      swap1\n      iszero\n        /* \"#utility.yul\":2640:2662   */\n      iszero\n        /* \"#utility.yul\":2622:2663   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2610:2612   */\n      0x20\n        /* \"#utility.yul\":2595:2613   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_24\n        /* \"#utility.yul\":2482:2669   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3592:3698  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_6:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3679:3691  _totalSupply */\n      sload(0x67)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3592:3698  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_36:\n      mload(0x40)\n        /* \"#utility.yul\":2820:2845   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":2808:2810   */\n      0x20\n        /* \"#utility.yul\":2793:2811   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3592:3698  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_24\n        /* \"#utility.yul\":2674:2851   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5540:5796  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_7:\n      tag_30\n      tag_41\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_41:\n      tag_43\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3441:3532  function decimals() public view virtual override returns (uint8) {... */\n    tag_8:\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3523:3525  18 */\n      0x12\n        /* \"#utility.yul\":3331:3367   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3319:3321   */\n      0x20\n        /* \"#utility.yul\":3304:3322   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3441:3532  function decimals() public view virtual override returns (uint8) {... */\n      tag_24\n        /* \"#utility.yul\":3189:3373   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6191:6425  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_9:\n      tag_30\n      tag_50\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_50:\n      tag_51\n      jump\t// in\n        /* \"src/project/ProjectToken.sol\":539:642  function mint(address account, uint256 amount) public onlyOwner {... */\n    tag_10:\n      tag_26\n      tag_54\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_54:\n      tag_55\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3756:3881  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_11:\n      tag_36\n      tag_57\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_57:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3856:3874  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3830:3837  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3856:3874  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3856:3865  _balances */\n      0x65\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3856:3874  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3756:3881  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2064:2165  function renounceOwnership() public virtual onlyOwner {... */\n    tag_12:\n      tag_26\n      tag_62\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1441:1526  function owner() public view virtual returns (address) {... */\n    tag_13:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1513:1519  _owner */\n      sload(0x33)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1441:1526  function owner() public view virtual returns (address) {... */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1513:1519  _owner */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":3715:3766   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3703:3705   */\n      0x20\n        /* \"#utility.yul\":3688:3706   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1441:1526  function owner() public view virtual returns (address) {... */\n      tag_24\n        /* \"#utility.yul\":3569:3772   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2706:2808  function symbol() public view virtual override returns (string memory) {... */\n    tag_14:\n      tag_22\n      tag_68\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6912:7339  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_15:\n      tag_30\n      tag_71\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_71:\n      tag_72\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4077:4266  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_16:\n      tag_30\n      tag_75\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_75:\n      tag_76\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4324:4473  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_17:\n      tag_36\n      tag_79\n      calldatasize\n      0x04\n      tag_80\n      jump\t// in\n    tag_79:\n      tag_81\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2314:2512  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_18:\n      tag_26\n      tag_84\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_84:\n      tag_85\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2495:2593  function name() public view virtual override returns (string memory) {... */\n    tag_23:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2549:2562  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2581:2586  _name */\n      0x68\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2574:2586  return _name */\n      dup1\n      sload\n      tag_87\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_89\n      swap1\n      tag_88\n      jump\t// in\n    tag_89:\n      dup1\n      iszero\n      tag_90\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_91\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_90)\n    tag_91:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_92:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_92\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_90:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2495:2593  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"src/project/ProjectToken.sol\":327:533  function initialize(... */\n    tag_29:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3279:3298  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3302:3315  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3301:3315  !_initializing */\n      iszero\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3347:3381  isTopLevelCall && _initialized < 1 */\n      dup1\n      iszero\n      tag_94\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3365:3377  _initialized */\n      sload(0x00)\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3380:3381  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3365:3377  _initialized */\n      0xff\n      swap1\n      swap2\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3365:3381  _initialized < 1 */\n      lt\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3347:3381  isTopLevelCall && _initialized < 1 */\n    tag_94:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3346:3454  (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1) */\n      dup1\n      tag_98\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3426:3430  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1713:1732  account.code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1713:1736  account.code.length > 0 */\n      iszero\n      dup1\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3387:3453  !AddressUpgradeable.isContract(address(this)) && _initialized == 1 */\n      tag_98\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3436:3448  _initialized */\n      and(0xff, sload(0x00))\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3436:3453  _initialized == 1 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3387:3453  !AddressUpgradeable.isContract(address(this)) && _initialized == 1 */\n    tag_98:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3325:3526  require(... */\n      tag_99\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4629:4631   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3325:3526  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4611:4632   */\n      mstore\n        /* \"#utility.yul\":4668:4670   */\n      0x2e\n        /* \"#utility.yul\":4648:4666   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4641:4671   */\n      mstore\n        /* \"#utility.yul\":4707:4741   */\n      0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561\n        /* \"#utility.yul\":4687:4705   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4680:4742   */\n      mstore\n      shl(0x92, 0x191e481a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":4758:4776   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4751:4795   */\n      mstore\n        /* \"#utility.yul\":4812:4831   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3325:3526  require(... */\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3536:3548  _initialized */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3536:3552  _initialized = 1 */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3551:3552  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3536:3552  _initialized = 1 */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3562:3627  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_102\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3596:3609  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3596:3616  _initializing = true */\n      dup1\n      sload\n      not(0xff00)\n      and\n      0x0100\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3562:3627  if (isTopLevelCall) {... */\n    tag_102:\n        /* \"src/project/ProjectToken.sol\":465:491  __ERC20_init(name, symbol) */\n      tag_104\n        /* \"src/project/ProjectToken.sol\":478:482  name */\n      dup5\n        /* \"src/project/ProjectToken.sol\":484:490  symbol */\n      dup5\n        /* \"src/project/ProjectToken.sol\":465:477  __ERC20_init */\n      tag_105\n        /* \"src/project/ProjectToken.sol\":465:491  __ERC20_init(name, symbol) */\n      jump\t// in\n    tag_104:\n        /* \"src/project/ProjectToken.sol\":501:526  _transferOwnership(owner) */\n      tag_106\n        /* \"src/project/ProjectToken.sol\":520:525  owner */\n      dup3\n        /* \"src/project/ProjectToken.sol\":501:519  _transferOwnership */\n      tag_107\n        /* \"src/project/ProjectToken.sol\":501:526  _transferOwnership(owner) */\n      jump\t// in\n    tag_106:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3651:3665  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3647:3746  if (isTopLevelCall) {... */\n      iszero\n      tag_108\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3697:3702  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3681:3702  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3721:3735  Initialized(1) */\n      mload(0x40)\n      0x01\n        /* \"#utility.yul\":3331:3367   */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3721:3735  Initialized(1) */\n      0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498\n      swap1\n        /* \"#utility.yul\":3319:3321   */\n      0x20\n        /* \"#utility.yul\":3304:3322   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3721:3735  Initialized(1) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3647:3746  if (isTopLevelCall) {... */\n    tag_108:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3269:3752  {... */\n      pop\n        /* \"src/project/ProjectToken.sol\":327:533  function initialize(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_33:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4864:4868  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4918:4950  _approve(owner, spender, amount) */\n      tag_114\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4934:4941  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4943:4949  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4918:4926  _approve */\n      tag_115\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4918:4950  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_114:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4967:4971  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4960:4971  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_111:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5540:5796  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_43:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5637:5641  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5693:5731  _spendAllowance(from, spender, amount) */\n      tag_119\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5709:5713  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5724:5730  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5693:5708  _spendAllowance */\n      tag_120\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5693:5731  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_119:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5741:5768  _transfer(from, to, amount) */\n      tag_121\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5751:5755  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5757:5759  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5761:5767  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5741:5750  _transfer */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5741:5768  _transfer(from, to, amount) */\n      jump\t// in\n    tag_121:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5785:5789  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5540:5796  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6191:6425  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_51:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6279:6283  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6333:6397  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_114\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6349:6356  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6386:6396  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6358:6383  allowance(owner, spender) */\n      tag_127\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6349:6356  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6358:6367  allowance */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6358:6383  allowance(owner, spender) */\n      jump\t// in\n    tag_127:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6358:6396  allowance(owner, spender) + addedValue */\n      tag_128\n      swap2\n      swap1\n      tag_129\n      jump\t// in\n    tag_128:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6333:6341  _approve */\n      tag_115\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6333:6397  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"src/project/ProjectToken.sol\":539:642  function mint(address account, uint256 amount) public onlyOwner {... */\n    tag_55:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      tag_131\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1345  _checkOwner */\n      tag_132\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      jump\t// in\n    tag_131:\n        /* \"src/project/ProjectToken.sol\":613:635  _mint(account, amount) */\n      tag_134\n        /* \"src/project/ProjectToken.sol\":619:626  account */\n      dup3\n        /* \"src/project/ProjectToken.sol\":628:634  amount */\n      dup3\n        /* \"src/project/ProjectToken.sol\":613:618  _mint */\n      tag_135\n        /* \"src/project/ProjectToken.sol\":613:635  _mint(account, amount) */\n      jump\t// in\n    tag_134:\n        /* \"src/project/ProjectToken.sol\":539:642  function mint(address account, uint256 amount) public onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2064:2165  function renounceOwnership() public virtual onlyOwner {... */\n    tag_62:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      tag_138\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1345  _checkOwner */\n      tag_132\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      jump\t// in\n    tag_138:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2128:2158  _transferOwnership(address(0)) */\n      tag_140\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2155:2156  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2128:2146  _transferOwnership */\n      tag_107\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2128:2158  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_140:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2064:2165  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2706:2808  function symbol() public view virtual override returns (string memory) {... */\n    tag_68:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2762:2775  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2794:2801  _symbol */\n      0x69\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2787:2801  return _symbol */\n      dup1\n      sload\n      tag_87\n      swap1\n      tag_88\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6912:7339  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_72:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7005:7009  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7005:7009  bool */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7086:7111  allowance(owner, spender) */\n      tag_150\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7103:7110  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7086:7095  allowance */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7086:7111  allowance(owner, spender) */\n      jump\t// in\n    tag_150:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7059:7111  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7149:7164  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7129:7145  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7129:7164  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7121:7206  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_151\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5470:5472   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7121:7206  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5452:5473   */\n      mstore\n        /* \"#utility.yul\":5509:5511   */\n      0x25\n        /* \"#utility.yul\":5489:5507   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5482:5512   */\n      mstore\n        /* \"#utility.yul\":5548:5582   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":5528:5546   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5521:5583   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":5599:5617   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5592:5627   */\n      mstore\n        /* \"#utility.yul\":5644:5663   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7121:7206  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_100\n        /* \"#utility.yul\":5268:5669   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7121:7206  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_151:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7240:7300  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_121\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7249:7254  owner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7256:7263  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7284:7299  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7265:7281  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7265:7299  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7240:7248  _approve */\n      tag_115\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7240:7300  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4077:4266  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_76:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4156:4160  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4210:4238  _transfer(owner, to, amount) */\n      tag_114\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4227:4229  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4231:4237  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4210:4219  _transfer */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4210:4238  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4324:4473  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4439:4457  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4413:4420  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4439:4457  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4439:4450  _allowances */\n      0x66\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4439:4457  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4439:4466  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4324:4473  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2314:2512  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_85:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      tag_160\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1345  _checkOwner */\n      tag_132\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      jump\t// in\n    tag_160:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2402:2424  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2394:2467  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_162\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5876:5878   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2394:2467  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5858:5879   */\n      mstore\n        /* \"#utility.yul\":5915:5917   */\n      0x26\n        /* \"#utility.yul\":5895:5913   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5888:5918   */\n      mstore\n        /* \"#utility.yul\":5954:5988   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":5934:5952   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5927:5989   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":6005:6023   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5998:6034   */\n      mstore\n        /* \"#utility.yul\":6051:6070   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2394:2467  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_100\n        /* \"#utility.yul\":5674:6076   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2394:2467  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_162:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2477:2505  _transferOwnership(newOwner) */\n      tag_165\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2496:2504  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2477:2495  _transferOwnership */\n      tag_107\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2477:2505  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_165:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2314:2512  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2118:2265  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_105:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5374:5387  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5366:5435  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_168\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_170\n      jump\t// in\n    tag_168:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2220:2258  __ERC20_init_unchained(name_, symbol_) */\n      tag_134\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2243:2248  name_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2250:2257  symbol_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2220:2242  __ERC20_init_unchained */\n      tag_173\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2220:2258  __ERC20_init_unchained(name_, symbol_) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2666:2853  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_107:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2758:2764  _owner */\n      0x33\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2774:2791  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2806:2846  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2758:2764  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2774:2791  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2758:2764  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2806:2846  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2739:2755  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2806:2846  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2729:2853  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2666:2853  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10794:11134  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_115:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10895:10914  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10887:10955  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_177\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6695:6697   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10887:10955  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6677:6698   */\n      mstore\n        /* \"#utility.yul\":6734:6736   */\n      0x24\n        /* \"#utility.yul\":6714:6732   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":6707:6737   */\n      mstore\n        /* \"#utility.yul\":6773:6807   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":6753:6771   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6746:6808   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":6824:6842   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6817:6851   */\n      mstore\n        /* \"#utility.yul\":6868:6887   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10887:10955  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":6493:6893   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10887:10955  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_177:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10973:10994  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10965:11033  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_180\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7100:7102   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10965:11033  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7082:7103   */\n      mstore\n        /* \"#utility.yul\":7139:7141   */\n      0x22\n        /* \"#utility.yul\":7119:7137   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7112:7142   */\n      mstore\n        /* \"#utility.yul\":7178:7212   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":7158:7176   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7151:7213   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":7229:7247   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7222:7254   */\n      mstore\n        /* \"#utility.yul\":7271:7290   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10965:11033  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":6898:7296   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10965:11033  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_180:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11044:11062  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11044:11055  _allowances */\n      0x66\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11044:11062  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11044:11071  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11044:11080  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11095:11127  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":2820:2845   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11095:11127  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":2793:2811   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11095:11127  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10794:11134  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11415:11826  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_120:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11515:11539  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11542:11567  allowance(owner, spender) */\n      tag_185\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11552:11557  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11559:11566  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11542:11551  allowance */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11542:11567  allowance(owner, spender) */\n      jump\t// in\n    tag_185:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11515:11567  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11581:11597  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11581:11618  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11577:11820  if (currentAllowance != type(uint256).max) {... */\n      tag_108\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11662:11668  amount */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11642:11658  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11642:11668  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11634:11702  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_187\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7503:7505   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11634:11702  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7485:7506   */\n      mstore\n        /* \"#utility.yul\":7542:7544   */\n      0x1d\n        /* \"#utility.yul\":7522:7540   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7515:7545   */\n      mstore\n        /* \"#utility.yul\":7581:7612   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":7561:7579   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7554:7613   */\n      mstore\n        /* \"#utility.yul\":7630:7648   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11634:11702  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_100\n        /* \"#utility.yul\":7301:7654   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11634:11702  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_187:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11744:11795  _approve(owner, spender, currentAllowance - amount) */\n      tag_108\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11753:11758  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11760:11767  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11788:11794  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11769:11785  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11769:11794  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11744:11752  _approve */\n      tag_115\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11744:11795  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7793:8581  function _transfer(address from, address to, uint256 amount) internal virtual {... */\n    tag_122:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7889:7907  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7881:7949  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_192\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7861:7863   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7881:7949  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7843:7864   */\n      mstore\n        /* \"#utility.yul\":7900:7902   */\n      0x25\n        /* \"#utility.yul\":7880:7898   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7873:7903   */\n      mstore\n        /* \"#utility.yul\":7939:7973   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":7919:7937   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7912:7974   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":7990:8008   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7983:8018   */\n      mstore\n        /* \"#utility.yul\":8035:8054   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7881:7949  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":7659:8060   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7881:7949  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_192:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7967:7983  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7959:8023  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_195\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8267:8269   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7959:8023  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8249:8270   */\n      mstore\n        /* \"#utility.yul\":8306:8308   */\n      0x23\n        /* \"#utility.yul\":8286:8304   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8279:8309   */\n      mstore\n        /* \"#utility.yul\":8345:8379   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":8325:8343   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8318:8380   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":8396:8414   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8389:8422   */\n      mstore\n        /* \"#utility.yul\":8439:8458   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7959:8023  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":8065:8464   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7959:8023  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_195:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8105:8120  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8083:8102  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8105:8120  _balances[from] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8105:8114  _balances */\n      0x65\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8105:8120  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8138:8159  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8130:8202  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_200\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8671:8673   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8130:8202  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8653:8674   */\n      mstore\n        /* \"#utility.yul\":8710:8712   */\n      0x26\n        /* \"#utility.yul\":8690:8708   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8683:8713   */\n      mstore\n        /* \"#utility.yul\":8749:8783   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":8729:8747   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8722:8784   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":8800:8818   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8793:8829   */\n      mstore\n        /* \"#utility.yul\":8846:8865   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8130:8202  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_100\n        /* \"#utility.yul\":8469:8871   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8130:8202  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_200:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8236:8251  _balances[from] */\n      dup1\n      dup6\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8236:8245  _balances */\n      0x65\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8236:8251  _balances[from] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8254:8274  fromBalance - amount */\n      dup7\n      dup7\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8236:8274  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8451:8464  _balances[to] */\n      swap3\n      dup7\n      and\n      dup1\n      dup3\n      mstore\n      swap1\n      dup4\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8451:8474  _balances[to] += amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8500:8526  Transfer(from, to, amount) */\n      swap2\n      mload\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n      tag_203\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8268:8274  amount */\n      dup7\n        /* \"#utility.yul\":2820:2845   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2808:2810   */\n      0x20\n        /* \"#utility.yul\":2793:2811   */\n      add\n      swap1\n        /* \"#utility.yul\":2674:2851   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8500:8526  Transfer(from, to, amount) */\n    tag_203:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8537:8574  _afterTokenTransfer(from, to, amount) */\n      tag_108\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2271:2430  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1599:1729  function _checkOwner() internal view virtual {... */\n    tag_132:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1513:1519  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x33))\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1662:1685  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1654:1722  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_140\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9078:9080   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1654:1722  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9060:9081   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":9097:9115   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9090:9120   */\n      mstore\n        /* \"#utility.yul\":9156:9190   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":9136:9154   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9129:9191   */\n      mstore\n        /* \"#utility.yul\":9208:9226   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1654:1722  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_100\n        /* \"#utility.yul\":8876:9232   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8857:9392  function _mint(address account, uint256 amount) internal virtual {... */\n    tag_135:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8940:8961  account != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8932:8997  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_213\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9439:9441   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8932:8997  require(account != address(0), \"ERC20: mint to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9421:9442   */\n      mstore\n        /* \"#utility.yul\":9478:9480   */\n      0x1f\n        /* \"#utility.yul\":9458:9476   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9451:9481   */\n      mstore\n        /* \"#utility.yul\":9517:9550   */\n      0x45524332303a206d696e7420746f20746865207a65726f206164647265737300\n        /* \"#utility.yul\":9497:9515   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9490:9551   */\n      mstore\n        /* \"#utility.yul\":9568:9586   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8932:8997  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":9237:9592   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8932:8997  require(account != address(0), \"ERC20: mint to the zero address\") */\n    tag_213:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9084:9090  amount */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9068:9080  _totalSupply */\n      0x67\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9068:9090  _totalSupply += amount */\n      dup3\n      dup3\n      sload\n      tag_217\n      swap2\n      swap1\n      tag_129\n      jump\t// in\n    tag_217:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9236:9254  _balances[account] */\n      dup3\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9236:9245  _balances */\n      0x65\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9236:9254  _balances[account] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9236:9264  _balances[account] += amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9289:9326  Transfer(address(0), account, amount) */\n      mload\n        /* \"#utility.yul\":2820:2845   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9289:9326  Transfer(address(0), account, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap2\n        /* \"#utility.yul\":2793:2811   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9289:9326  Transfer(address(0), account, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"src/project/ProjectToken.sol\":539:642  function mint(address account, uint256 amount) public onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2271:2430  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_173:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5374:5387  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5366:5435  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_221\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_170\n      jump\t// in\n    tag_221:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2383:2388  _name */\n      0x68\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2383:2396  _name = name_ */\n      tag_224\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2391:2396  name_ */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2383:2388  _name */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2383:2396  _name = name_ */\n      tag_225\n      jump\t// in\n    tag_224:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2406:2413  _symbol */\n      0x69\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2406:2423  _symbol = symbol_ */\n      tag_226\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2416:2423  symbol_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2406:2413  _symbol */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2406:2423  _symbol = symbol_ */\n      tag_225\n      jump\t// in\n    tag_226:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2271:2430  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {... */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:562   */\n    tag_25:\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":155:157   */\n      0x20\n        /* \"#utility.yul\":184:186   */\n      dup1\n        /* \"#utility.yul\":173:182   */\n      dup4\n        /* \"#utility.yul\":166:187   */\n      mstore\n        /* \"#utility.yul\":216:222   */\n      dup4\n        /* \"#utility.yul\":210:223   */\n      mload\n        /* \"#utility.yul\":259:265   */\n      dup1\n        /* \"#utility.yul\":254:256   */\n      dup3\n        /* \"#utility.yul\":243:252   */\n      dup6\n        /* \"#utility.yul\":239:257   */\n      add\n        /* \"#utility.yul\":232:266   */\n      mstore\n        /* \"#utility.yul\":284:285   */\n      0x00\n        /* \"#utility.yul\":294:434   */\n    tag_237:\n        /* \"#utility.yul\":308:314   */\n      dup2\n        /* \"#utility.yul\":305:306   */\n      dup2\n        /* \"#utility.yul\":302:315   */\n      lt\n        /* \"#utility.yul\":294:434   */\n      iszero\n      tag_239\n      jumpi\n        /* \"#utility.yul\":403:417   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":399:422   */\n      dup4\n      add\n        /* \"#utility.yul\":393:423   */\n      mload\n        /* \"#utility.yul\":369:386   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":388:390   */\n      0x40\n        /* \"#utility.yul\":365:391   */\n      add\n        /* \"#utility.yul\":358:424   */\n      mstore\n        /* \"#utility.yul\":323:333   */\n      dup3\n      add\n        /* \"#utility.yul\":294:434   */\n      jump(tag_237)\n    tag_239:\n        /* \"#utility.yul\":298:301   */\n      pop\n        /* \"#utility.yul\":483:484   */\n      0x00\n        /* \"#utility.yul\":478:480   */\n      0x40\n        /* \"#utility.yul\":469:475   */\n      dup3\n        /* \"#utility.yul\":458:467   */\n      dup7\n        /* \"#utility.yul\":454:476   */\n      add\n        /* \"#utility.yul\":450:481   */\n      add\n        /* \"#utility.yul\":443:485   */\n      mstore\n        /* \"#utility.yul\":553:555   */\n      0x40\n        /* \"#utility.yul\":546:548   */\n      0x1f\n        /* \"#utility.yul\":542:549   */\n      not\n        /* \"#utility.yul\":537:539   */\n      0x1f\n        /* \"#utility.yul\":529:535   */\n      dup4\n        /* \"#utility.yul\":525:540   */\n      add\n        /* \"#utility.yul\":521:550   */\n      and\n        /* \"#utility.yul\":510:519   */\n      dup6\n        /* \"#utility.yul\":506:551   */\n      add\n        /* \"#utility.yul\":502:556   */\n      add\n        /* \"#utility.yul\":494:556   */\n      swap3\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":14:562   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":567:694   */\n    tag_229:\n        /* \"#utility.yul\":628:638   */\n      0x4e487b71\n        /* \"#utility.yul\":623:626   */\n      0xe0\n        /* \"#utility.yul\":619:639   */\n      shl\n        /* \"#utility.yul\":616:617   */\n      0x00\n        /* \"#utility.yul\":609:640   */\n      mstore\n        /* \"#utility.yul\":659:663   */\n      0x41\n        /* \"#utility.yul\":656:657   */\n      0x04\n        /* \"#utility.yul\":649:664   */\n      mstore\n        /* \"#utility.yul\":683:687   */\n      0x24\n        /* \"#utility.yul\":680:681   */\n      0x00\n        /* \"#utility.yul\":673:688   */\n      revert\n        /* \"#utility.yul\":699:1418   */\n    tag_230:\n        /* \"#utility.yul\":742:747   */\n      0x00\n        /* \"#utility.yul\":795:798   */\n      dup3\n        /* \"#utility.yul\":788:792   */\n      0x1f\n        /* \"#utility.yul\":780:786   */\n      dup4\n        /* \"#utility.yul\":776:793   */\n      add\n        /* \"#utility.yul\":772:799   */\n      slt\n        /* \"#utility.yul\":762:817   */\n      tag_242\n      jumpi\n        /* \"#utility.yul\":813:814   */\n      0x00\n        /* \"#utility.yul\":810:811   */\n      dup1\n        /* \"#utility.yul\":803:815   */\n      revert\n        /* \"#utility.yul\":762:817   */\n    tag_242:\n        /* \"#utility.yul\":849:855   */\n      dup2\n        /* \"#utility.yul\":836:856   */\n      calldataload\n        /* \"#utility.yul\":875:893   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":912:914   */\n      dup1\n        /* \"#utility.yul\":908:910   */\n      dup3\n        /* \"#utility.yul\":905:915   */\n      gt\n        /* \"#utility.yul\":902:938   */\n      iszero\n      tag_244\n      jumpi\n        /* \"#utility.yul\":918:936   */\n      tag_244\n      tag_229\n      jump\t// in\n    tag_244:\n        /* \"#utility.yul\":993:995   */\n      0x40\n        /* \"#utility.yul\":987:996   */\n      mload\n        /* \"#utility.yul\":961:963   */\n      0x1f\n        /* \"#utility.yul\":1047:1060   */\n      dup4\n      add\n      not(0x1f)\n        /* \"#utility.yul\":1043:1065   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":1067:1069   */\n      0x3f\n        /* \"#utility.yul\":1039:1070   */\n      add\n        /* \"#utility.yul\":1035:1075   */\n      and\n        /* \"#utility.yul\":1023:1076   */\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":1091:1109   */\n      dup3\n      dup3\n      gt\n        /* \"#utility.yul\":1111:1133   */\n      dup2\n      dup4\n      lt\n        /* \"#utility.yul\":1088:1134   */\n      or\n        /* \"#utility.yul\":1085:1157   */\n      iszero\n      tag_246\n      jumpi\n        /* \"#utility.yul\":1137:1155   */\n      tag_246\n      tag_229\n      jump\t// in\n    tag_246:\n        /* \"#utility.yul\":1177:1187   */\n      dup2\n        /* \"#utility.yul\":1173:1175   */\n      0x40\n        /* \"#utility.yul\":1166:1188   */\n      mstore\n        /* \"#utility.yul\":1212:1214   */\n      dup4\n        /* \"#utility.yul\":1204:1210   */\n      dup2\n        /* \"#utility.yul\":1197:1215   */\n      mstore\n        /* \"#utility.yul\":1258:1261   */\n      dup7\n        /* \"#utility.yul\":1251:1255   */\n      0x20\n        /* \"#utility.yul\":1246:1248   */\n      dup6\n        /* \"#utility.yul\":1238:1244   */\n      dup9\n        /* \"#utility.yul\":1234:1249   */\n      add\n        /* \"#utility.yul\":1230:1256   */\n      add\n        /* \"#utility.yul\":1227:1262   */\n      gt\n        /* \"#utility.yul\":1224:1279   */\n      iszero\n      tag_247\n      jumpi\n        /* \"#utility.yul\":1275:1276   */\n      0x00\n        /* \"#utility.yul\":1272:1273   */\n      dup1\n        /* \"#utility.yul\":1265:1277   */\n      revert\n        /* \"#utility.yul\":1224:1279   */\n    tag_247:\n        /* \"#utility.yul\":1339:1341   */\n      dup4\n        /* \"#utility.yul\":1332:1336   */\n      0x20\n        /* \"#utility.yul\":1324:1330   */\n      dup8\n        /* \"#utility.yul\":1320:1337   */\n      add\n        /* \"#utility.yul\":1313:1317   */\n      0x20\n        /* \"#utility.yul\":1305:1311   */\n      dup4\n        /* \"#utility.yul\":1301:1318   */\n      add\n        /* \"#utility.yul\":1288:1342   */\n      calldatacopy\n        /* \"#utility.yul\":1386:1387   */\n      0x00\n        /* \"#utility.yul\":1379:1383   */\n      0x20\n        /* \"#utility.yul\":1374:1376   */\n      dup6\n        /* \"#utility.yul\":1366:1372   */\n      dup4\n        /* \"#utility.yul\":1362:1377   */\n      add\n        /* \"#utility.yul\":1358:1384   */\n      add\n        /* \"#utility.yul\":1351:1388   */\n      mstore\n        /* \"#utility.yul\":1406:1412   */\n      dup1\n        /* \"#utility.yul\":1397:1412   */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":699:1418   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1423:1596   */\n    tag_231:\n        /* \"#utility.yul\":1491:1511   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1540:1571   */\n      dup2\n      and\n        /* \"#utility.yul\":1530:1572   */\n      dup2\n      eq\n        /* \"#utility.yul\":1520:1590   */\n      tag_249\n      jumpi\n        /* \"#utility.yul\":1586:1587   */\n      0x00\n        /* \"#utility.yul\":1583:1584   */\n      dup1\n        /* \"#utility.yul\":1576:1588   */\n      revert\n        /* \"#utility.yul\":1520:1590   */\n    tag_249:\n        /* \"#utility.yul\":1423:1596   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1601:2218   */\n    tag_28:\n        /* \"#utility.yul\":1698:1704   */\n      0x00\n        /* \"#utility.yul\":1706:1712   */\n      dup1\n        /* \"#utility.yul\":1714:1720   */\n      0x00\n        /* \"#utility.yul\":1767:1769   */\n      0x60\n        /* \"#utility.yul\":1755:1764   */\n      dup5\n        /* \"#utility.yul\":1746:1753   */\n      dup7\n        /* \"#utility.yul\":1742:1765   */\n      sub\n        /* \"#utility.yul\":1738:1770   */\n      slt\n        /* \"#utility.yul\":1735:1787   */\n      iszero\n      tag_251\n      jumpi\n        /* \"#utility.yul\":1783:1784   */\n      0x00\n        /* \"#utility.yul\":1780:1781   */\n      dup1\n        /* \"#utility.yul\":1773:1785   */\n      revert\n        /* \"#utility.yul\":1735:1787   */\n    tag_251:\n        /* \"#utility.yul\":1823:1832   */\n      dup4\n        /* \"#utility.yul\":1810:1833   */\n      calldataload\n        /* \"#utility.yul\":1852:1870   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1893:1895   */\n      dup1\n        /* \"#utility.yul\":1885:1891   */\n      dup3\n        /* \"#utility.yul\":1882:1896   */\n      gt\n        /* \"#utility.yul\":1879:1913   */\n      iszero\n      tag_252\n      jumpi\n        /* \"#utility.yul\":1909:1910   */\n      0x00\n        /* \"#utility.yul\":1906:1907   */\n      dup1\n        /* \"#utility.yul\":1899:1911   */\n      revert\n        /* \"#utility.yul\":1879:1913   */\n    tag_252:\n        /* \"#utility.yul\":1932:1982   */\n      tag_253\n        /* \"#utility.yul\":1974:1981   */\n      dup8\n        /* \"#utility.yul\":1965:1971   */\n      dup4\n        /* \"#utility.yul\":1954:1963   */\n      dup9\n        /* \"#utility.yul\":1950:1972   */\n      add\n        /* \"#utility.yul\":1932:1982   */\n      tag_230\n      jump\t// in\n    tag_253:\n        /* \"#utility.yul\":1922:1982   */\n      swap5\n      pop\n        /* \"#utility.yul\":2035:2037   */\n      0x20\n        /* \"#utility.yul\":2024:2033   */\n      dup7\n        /* \"#utility.yul\":2020:2038   */\n      add\n        /* \"#utility.yul\":2007:2039   */\n      calldataload\n        /* \"#utility.yul\":1991:2039   */\n      swap2\n      pop\n        /* \"#utility.yul\":2064:2066   */\n      dup1\n        /* \"#utility.yul\":2054:2062   */\n      dup3\n        /* \"#utility.yul\":2051:2067   */\n      gt\n        /* \"#utility.yul\":2048:2084   */\n      iszero\n      tag_254\n      jumpi\n        /* \"#utility.yul\":2080:2081   */\n      0x00\n        /* \"#utility.yul\":2077:2078   */\n      dup1\n        /* \"#utility.yul\":2070:2082   */\n      revert\n        /* \"#utility.yul\":2048:2084   */\n    tag_254:\n      pop\n        /* \"#utility.yul\":2103:2155   */\n      tag_255\n        /* \"#utility.yul\":2147:2154   */\n      dup7\n        /* \"#utility.yul\":2136:2144   */\n      dup3\n        /* \"#utility.yul\":2125:2134   */\n      dup8\n        /* \"#utility.yul\":2121:2145   */\n      add\n        /* \"#utility.yul\":2103:2155   */\n      tag_230\n      jump\t// in\n    tag_255:\n        /* \"#utility.yul\":2093:2155   */\n      swap3\n      pop\n      pop\n        /* \"#utility.yul\":2174:2212   */\n      tag_256\n        /* \"#utility.yul\":2208:2210   */\n      0x40\n        /* \"#utility.yul\":2197:2206   */\n      dup6\n        /* \"#utility.yul\":2193:2211   */\n      add\n        /* \"#utility.yul\":2174:2212   */\n      tag_231\n      jump\t// in\n    tag_256:\n        /* \"#utility.yul\":2164:2212   */\n      swap1\n      pop\n        /* \"#utility.yul\":1601:2218   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":2223:2477   */\n    tag_32:\n        /* \"#utility.yul\":2291:2297   */\n      0x00\n        /* \"#utility.yul\":2299:2305   */\n      dup1\n        /* \"#utility.yul\":2352:2354   */\n      0x40\n        /* \"#utility.yul\":2340:2349   */\n      dup4\n        /* \"#utility.yul\":2331:2338   */\n      dup6\n        /* \"#utility.yul\":2327:2350   */\n      sub\n        /* \"#utility.yul\":2323:2355   */\n      slt\n        /* \"#utility.yul\":2320:2372   */\n      iszero\n      tag_258\n      jumpi\n        /* \"#utility.yul\":2368:2369   */\n      0x00\n        /* \"#utility.yul\":2365:2366   */\n      dup1\n        /* \"#utility.yul\":2358:2370   */\n      revert\n        /* \"#utility.yul\":2320:2372   */\n    tag_258:\n        /* \"#utility.yul\":2391:2420   */\n      tag_259\n        /* \"#utility.yul\":2410:2419   */\n      dup4\n        /* \"#utility.yul\":2391:2420   */\n      tag_231\n      jump\t// in\n    tag_259:\n        /* \"#utility.yul\":2381:2420   */\n      swap5\n        /* \"#utility.yul\":2467:2469   */\n      0x20\n        /* \"#utility.yul\":2452:2470   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":2439:2471   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":2223:2477   */\n      jump\t// out\n        /* \"#utility.yul\":2856:3184   */\n    tag_42:\n        /* \"#utility.yul\":2933:2939   */\n      0x00\n        /* \"#utility.yul\":2941:2947   */\n      dup1\n        /* \"#utility.yul\":2949:2955   */\n      0x00\n        /* \"#utility.yul\":3002:3004   */\n      0x60\n        /* \"#utility.yul\":2990:2999   */\n      dup5\n        /* \"#utility.yul\":2981:2988   */\n      dup7\n        /* \"#utility.yul\":2977:3000   */\n      sub\n        /* \"#utility.yul\":2973:3005   */\n      slt\n        /* \"#utility.yul\":2970:3022   */\n      iszero\n      tag_263\n      jumpi\n        /* \"#utility.yul\":3018:3019   */\n      0x00\n        /* \"#utility.yul\":3015:3016   */\n      dup1\n        /* \"#utility.yul\":3008:3020   */\n      revert\n        /* \"#utility.yul\":2970:3022   */\n    tag_263:\n        /* \"#utility.yul\":3041:3070   */\n      tag_264\n        /* \"#utility.yul\":3060:3069   */\n      dup5\n        /* \"#utility.yul\":3041:3070   */\n      tag_231\n      jump\t// in\n    tag_264:\n        /* \"#utility.yul\":3031:3070   */\n      swap3\n      pop\n        /* \"#utility.yul\":3089:3127   */\n      tag_265\n        /* \"#utility.yul\":3123:3125   */\n      0x20\n        /* \"#utility.yul\":3112:3121   */\n      dup6\n        /* \"#utility.yul\":3108:3126   */\n      add\n        /* \"#utility.yul\":3089:3127   */\n      tag_231\n      jump\t// in\n    tag_265:\n        /* \"#utility.yul\":3079:3127   */\n      swap2\n      pop\n        /* \"#utility.yul\":3174:3176   */\n      0x40\n        /* \"#utility.yul\":3163:3172   */\n      dup5\n        /* \"#utility.yul\":3159:3177   */\n      add\n        /* \"#utility.yul\":3146:3178   */\n      calldataload\n        /* \"#utility.yul\":3136:3178   */\n      swap1\n      pop\n        /* \"#utility.yul\":2856:3184   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":3378:3564   */\n    tag_58:\n        /* \"#utility.yul\":3437:3443   */\n      0x00\n        /* \"#utility.yul\":3490:3492   */\n      0x20\n        /* \"#utility.yul\":3478:3487   */\n      dup3\n        /* \"#utility.yul\":3469:3476   */\n      dup5\n        /* \"#utility.yul\":3465:3488   */\n      sub\n        /* \"#utility.yul\":3461:3493   */\n      slt\n        /* \"#utility.yul\":3458:3510   */\n      iszero\n      tag_268\n      jumpi\n        /* \"#utility.yul\":3506:3507   */\n      0x00\n        /* \"#utility.yul\":3503:3504   */\n      dup1\n        /* \"#utility.yul\":3496:3508   */\n      revert\n        /* \"#utility.yul\":3458:3510   */\n    tag_268:\n        /* \"#utility.yul\":3529:3558   */\n      tag_269\n        /* \"#utility.yul\":3548:3557   */\n      dup3\n        /* \"#utility.yul\":3529:3558   */\n      tag_231\n      jump\t// in\n    tag_269:\n        /* \"#utility.yul\":3519:3558   */\n      swap4\n        /* \"#utility.yul\":3378:3564   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3777:4037   */\n    tag_80:\n        /* \"#utility.yul\":3845:3851   */\n      0x00\n        /* \"#utility.yul\":3853:3859   */\n      dup1\n        /* \"#utility.yul\":3906:3908   */\n      0x40\n        /* \"#utility.yul\":3894:3903   */\n      dup4\n        /* \"#utility.yul\":3885:3892   */\n      dup6\n        /* \"#utility.yul\":3881:3904   */\n      sub\n        /* \"#utility.yul\":3877:3909   */\n      slt\n        /* \"#utility.yul\":3874:3926   */\n      iszero\n      tag_272\n      jumpi\n        /* \"#utility.yul\":3922:3923   */\n      0x00\n        /* \"#utility.yul\":3919:3920   */\n      dup1\n        /* \"#utility.yul\":3912:3924   */\n      revert\n        /* \"#utility.yul\":3874:3926   */\n    tag_272:\n        /* \"#utility.yul\":3945:3974   */\n      tag_273\n        /* \"#utility.yul\":3964:3973   */\n      dup4\n        /* \"#utility.yul\":3945:3974   */\n      tag_231\n      jump\t// in\n    tag_273:\n        /* \"#utility.yul\":3935:3974   */\n      swap2\n      pop\n        /* \"#utility.yul\":3993:4031   */\n      tag_274\n        /* \"#utility.yul\":4027:4029   */\n      0x20\n        /* \"#utility.yul\":4016:4025   */\n      dup5\n        /* \"#utility.yul\":4012:4030   */\n      add\n        /* \"#utility.yul\":3993:4031   */\n      tag_231\n      jump\t// in\n    tag_274:\n        /* \"#utility.yul\":3983:4031   */\n      swap1\n      pop\n        /* \"#utility.yul\":3777:4037   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4042:4422   */\n    tag_88:\n        /* \"#utility.yul\":4121:4122   */\n      0x01\n        /* \"#utility.yul\":4117:4129   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":4164:4176   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":4185:4246   */\n      tag_276\n      jumpi\n        /* \"#utility.yul\":4239:4243   */\n      0x7f\n        /* \"#utility.yul\":4231:4237   */\n      dup3\n        /* \"#utility.yul\":4227:4244   */\n      and\n        /* \"#utility.yul\":4217:4244   */\n      swap2\n      pop\n        /* \"#utility.yul\":4185:4246   */\n    tag_276:\n        /* \"#utility.yul\":4292:4294   */\n      0x20\n        /* \"#utility.yul\":4284:4290   */\n      dup3\n        /* \"#utility.yul\":4281:4295   */\n      lt\n        /* \"#utility.yul\":4261:4279   */\n      dup2\n        /* \"#utility.yul\":4258:4296   */\n      sub\n        /* \"#utility.yul\":4255:4416   */\n      tag_277\n      jumpi\n        /* \"#utility.yul\":4338:4348   */\n      0x4e487b71\n        /* \"#utility.yul\":4333:4336   */\n      0xe0\n        /* \"#utility.yul\":4329:4349   */\n      shl\n        /* \"#utility.yul\":4326:4327   */\n      0x00\n        /* \"#utility.yul\":4319:4350   */\n      mstore\n        /* \"#utility.yul\":4373:4377   */\n      0x22\n        /* \"#utility.yul\":4370:4371   */\n      0x04\n        /* \"#utility.yul\":4363:4378   */\n      mstore\n        /* \"#utility.yul\":4401:4405   */\n      0x24\n        /* \"#utility.yul\":4398:4399   */\n      0x00\n        /* \"#utility.yul\":4391:4406   */\n      revert\n        /* \"#utility.yul\":4255:4416   */\n    tag_277:\n      pop\n        /* \"#utility.yul\":4042:4422   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5041:5263   */\n    tag_129:\n        /* \"#utility.yul\":5106:5115   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":5127:5137   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":5124:5257   */\n      iszero\n      tag_111\n      jumpi\n        /* \"#utility.yul\":5179:5189   */\n      0x4e487b71\n        /* \"#utility.yul\":5174:5177   */\n      0xe0\n        /* \"#utility.yul\":5170:5190   */\n      shl\n        /* \"#utility.yul\":5167:5168   */\n      0x00\n        /* \"#utility.yul\":5160:5191   */\n      mstore\n        /* \"#utility.yul\":5214:5218   */\n      0x11\n        /* \"#utility.yul\":5211:5212   */\n      0x04\n        /* \"#utility.yul\":5204:5219   */\n      mstore\n        /* \"#utility.yul\":5242:5246   */\n      0x24\n        /* \"#utility.yul\":5239:5240   */\n      0x00\n        /* \"#utility.yul\":5232:5247   */\n      revert\n        /* \"#utility.yul\":6081:6488   */\n    tag_170:\n        /* \"#utility.yul\":6283:6285   */\n      0x20\n        /* \"#utility.yul\":6265:6286   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6322:6324   */\n      0x2b\n        /* \"#utility.yul\":6302:6320   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":6295:6325   */\n      mstore\n        /* \"#utility.yul\":6361:6395   */\n      0x496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069\n        /* \"#utility.yul\":6356:6358   */\n      0x40\n        /* \"#utility.yul\":6341:6359   */\n      dup3\n      add\n        /* \"#utility.yul\":6334:6396   */\n      mstore\n      shl(0xa8, 0x6e697469616c697a696e67)\n        /* \"#utility.yul\":6427:6429   */\n      0x60\n        /* \"#utility.yul\":6412:6430   */\n      dup3\n      add\n        /* \"#utility.yul\":6405:6446   */\n      mstore\n        /* \"#utility.yul\":6478:6481   */\n      0x80\n        /* \"#utility.yul\":6463:6482   */\n      add\n      swap1\n        /* \"#utility.yul\":6081:6488   */\n      jump\t// out\n        /* \"#utility.yul\":9723:10268   */\n    tag_233:\n        /* \"#utility.yul\":9825:9827   */\n      0x1f\n        /* \"#utility.yul\":9820:9823   */\n      dup3\n        /* \"#utility.yul\":9817:9828   */\n      gt\n        /* \"#utility.yul\":9814:10262   */\n      iszero\n      tag_226\n      jumpi\n        /* \"#utility.yul\":9861:9862   */\n      0x00\n        /* \"#utility.yul\":9886:9891   */\n      dup2\n        /* \"#utility.yul\":9882:9884   */\n      dup2\n        /* \"#utility.yul\":9875:9892   */\n      mstore\n        /* \"#utility.yul\":9931:9935   */\n      0x20\n        /* \"#utility.yul\":9927:9929   */\n      dup2\n        /* \"#utility.yul\":9917:9936   */\n      keccak256\n        /* \"#utility.yul\":10001:10003   */\n      0x1f\n        /* \"#utility.yul\":9989:9999   */\n      dup6\n        /* \"#utility.yul\":9985:10004   */\n      add\n        /* \"#utility.yul\":9982:9983   */\n      0x05\n        /* \"#utility.yul\":9978:10005   */\n      shr\n        /* \"#utility.yul\":9972:9976   */\n      dup2\n        /* \"#utility.yul\":9968:10006   */\n      add\n        /* \"#utility.yul\":10037:10041   */\n      0x20\n        /* \"#utility.yul\":10025:10035   */\n      dup7\n        /* \"#utility.yul\":10022:10042   */\n      lt\n        /* \"#utility.yul\":10019:10066   */\n      iszero\n      tag_296\n      jumpi\n      pop\n        /* \"#utility.yul\":10060:10064   */\n      dup1\n        /* \"#utility.yul\":10019:10066   */\n    tag_296:\n        /* \"#utility.yul\":10115:10117   */\n      0x1f\n        /* \"#utility.yul\":10110:10113   */\n      dup6\n        /* \"#utility.yul\":10106:10118   */\n      add\n        /* \"#utility.yul\":10103:10104   */\n      0x05\n        /* \"#utility.yul\":10099:10119   */\n      shr\n        /* \"#utility.yul\":10093:10097   */\n      dup3\n        /* \"#utility.yul\":10089:10120   */\n      add\n        /* \"#utility.yul\":10079:10120   */\n      swap2\n      pop\n        /* \"#utility.yul\":10170:10252   */\n    tag_297:\n        /* \"#utility.yul\":10188:10190   */\n      dup2\n        /* \"#utility.yul\":10181:10186   */\n      dup2\n        /* \"#utility.yul\":10178:10191   */\n      lt\n        /* \"#utility.yul\":10170:10252   */\n      iszero\n      tag_299\n      jumpi\n        /* \"#utility.yul\":10233:10250   */\n      dup3\n      dup2\n      sstore\n        /* \"#utility.yul\":10214:10215   */\n      0x01\n        /* \"#utility.yul\":10203:10216   */\n      add\n        /* \"#utility.yul\":10170:10252   */\n      jump(tag_297)\n    tag_299:\n        /* \"#utility.yul\":10174:10177   */\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":9723:10268   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10444:11796   */\n    tag_225:\n        /* \"#utility.yul\":10570:10573   */\n      dup2\n        /* \"#utility.yul\":10564:10574   */\n      mload\n        /* \"#utility.yul\":10597:10615   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":10589:10595   */\n      dup2\n        /* \"#utility.yul\":10586:10616   */\n      gt\n        /* \"#utility.yul\":10583:10639   */\n      iszero\n      tag_303\n      jumpi\n        /* \"#utility.yul\":10619:10637   */\n      tag_303\n      tag_229\n      jump\t// in\n    tag_303:\n        /* \"#utility.yul\":10648:10745   */\n      tag_304\n        /* \"#utility.yul\":10738:10744   */\n      dup2\n        /* \"#utility.yul\":10698:10736   */\n      tag_305\n        /* \"#utility.yul\":10730:10734   */\n      dup5\n        /* \"#utility.yul\":10724:10735   */\n      sload\n        /* \"#utility.yul\":10698:10736   */\n      tag_88\n      jump\t// in\n    tag_305:\n        /* \"#utility.yul\":10692:10696   */\n      dup5\n        /* \"#utility.yul\":10648:10745   */\n      tag_233\n      jump\t// in\n    tag_304:\n        /* \"#utility.yul\":10800:10804   */\n      0x20\n      dup1\n        /* \"#utility.yul\":10864:10866   */\n      0x1f\n        /* \"#utility.yul\":10853:10867   */\n      dup4\n      gt\n        /* \"#utility.yul\":10881:10882   */\n      0x01\n        /* \"#utility.yul\":10876:11539   */\n      dup2\n      eq\n      tag_307\n      jumpi\n        /* \"#utility.yul\":11583:11584   */\n      0x00\n        /* \"#utility.yul\":11600:11606   */\n      dup5\n        /* \"#utility.yul\":11597:11686   */\n      iszero\n      tag_308\n      jumpi\n      pop\n        /* \"#utility.yul\":11652:11671   */\n      dup6\n      dup4\n      add\n        /* \"#utility.yul\":11646:11672   */\n      mload\n        /* \"#utility.yul\":11597:11686   */\n    tag_308:\n      not(0x00)\n        /* \"#utility.yul\":10401:10402   */\n      0x03\n        /* \"#utility.yul\":10397:10408   */\n      dup7\n      swap1\n      shl\n        /* \"#utility.yul\":10393:10417   */\n      shr\n        /* \"#utility.yul\":10389:10418   */\n      not\n        /* \"#utility.yul\":10379:10419   */\n      and\n        /* \"#utility.yul\":10425:10426   */\n      0x01\n        /* \"#utility.yul\":10421:10432   */\n      dup6\n      swap1\n      shl\n        /* \"#utility.yul\":10376:10433   */\n      or\n        /* \"#utility.yul\":11699:11780   */\n      dup6\n      sstore\n        /* \"#utility.yul\":10846:11790   */\n      jump(tag_299)\n        /* \"#utility.yul\":10876:11539   */\n    tag_307:\n        /* \"#utility.yul\":9670:9671   */\n      0x00\n        /* \"#utility.yul\":9663:9677   */\n      dup6\n      dup2\n      mstore\n        /* \"#utility.yul\":9707:9711   */\n      0x20\n        /* \"#utility.yul\":9694:9712   */\n      dup2\n      keccak256\n      not(0x1f)\n        /* \"#utility.yul\":10912:10932   */\n      dup7\n      and\n      swap2\n        /* \"#utility.yul\":11030:11266   */\n    tag_311:\n        /* \"#utility.yul\":11044:11051   */\n      dup3\n        /* \"#utility.yul\":11041:11042   */\n      dup2\n        /* \"#utility.yul\":11038:11052   */\n      lt\n        /* \"#utility.yul\":11030:11266   */\n      iszero\n      tag_313\n      jumpi\n        /* \"#utility.yul\":11133:11152   */\n      dup9\n      dup7\n      add\n        /* \"#utility.yul\":11127:11153   */\n      mload\n        /* \"#utility.yul\":11112:11154   */\n      dup3\n      sstore\n        /* \"#utility.yul\":11225:11252   */\n      swap5\n      dup5\n      add\n      swap5\n        /* \"#utility.yul\":11193:11194   */\n      0x01\n        /* \"#utility.yul\":11181:11195   */\n      swap1\n      swap2\n      add\n      swap1\n        /* \"#utility.yul\":11060:11079   */\n      dup5\n      add\n        /* \"#utility.yul\":11030:11266   */\n      jump(tag_311)\n    tag_313:\n        /* \"#utility.yul\":11034:11037   */\n      pop\n        /* \"#utility.yul\":11294:11300   */\n      dup6\n        /* \"#utility.yul\":11285:11292   */\n      dup3\n        /* \"#utility.yul\":11282:11301   */\n      lt\n        /* \"#utility.yul\":11279:11480   */\n      iszero\n      tag_314\n      jumpi\n        /* \"#utility.yul\":11355:11374   */\n      dup8\n      dup6\n      add\n        /* \"#utility.yul\":11349:11375   */\n      mload\n      not(0x00)\n        /* \"#utility.yul\":11438:11439   */\n      0x03\n        /* \"#utility.yul\":11434:11448   */\n      dup9\n      swap1\n      shl\n        /* \"#utility.yul\":11450:11453   */\n      0xf8\n        /* \"#utility.yul\":11430:11454   */\n      and\n        /* \"#utility.yul\":11426:11463   */\n      shr\n        /* \"#utility.yul\":11422:11464   */\n      not\n        /* \"#utility.yul\":11407:11465   */\n      and\n        /* \"#utility.yul\":11392:11466   */\n      dup2\n      sstore\n        /* \"#utility.yul\":11279:11480   */\n    tag_314:\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":11526:11527   */\n      0x01\n        /* \"#utility.yul\":11510:11524   */\n      swap1\n      dup2\n      shl\n        /* \"#utility.yul\":11506:11528   */\n      add\n        /* \"#utility.yul\":11493:11529   */\n      swap1\n      sstore\n      pop\n        /* \"#utility.yul\":10444:11796   */\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220a63d0f73f4511eea4a1e98fdde47555bd40c8bafbdc61032767e8255cba8bbe864736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610f1d806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d714610209578063a9059cbb1461021c578063dd62ed3e1461022f578063f2fde38b1461024257600080fd5b806370a08231146101b5578063715018a6146101de5780638da5cb5b146101e657806395d89b411461020157600080fd5b806323b872dd116100d357806323b872dd1461016d578063313ce56714610180578063395093511461018f57806340c10f19146101a257600080fd5b806306fdde0314610105578063077f224a14610123578063095ea7b31461013857806318160ddd1461015b575b600080fd5b61010d610255565b60405161011a9190610af7565b60405180910390f35b610136610131366004610c04565b6102e7565b005b61014b610146366004610c78565b61040b565b604051901515815260200161011a565b6067545b60405190815260200161011a565b61014b61017b366004610ca2565b610425565b6040516012815260200161011a565b61014b61019d366004610c78565b610449565b6101366101b0366004610c78565b61046b565b61015f6101c3366004610cde565b6001600160a01b031660009081526065602052604090205490565b610136610481565b6033546040516001600160a01b03909116815260200161011a565b61010d610495565b61014b610217366004610c78565b6104a4565b61014b61022a366004610c78565b61051f565b61015f61023d366004610d00565b61052d565b610136610250366004610cde565b610558565b60606068805461026490610d33565b80601f016020809104026020016040519081016040528092919081815260200182805461029090610d33565b80156102dd5780601f106102b2576101008083540402835291602001916102dd565b820191906000526020600020905b8154815290600101906020018083116102c057829003601f168201915b5050505050905090565b600054610100900460ff16158080156103075750600054600160ff909116105b806103215750303b158015610321575060005460ff166001145b6103895760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156103ac576000805461ff0019166101001790555b6103b684846105d1565b6103bf82610602565b8015610405576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b600033610419818585610654565b60019150505b92915050565b600033610433858285610778565b61043e8585856107ec565b506001949350505050565b60003361041981858561045c838361052d565b6104669190610d6d565b610654565b610473610997565b61047d82826109f1565b5050565b610489610997565b6104936000610602565b565b60606069805461026490610d33565b600033816104b2828661052d565b9050838110156105125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610380565b61043e8286868403610654565b6000336104198185856107ec565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b610560610997565b6001600160a01b0381166105c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610380565b6105ce81610602565b50565b600054610100900460ff166105f85760405162461bcd60e51b815260040161038090610d8e565b61047d8282610ab2565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0383166106b65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610380565b6001600160a01b0382166107175760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610380565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610784848461052d565b9050600019811461040557818110156107df5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610380565b6104058484848403610654565b6001600160a01b0383166108505760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610380565b6001600160a01b0382166108b25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610380565b6001600160a01b0383166000908152606560205260409020548181101561092a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610380565b6001600160a01b0380851660008181526065602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061098a9086815260200190565b60405180910390a3610405565b6033546001600160a01b031633146104935760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610380565b6001600160a01b038216610a475760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610380565b8060676000828254610a599190610d6d565b90915550506001600160a01b0382166000818152606560209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600054610100900460ff16610ad95760405162461bcd60e51b815260040161038090610d8e565b6068610ae58382610e27565b506069610af28282610e27565b505050565b600060208083528351808285015260005b81811015610b2457858101830151858201604001528201610b08565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610b6c57600080fd5b813567ffffffffffffffff80821115610b8757610b87610b45565b604051601f8301601f19908116603f01168101908282118183101715610baf57610baf610b45565b81604052838152866020858801011115610bc857600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b0381168114610bff57600080fd5b919050565b600080600060608486031215610c1957600080fd5b833567ffffffffffffffff80821115610c3157600080fd5b610c3d87838801610b5b565b94506020860135915080821115610c5357600080fd5b50610c6086828701610b5b565b925050610c6f60408501610be8565b90509250925092565b60008060408385031215610c8b57600080fd5b610c9483610be8565b946020939093013593505050565b600080600060608486031215610cb757600080fd5b610cc084610be8565b9250610cce60208501610be8565b9150604084013590509250925092565b600060208284031215610cf057600080fd5b610cf982610be8565b9392505050565b60008060408385031215610d1357600080fd5b610d1c83610be8565b9150610d2a60208401610be8565b90509250929050565b600181811c90821680610d4757607f821691505b602082108103610d6757634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561041f57634e487b7160e01b600052601160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b601f821115610af257600081815260208120601f850160051c81016020861015610e005750805b601f850160051c820191505b81811015610e1f57828155600101610e0c565b505050505050565b815167ffffffffffffffff811115610e4157610e41610b45565b610e5581610e4f8454610d33565b84610dd9565b602080601f831160018114610e8a5760008415610e725750858301515b600019600386901b1c1916600185901b178555610e1f565b600085815260208120601f198616915b82811015610eb957888601518255948401946001909101908401610e9a565b5085821015610ed75787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220a63d0f73f4511eea4a1e98fdde47555bd40c8bafbdc61032767e8255cba8bbe864736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF1D DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x242 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x180 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x77F224A EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x15B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x255 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0xAF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x136 PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0xC04 JUMP JUMPDEST PUSH2 0x2E7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14B PUSH2 0x146 CALLDATASIZE PUSH1 0x4 PUSH2 0xC78 JUMP JUMPDEST PUSH2 0x40B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x11A JUMP JUMPDEST PUSH1 0x67 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x11A JUMP JUMPDEST PUSH2 0x14B PUSH2 0x17B CALLDATASIZE PUSH1 0x4 PUSH2 0xCA2 JUMP JUMPDEST PUSH2 0x425 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x11A JUMP JUMPDEST PUSH2 0x14B PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0xC78 JUMP JUMPDEST PUSH2 0x449 JUMP JUMPDEST PUSH2 0x136 PUSH2 0x1B0 CALLDATASIZE PUSH1 0x4 PUSH2 0xC78 JUMP JUMPDEST PUSH2 0x46B JUMP JUMPDEST PUSH2 0x15F PUSH2 0x1C3 CALLDATASIZE PUSH1 0x4 PUSH2 0xCDE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x136 PUSH2 0x481 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x11A JUMP JUMPDEST PUSH2 0x10D PUSH2 0x495 JUMP JUMPDEST PUSH2 0x14B PUSH2 0x217 CALLDATASIZE PUSH1 0x4 PUSH2 0xC78 JUMP JUMPDEST PUSH2 0x4A4 JUMP JUMPDEST PUSH2 0x14B PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0xC78 JUMP JUMPDEST PUSH2 0x51F JUMP JUMPDEST PUSH2 0x15F PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0xD00 JUMP JUMPDEST PUSH2 0x52D JUMP JUMPDEST PUSH2 0x136 PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0xCDE JUMP JUMPDEST PUSH2 0x558 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x68 DUP1 SLOAD PUSH2 0x264 SWAP1 PUSH2 0xD33 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x290 SWAP1 PUSH2 0xD33 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2DD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2B2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2DD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2C0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x307 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x321 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x321 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x389 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x3AC JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x3B6 DUP5 DUP5 PUSH2 0x5D1 JUMP JUMPDEST PUSH2 0x3BF DUP3 PUSH2 0x602 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x405 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x419 DUP2 DUP6 DUP6 PUSH2 0x654 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x433 DUP6 DUP3 DUP6 PUSH2 0x778 JUMP JUMPDEST PUSH2 0x43E DUP6 DUP6 DUP6 PUSH2 0x7EC JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x419 DUP2 DUP6 DUP6 PUSH2 0x45C DUP4 DUP4 PUSH2 0x52D JUMP JUMPDEST PUSH2 0x466 SWAP2 SWAP1 PUSH2 0xD6D JUMP JUMPDEST PUSH2 0x654 JUMP JUMPDEST PUSH2 0x473 PUSH2 0x997 JUMP JUMPDEST PUSH2 0x47D DUP3 DUP3 PUSH2 0x9F1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x489 PUSH2 0x997 JUMP JUMPDEST PUSH2 0x493 PUSH1 0x0 PUSH2 0x602 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x69 DUP1 SLOAD PUSH2 0x264 SWAP1 PUSH2 0xD33 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x4B2 DUP3 DUP7 PUSH2 0x52D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x512 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x380 JUMP JUMPDEST PUSH2 0x43E DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x654 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x419 DUP2 DUP6 DUP6 PUSH2 0x7EC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x560 PUSH2 0x997 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x380 JUMP JUMPDEST PUSH2 0x5CE DUP2 PUSH2 0x602 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x5F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x380 SWAP1 PUSH2 0xD8E JUMP JUMPDEST PUSH2 0x47D DUP3 DUP3 PUSH2 0xAB2 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x6B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x380 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x717 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x380 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x784 DUP5 DUP5 PUSH2 0x52D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x405 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x380 JUMP JUMPDEST PUSH2 0x405 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x654 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x850 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x380 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x8B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x380 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x92A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x380 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x98A SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x405 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x493 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x380 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xA47 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x380 JUMP JUMPDEST DUP1 PUSH1 0x67 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xA59 SWAP2 SWAP1 PUSH2 0xD6D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xAD9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x380 SWAP1 PUSH2 0xD8E JUMP JUMPDEST PUSH1 0x68 PUSH2 0xAE5 DUP4 DUP3 PUSH2 0xE27 JUMP JUMPDEST POP PUSH1 0x69 PUSH2 0xAF2 DUP3 DUP3 PUSH2 0xE27 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB24 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0xB08 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB87 JUMPI PUSH2 0xB87 PUSH2 0xB45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xBAF JUMPI PUSH2 0xBAF PUSH2 0xB45 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0xBC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xBFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xC31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC3D DUP8 DUP4 DUP9 ADD PUSH2 0xB5B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xC53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC60 DUP7 DUP3 DUP8 ADD PUSH2 0xB5B JUMP JUMPDEST SWAP3 POP POP PUSH2 0xC6F PUSH1 0x40 DUP6 ADD PUSH2 0xBE8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC94 DUP4 PUSH2 0xBE8 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xCB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCC0 DUP5 PUSH2 0xBE8 JUMP JUMPDEST SWAP3 POP PUSH2 0xCCE PUSH1 0x20 DUP6 ADD PUSH2 0xBE8 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCF9 DUP3 PUSH2 0xBE8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD1C DUP4 PUSH2 0xBE8 JUMP JUMPDEST SWAP2 POP PUSH2 0xD2A PUSH1 0x20 DUP5 ADD PUSH2 0xBE8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xD47 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xD67 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x41F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xAF2 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0xE00 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xE1F JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xE0C JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE41 JUMPI PUSH2 0xE41 PUSH2 0xB45 JUMP JUMPDEST PUSH2 0xE55 DUP2 PUSH2 0xE4F DUP5 SLOAD PUSH2 0xD33 JUMP JUMPDEST DUP5 PUSH2 0xDD9 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0xE8A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0xE72 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0xE1F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xEB9 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0xE9A JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0xED7 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA6 RETURNDATASIZE 0xF PUSH20 0xF4511EEA4A1E98FDDE47555BD40C8BAFBDC61032 PUSH23 0x7E8255CBA8BBE864736F6C634300081300330000000000 ",
							"sourceMap": "244:400:8:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@__ERC20_init_347": {
									"entryPoint": 1489,
									"id": 347,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@__ERC20_init_unchained_365": {
									"entryPoint": 2738,
									"id": 365,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_afterTokenTransfer_906": {
									"entryPoint": null,
									"id": 906,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_841": {
									"entryPoint": 1620,
									"id": 841,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_895": {
									"entryPoint": null,
									"id": 895,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_checkOwner_68": {
									"entryPoint": 2455,
									"id": 68,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_mint_724": {
									"entryPoint": 2545,
									"id": 724,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_1372": {
									"entryPoint": null,
									"id": 1372,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_884": {
									"entryPoint": 1912,
									"id": 884,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transferOwnership_125": {
									"entryPoint": 1538,
									"id": 125,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_667": {
									"entryPoint": 2028,
									"id": 667,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_462": {
									"entryPoint": 1325,
									"id": 462,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_487": {
									"entryPoint": 1035,
									"id": 487,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_419": {
									"entryPoint": null,
									"id": 419,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_395": {
									"entryPoint": null,
									"id": 395,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_590": {
									"entryPoint": 1188,
									"id": 590,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_549": {
									"entryPoint": 1097,
									"id": 549,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@initialize_1438": {
									"entryPoint": 743,
									"id": 1438,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@isContract_1033": {
									"entryPoint": null,
									"id": 1033,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@mint_1453": {
									"entryPoint": 1131,
									"id": 1453,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@name_375": {
									"entryPoint": 597,
									"id": 375,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@owner_54": {
									"entryPoint": null,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_82": {
									"entryPoint": 1153,
									"id": 82,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@symbol_385": {
									"entryPoint": 1173,
									"id": 385,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_405": {
									"entryPoint": null,
									"id": 405,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_520": {
									"entryPoint": 1061,
									"id": 520,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transferOwnership_105": {
									"entryPoint": 1368,
									"id": 105,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transfer_444": {
									"entryPoint": 1311,
									"id": 444,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 3048,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_string": {
									"entryPoint": 2907,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3294,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 3328,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 3234,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 3192,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_address": {
									"entryPoint": 3076,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2807,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3470,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3437,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 3545,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 3623,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 3379,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 2885,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:11798:9",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:9",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "135:427:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "145:12:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "155:2:9",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "149:2:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "173:9:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "184:2:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:21:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "196:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "216:6:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "210:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "210:13:9"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "200:6:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "243:9:9"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "254:2:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "239:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "239:18:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "259:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "232:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "232:34:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "275:10:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "284:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "279:1:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "344:90:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "373:9:9"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "384:1:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "369:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "369:17:9"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "388:2:9",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "365:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "365:26:9"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "407:6:9"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "415:1:9"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "403:3:9"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "403:14:9"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "419:2:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "399:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "399:23:9"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "393:5:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "393:30:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "358:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "358:66:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "358:66:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "305:1:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "308:6:9"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "302:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "302:13:9"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "316:19:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "318:15:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "327:1:9"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "330:2:9"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "323:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "323:10:9"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "318:1:9"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "298:3:9",
																"statements": []
															},
															"src": "294:140:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "458:9:9"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "469:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "454:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "454:22:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "478:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "450:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "450:31:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "483:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "443:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "443:42:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "443:42:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "494:62:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "510:9:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "529:6:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "537:2:9",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "525:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "525:15:9"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "546:2:9",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "542:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "542:7:9"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "521:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "521:29:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "506:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "506:45:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "553:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "502:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "502:54:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "494:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "104:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "115:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "126:4:9",
														"type": ""
													}
												],
												"src": "14:548:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "599:95:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "616:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "623:3:9",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "628:10:9",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "619:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "619:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "609:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "609:31:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "609:31:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "656:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "659:4:9",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "649:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "649:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "649:15:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "680:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "683:4:9",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "673:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "673:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "673:15:9"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "567:127:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "752:666:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "801:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "810:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "813:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "803:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "803:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "803:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "780:6:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "788:4:9",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "776:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "776:17:9"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "795:3:9"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "772:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "772:27:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "765:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "765:35:9"
															},
															"nodeType": "YulIf",
															"src": "762:55:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "826:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "849:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "836:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "836:20:9"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "830:2:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "865:28:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "875:18:9",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "869:2:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "916:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "918:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "918:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "918:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "908:2:9"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "912:2:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "905:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "905:10:9"
															},
															"nodeType": "YulIf",
															"src": "902:36:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "947:17:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "961:2:9",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "957:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "957:7:9"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "951:2:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "973:23:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "993:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "987:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "987:9:9"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "977:6:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1005:71:9",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "1027:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "1051:2:9"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1055:4:9",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "1047:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1047:13:9"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "1062:2:9"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "1043:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1043:22:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1067:2:9",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1039:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1039:31:9"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "1072:2:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1035:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1035:40:9"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1023:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1023:53:9"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "1009:10:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1135:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1137:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1137:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1137:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1094:10:9"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "1106:2:9"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "1091:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1091:18:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1114:10:9"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "1126:6:9"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1111:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1111:22:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "1088:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1088:46:9"
															},
															"nodeType": "YulIf",
															"src": "1085:72:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1173:2:9",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "1177:10:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1166:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1166:22:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1166:22:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "1204:6:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1212:2:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1197:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1197:18:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1197:18:9"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1263:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1272:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1275:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1265:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1265:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1265:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1238:6:9"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "1246:2:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1234:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1234:15:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1251:4:9",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1230:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1230:26:9"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "1258:3:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1227:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1227:35:9"
															},
															"nodeType": "YulIf",
															"src": "1224:55:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "1305:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1313:4:9",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1301:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1301:17:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1324:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1332:4:9",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1320:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1320:17:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1339:2:9"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "1288:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1288:54:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1288:54:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "1366:6:9"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "1374:2:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1362:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1362:15:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1379:4:9",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1358:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1358:26:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1386:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1351:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1351:37:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1351:37:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1397:15:9",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1406:6:9"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "1397:5:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "726:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "734:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "742:5:9",
														"type": ""
													}
												],
												"src": "699:719:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1472:124:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1482:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1504:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1491:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1491:20:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1482:5:9"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1574:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1583:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1586:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1576:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1576:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1576:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1533:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1544:5:9"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1559:3:9",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1564:1:9",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1555:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1555:11:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1568:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "1551:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1551:19:9"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1540:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1540:31:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1530:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1530:42:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1523:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1523:50:9"
															},
															"nodeType": "YulIf",
															"src": "1520:70:9"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1451:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1462:5:9",
														"type": ""
													}
												],
												"src": "1423:173:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1725:493:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1771:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1780:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1783:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1773:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1773:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1773:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1746:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1755:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1742:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1742:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1767:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1738:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1738:32:9"
															},
															"nodeType": "YulIf",
															"src": "1735:52:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1796:37:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1823:9:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1810:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1810:23:9"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1800:6:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1842:28:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1852:18:9",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1846:2:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1897:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1906:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1909:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1899:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1899:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1899:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1885:6:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1893:2:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1882:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1882:14:9"
															},
															"nodeType": "YulIf",
															"src": "1879:34:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1922:60:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1954:9:9"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1965:6:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1950:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1950:22:9"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1974:7:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string",
																	"nodeType": "YulIdentifier",
																	"src": "1932:17:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1932:50:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1922:6:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1991:48:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2024:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2035:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2020:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2020:18:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2007:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2007:32:9"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1995:8:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2068:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2077:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2080:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2070:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2070:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2070:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "2054:8:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2064:2:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2051:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2051:16:9"
															},
															"nodeType": "YulIf",
															"src": "2048:36:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2093:62:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2125:9:9"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "2136:8:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2121:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2121:24:9"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2147:7:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string",
																	"nodeType": "YulIdentifier",
																	"src": "2103:17:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2103:52:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2093:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2164:48:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2197:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2208:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2193:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2193:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2174:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2174:38:9"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2164:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1675:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1686:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1698:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1706:6:9",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1714:6:9",
														"type": ""
													}
												],
												"src": "1601:617:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2310:167:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2356:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2365:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2368:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2358:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2358:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2358:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2331:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2340:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2327:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2327:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2352:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2323:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2323:32:9"
															},
															"nodeType": "YulIf",
															"src": "2320:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2381:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2410:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2391:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2391:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2381:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2429:42:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2456:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2467:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2452:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2452:18:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2439:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2439:32:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2429:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2268:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2279:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2291:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2299:6:9",
														"type": ""
													}
												],
												"src": "2223:254:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2577:92:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2587:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2599:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2610:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2595:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2595:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2587:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2629:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "2654:6:9"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2647:6:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2647:14:9"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2640:6:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2640:22:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2622:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2622:41:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2622:41:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2546:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2557:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2568:4:9",
														"type": ""
													}
												],
												"src": "2482:187:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2775:76:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2785:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2797:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2808:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2793:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2793:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2785:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2827:9:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2838:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2820:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2820:25:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2820:25:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2744:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2755:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2766:4:9",
														"type": ""
													}
												],
												"src": "2674:177:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2960:224:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3006:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3015:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3018:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3008:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3008:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3008:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2981:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2990:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2977:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2977:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3002:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2973:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2973:32:9"
															},
															"nodeType": "YulIf",
															"src": "2970:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3031:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3060:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3041:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3041:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3031:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3079:48:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3112:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3123:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3108:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3108:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3089:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3089:38:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3079:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3136:42:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3163:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3174:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3159:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3159:18:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3146:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3146:32:9"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "3136:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2910:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2921:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2933:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2941:6:9",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2949:6:9",
														"type": ""
													}
												],
												"src": "2856:328:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3286:87:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3296:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3308:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3319:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3304:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3304:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3296:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3338:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3353:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3361:4:9",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3349:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3349:17:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3331:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3331:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3331:36:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3255:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3266:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3277:4:9",
														"type": ""
													}
												],
												"src": "3189:184:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3448:116:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3494:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3503:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3506:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3496:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3496:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3496:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3469:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3478:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3465:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3465:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3490:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3461:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3461:32:9"
															},
															"nodeType": "YulIf",
															"src": "3458:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3519:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3548:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3529:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3529:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3519:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3414:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3425:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3437:6:9",
														"type": ""
													}
												],
												"src": "3378:186:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3670:102:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3680:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3692:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3703:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3688:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3688:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3680:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3722:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3737:6:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3753:3:9",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3758:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3749:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3749:11:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3762:1:9",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3745:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3745:19:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3733:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3733:32:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3715:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3715:51:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3715:51:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3639:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3650:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3661:4:9",
														"type": ""
													}
												],
												"src": "3569:203:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3864:173:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3910:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3919:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3922:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3912:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3912:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3912:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3885:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3894:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3881:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3881:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3906:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3877:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3877:32:9"
															},
															"nodeType": "YulIf",
															"src": "3874:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3935:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3964:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3945:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3945:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3935:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3983:48:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4016:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4027:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4012:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4012:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3993:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3993:38:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3983:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3822:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3833:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3845:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3853:6:9",
														"type": ""
													}
												],
												"src": "3777:260:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4097:325:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4107:22:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4121:1:9",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4124:4:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4117:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4117:12:9"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "4107:6:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4138:38:9",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4168:4:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4174:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4164:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4164:12:9"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "4142:18:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4215:31:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4217:27:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "4231:6:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4239:4:9",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "4227:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4227:17:9"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4217:6:9"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4195:18:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4188:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4188:26:9"
															},
															"nodeType": "YulIf",
															"src": "4185:61:9"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4305:111:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4326:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4333:3:9",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4338:10:9",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "4329:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4329:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4319:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4319:31:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4319:31:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4370:1:9",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4373:4:9",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4363:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4363:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4363:15:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4398:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4401:4:9",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4391:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4391:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4391:15:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4261:18:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4284:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4292:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "4281:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4281:14:9"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "4258:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4258:38:9"
															},
															"nodeType": "YulIf",
															"src": "4255:161:9"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "4077:4:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "4086:6:9",
														"type": ""
													}
												],
												"src": "4042:380:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4601:236:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4618:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4629:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4611:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4611:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4611:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4652:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4663:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4648:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4648:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4668:2:9",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4641:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4641:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4641:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4691:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4702:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4687:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4687:18:9"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4707:34:9",
																		"type": "",
																		"value": "Initializable: contract is alrea"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4680:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4680:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4680:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4762:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4773:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4758:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4758:18:9"
																	},
																	{
																		"hexValue": "647920696e697469616c697a6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4778:16:9",
																		"type": "",
																		"value": "dy initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4751:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4751:44:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4751:44:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4804:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4816:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4827:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4812:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4812:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4804:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4578:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4592:4:9",
														"type": ""
													}
												],
												"src": "4427:410:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4949:87:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4959:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4971:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4982:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4967:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4967:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4959:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5001:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5016:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5024:4:9",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5012:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5012:17:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4994:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4994:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4994:36:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4918:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4929:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4940:4:9",
														"type": ""
													}
												],
												"src": "4842:194:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5089:174:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5099:16:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5110:1:9"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5113:1:9"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5106:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5106:9:9"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "5099:3:9"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5146:111:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5167:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5174:3:9",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5179:10:9",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5170:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5170:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5160:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5160:31:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5160:31:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5211:1:9",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5214:4:9",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5204:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5204:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5204:15:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5239:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5242:4:9",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5232:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5232:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5232:15:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5130:1:9"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "5133:3:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5127:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5127:10:9"
															},
															"nodeType": "YulIf",
															"src": "5124:133:9"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5072:1:9",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5075:1:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "5081:3:9",
														"type": ""
													}
												],
												"src": "5041:222:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5442:227:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5459:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5470:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5452:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5452:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5452:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5493:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5504:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5489:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5489:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5509:2:9",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5482:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5482:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5482:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5532:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5543:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5528:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5528:18:9"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5548:34:9",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5521:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5521:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5521:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5603:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5614:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5599:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5599:18:9"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5619:7:9",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5592:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5592:35:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5592:35:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5636:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5648:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5659:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5644:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5644:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5636:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5419:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5433:4:9",
														"type": ""
													}
												],
												"src": "5268:401:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5848:228:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5865:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5876:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5858:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5858:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5858:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5899:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5910:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5895:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5895:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5915:2:9",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5888:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5888:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5888:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5938:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5949:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5934:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5934:18:9"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5954:34:9",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5927:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5927:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5927:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6009:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6020:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6005:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6005:18:9"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6025:8:9",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5998:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5998:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5998:36:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6043:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6055:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6066:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6051:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6051:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6043:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5825:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5839:4:9",
														"type": ""
													}
												],
												"src": "5674:402:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6255:233:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6272:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6283:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6265:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6265:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6265:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6306:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6317:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6302:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6302:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6322:2:9",
																		"type": "",
																		"value": "43"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6295:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6295:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6295:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6345:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6356:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6341:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6341:18:9"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6361:34:9",
																		"type": "",
																		"value": "Initializable: contract is not i"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6334:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6334:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6334:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6416:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6427:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6412:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6412:18:9"
																	},
																	{
																		"hexValue": "6e697469616c697a696e67",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6432:13:9",
																		"type": "",
																		"value": "nitializing"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6405:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6405:41:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6405:41:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6455:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6467:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6478:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6463:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6463:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6455:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6232:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6246:4:9",
														"type": ""
													}
												],
												"src": "6081:407:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6667:226:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6684:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6695:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6677:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6677:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6677:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6718:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6729:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6714:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6714:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6734:2:9",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6707:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6707:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6707:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6757:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6768:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6753:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6753:18:9"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6773:34:9",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6746:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6746:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6746:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6828:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6839:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6824:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6824:18:9"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6844:6:9",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6817:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6817:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6817:34:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6860:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6872:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6883:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6868:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6868:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6860:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6644:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6658:4:9",
														"type": ""
													}
												],
												"src": "6493:400:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7072:224:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7089:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7100:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7082:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7082:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7082:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7123:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7134:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7119:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7119:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7139:2:9",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7112:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7112:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7112:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7162:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7173:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7158:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7158:18:9"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7178:34:9",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7151:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7151:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7151:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7233:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7244:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7229:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7229:18:9"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7249:4:9",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7222:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7222:32:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7222:32:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7263:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7275:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7286:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7271:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7271:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7263:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7049:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7063:4:9",
														"type": ""
													}
												],
												"src": "6898:398:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7475:179:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7492:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7503:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7485:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7485:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7485:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7526:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7537:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7522:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7522:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7542:2:9",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7515:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7515:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7515:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7565:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7576:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7561:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7561:18:9"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7581:31:9",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7554:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7554:59:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7554:59:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7622:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7634:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7645:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7630:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7630:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7622:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7452:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7466:4:9",
														"type": ""
													}
												],
												"src": "7301:353:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7833:227:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7850:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7861:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7843:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7843:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7843:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7884:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7895:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7880:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7880:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7900:2:9",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7873:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7873:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7873:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7923:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7934:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7919:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7919:18:9"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7939:34:9",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7912:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7912:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7912:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7994:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8005:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7990:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7990:18:9"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8010:7:9",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7983:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7983:35:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7983:35:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8027:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8039:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8050:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8035:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8035:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8027:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7810:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7824:4:9",
														"type": ""
													}
												],
												"src": "7659:401:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8239:225:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8256:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8267:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8249:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8249:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8249:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8290:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8301:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8286:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8286:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8306:2:9",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8279:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8279:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8279:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8329:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8340:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8325:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8325:18:9"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8345:34:9",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8318:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8318:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8318:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8400:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8411:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8396:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8396:18:9"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8416:5:9",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8389:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8389:33:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8389:33:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8431:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8443:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8454:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8439:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8439:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8431:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8216:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8230:4:9",
														"type": ""
													}
												],
												"src": "8065:399:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8643:228:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8660:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8671:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8653:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8653:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8653:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8694:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8705:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8690:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8690:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8710:2:9",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8683:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8683:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8683:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8733:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8744:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8729:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8729:18:9"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8749:34:9",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8722:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8722:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8722:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8804:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8815:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8800:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8800:18:9"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8820:8:9",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8793:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8793:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8793:36:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8838:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8850:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8861:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8846:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8846:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8838:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8620:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8634:4:9",
														"type": ""
													}
												],
												"src": "8469:402:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9050:182:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9067:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9078:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9060:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9060:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9060:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9101:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9112:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9097:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9097:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9117:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9090:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9090:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9090:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9140:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9151:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9136:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9136:18:9"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9156:34:9",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9129:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9129:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9129:62:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9200:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9212:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9223:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9208:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9208:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9200:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9027:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9041:4:9",
														"type": ""
													}
												],
												"src": "8876:356:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9411:181:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9428:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9439:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9421:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9421:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9421:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9462:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9473:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9458:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9458:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9478:2:9",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9451:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9451:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9451:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9501:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9512:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9497:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9497:18:9"
																	},
																	{
																		"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9517:33:9",
																		"type": "",
																		"value": "ERC20: mint to the zero address"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9490:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9490:61:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9490:61:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9560:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9572:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9583:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9568:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9568:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9560:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9388:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9402:4:9",
														"type": ""
													}
												],
												"src": "9237:355:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9653:65:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9670:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "9673:3:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9663:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9663:14:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9663:14:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9686:26:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9704:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9707:4:9",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "9694:9:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9694:18:9"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "9686:4:9"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "9636:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "9644:4:9",
														"type": ""
													}
												],
												"src": "9597:121:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9804:464:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9837:425:9",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9851:11:9",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "9861:1:9",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nodeType": "YulTypedName",
																				"src": "9855:2:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "9882:2:9"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "9886:5:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "9875:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9875:17:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9875:17:9"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9905:31:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "9927:2:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9931:4:9",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nodeType": "YulIdentifier",
																				"src": "9917:9:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9917:19:9"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nodeType": "YulTypedName",
																				"src": "9909:4:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9949:57:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "9972:4:9"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9982:1:9",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nodeType": "YulIdentifier",
																									"src": "9989:10:9"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "10001:2:9",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "9985:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "9985:19:9"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "9978:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9978:27:9"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "9968:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9968:38:9"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nodeType": "YulTypedName",
																				"src": "9953:11:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "10043:23:9",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "10045:19:9",
																					"value": {
																						"name": "data",
																						"nodeType": "YulIdentifier",
																						"src": "10060:4:9"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nodeType": "YulIdentifier",
																							"src": "10045:11:9"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nodeType": "YulIdentifier",
																					"src": "10025:10:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10037:4:9",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "10022:2:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10022:20:9"
																		},
																		"nodeType": "YulIf",
																		"src": "10019:47:9"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "10079:41:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "10093:4:9"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "10103:1:9",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nodeType": "YulIdentifier",
																									"src": "10110:3:9"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "10115:2:9",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "10106:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "10106:12:9"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "10099:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10099:20:9"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "10089:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10089:31:9"
																		},
																		"variables": [
																			{
																				"name": "_2",
																				"nodeType": "YulTypedName",
																				"src": "10083:2:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "10133:24:9",
																		"value": {
																			"name": "deleteStart",
																			"nodeType": "YulIdentifier",
																			"src": "10146:11:9"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nodeType": "YulTypedName",
																				"src": "10137:5:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "10231:21:9",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "10240:5:9"
																							},
																							{
																								"name": "_1",
																								"nodeType": "YulIdentifier",
																								"src": "10247:2:9"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nodeType": "YulIdentifier",
																							"src": "10233:6:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10233:17:9"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "10233:17:9"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "10181:5:9"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "10188:2:9"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "10178:2:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10178:13:9"
																		},
																		"nodeType": "YulForLoop",
																		"post": {
																			"nodeType": "YulBlock",
																			"src": "10192:26:9",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "10194:22:9",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "10207:5:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "10214:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "10203:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10203:13:9"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nodeType": "YulIdentifier",
																							"src": "10194:5:9"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nodeType": "YulBlock",
																			"src": "10174:3:9",
																			"statements": []
																		},
																		"src": "10170:82:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "9820:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9825:2:9",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "9817:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9817:11:9"
															},
															"nodeType": "YulIf",
															"src": "9814:448:9"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "9776:5:9",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "9783:3:9",
														"type": ""
													},
													{
														"name": "startIndex",
														"nodeType": "YulTypedName",
														"src": "9788:10:9",
														"type": ""
													}
												],
												"src": "9723:545:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10358:81:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10368:65:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nodeType": "YulIdentifier",
																				"src": "10383:4:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "10401:1:9",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nodeType": "YulIdentifier",
																										"src": "10404:3:9"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "10397:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "10397:11:9"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "10414:1:9",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nodeType": "YulIdentifier",
																									"src": "10410:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "10410:6:9"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nodeType": "YulIdentifier",
																							"src": "10393:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10393:24:9"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "10389:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10389:29:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10379:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10379:40:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10425:1:9",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nodeType": "YulIdentifier",
																				"src": "10428:3:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "10421:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10421:11:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "10376:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10376:57:9"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nodeType": "YulIdentifier",
																	"src": "10368:4:9"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "10335:4:9",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "10341:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nodeType": "YulTypedName",
														"src": "10349:4:9",
														"type": ""
													}
												],
												"src": "10273:166:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10540:1256:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10550:24:9",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "10570:3:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "10564:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10564:10:9"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nodeType": "YulTypedName",
																	"src": "10554:6:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10617:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "10619:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10619:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10619:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "10589:6:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10597:18:9",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "10586:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10586:30:9"
															},
															"nodeType": "YulIf",
															"src": "10583:56:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "10692:4:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nodeType": "YulIdentifier",
																						"src": "10730:4:9"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nodeType": "YulIdentifier",
																					"src": "10724:5:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10724:11:9"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nodeType": "YulIdentifier",
																			"src": "10698:25:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10698:38:9"
																	},
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "10738:6:9"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "10648:43:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10648:97:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10648:97:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10754:18:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "10771:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulTypedName",
																	"src": "10758:9:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10781:23:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "10800:4:9",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "srcOffset_1",
																	"nodeType": "YulTypedName",
																	"src": "10785:11:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10813:24:9",
															"value": {
																"name": "srcOffset_1",
																"nodeType": "YulIdentifier",
																"src": "10826:11:9"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulIdentifier",
																	"src": "10813:9:9"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "10883:656:9",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "10897:35:9",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "10916:6:9"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "10928:2:9",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "10924:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "10924:7:9"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "10912:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10912:20:9"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nodeType": "YulTypedName",
																						"src": "10901:7:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "10945:49:9",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "10989:4:9"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "10959:29:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10959:35:9"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nodeType": "YulTypedName",
																						"src": "10949:6:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "11007:10:9",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11016:1:9",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "11011:1:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "11094:172:9",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "11119:6:9"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nodeType": "YulIdentifier",
																														"src": "11137:3:9"
																													},
																													{
																														"name": "srcOffset",
																														"nodeType": "YulIdentifier",
																														"src": "11142:9:9"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "11133:3:9"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "11133:19:9"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "11127:5:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "11127:26:9"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "11112:6:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "11112:42:9"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "11112:42:9"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "11171:24:9",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "11185:6:9"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "11193:1:9",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "11181:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "11181:14:9"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nodeType": "YulIdentifier",
																									"src": "11171:6:9"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "11212:40:9",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nodeType": "YulIdentifier",
																										"src": "11229:9:9"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "11240:11:9"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "11225:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "11225:27:9"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nodeType": "YulIdentifier",
																									"src": "11212:9:9"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "11041:1:9"
																						},
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "11044:7:9"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "11038:2:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11038:14:9"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "11053:28:9",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "11055:24:9",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "11064:1:9"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "11067:11:9"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "11060:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "11060:19:9"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "11055:1:9"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "11034:3:9",
																					"statements": []
																				},
																				"src": "11030:236:9"
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "11314:166:9",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "11332:43:9",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "11359:3:9"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "11364:9:9"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "11355:3:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "11355:19:9"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "11349:5:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "11349:26:9"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nodeType": "YulTypedName",
																									"src": "11336:9:9",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "11399:6:9"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nodeType": "YulIdentifier",
																												"src": "11411:9:9"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nodeType": "YulLiteral",
																																				"src": "11438:1:9",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nodeType": "YulIdentifier",
																																				"src": "11441:6:9"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nodeType": "YulIdentifier",
																																			"src": "11434:3:9"
																																		},
																																		"nodeType": "YulFunctionCall",
																																		"src": "11434:14:9"
																																	},
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "11450:3:9",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nodeType": "YulIdentifier",
																																	"src": "11430:3:9"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "11430:24:9"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "11460:1:9",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nodeType": "YulIdentifier",
																																	"src": "11456:3:9"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "11456:6:9"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nodeType": "YulIdentifier",
																															"src": "11426:3:9"
																														},
																														"nodeType": "YulFunctionCall",
																														"src": "11426:37:9"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nodeType": "YulIdentifier",
																													"src": "11422:3:9"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "11422:42:9"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nodeType": "YulIdentifier",
																											"src": "11407:3:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "11407:58:9"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "11392:6:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "11392:74:9"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "11392:74:9"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "11285:7:9"
																						},
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "11294:6:9"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "11282:2:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11282:19:9"
																				},
																				"nodeType": "YulIf",
																				"src": "11279:201:9"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "11500:4:9"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "11514:1:9",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nodeType": "YulIdentifier",
																											"src": "11517:6:9"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nodeType": "YulIdentifier",
																										"src": "11510:3:9"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "11510:14:9"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "11526:1:9",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "11506:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "11506:22:9"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "11493:6:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11493:36:9"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "11493:36:9"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "10876:663:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10881:1:9",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "11556:234:9",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "11570:14:9",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11583:1:9",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nodeType": "YulTypedName",
																						"src": "11574:5:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "11619:67:9",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "11637:35:9",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "11656:3:9"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "11661:9:9"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "11652:3:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "11652:19:9"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "11646:5:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "11646:26:9"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "11637:5:9"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nodeType": "YulIdentifier",
																					"src": "11600:6:9"
																				},
																				"nodeType": "YulIf",
																				"src": "11597:89:9"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "11706:4:9"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "11765:5:9"
																								},
																								{
																									"name": "newLen",
																									"nodeType": "YulIdentifier",
																									"src": "11772:6:9"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nodeType": "YulIdentifier",
																								"src": "11712:52:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "11712:67:9"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "11699:6:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11699:81:9"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "11699:81:9"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "11548:242:9",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "10856:6:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10864:2:9",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "10853:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10853:14:9"
															},
															"nodeType": "YulSwitch",
															"src": "10846:944:9"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "10525:4:9",
														"type": ""
													},
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "10531:3:9",
														"type": ""
													}
												],
												"src": "10444:1352:9"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0xffffffffffffffff\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset_1), dataEnd)\n        value2 := abi_decode_address(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d714610209578063a9059cbb1461021c578063dd62ed3e1461022f578063f2fde38b1461024257600080fd5b806370a08231146101b5578063715018a6146101de5780638da5cb5b146101e657806395d89b411461020157600080fd5b806323b872dd116100d357806323b872dd1461016d578063313ce56714610180578063395093511461018f57806340c10f19146101a257600080fd5b806306fdde0314610105578063077f224a14610123578063095ea7b31461013857806318160ddd1461015b575b600080fd5b61010d610255565b60405161011a9190610af7565b60405180910390f35b610136610131366004610c04565b6102e7565b005b61014b610146366004610c78565b61040b565b604051901515815260200161011a565b6067545b60405190815260200161011a565b61014b61017b366004610ca2565b610425565b6040516012815260200161011a565b61014b61019d366004610c78565b610449565b6101366101b0366004610c78565b61046b565b61015f6101c3366004610cde565b6001600160a01b031660009081526065602052604090205490565b610136610481565b6033546040516001600160a01b03909116815260200161011a565b61010d610495565b61014b610217366004610c78565b6104a4565b61014b61022a366004610c78565b61051f565b61015f61023d366004610d00565b61052d565b610136610250366004610cde565b610558565b60606068805461026490610d33565b80601f016020809104026020016040519081016040528092919081815260200182805461029090610d33565b80156102dd5780601f106102b2576101008083540402835291602001916102dd565b820191906000526020600020905b8154815290600101906020018083116102c057829003601f168201915b5050505050905090565b600054610100900460ff16158080156103075750600054600160ff909116105b806103215750303b158015610321575060005460ff166001145b6103895760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156103ac576000805461ff0019166101001790555b6103b684846105d1565b6103bf82610602565b8015610405576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b600033610419818585610654565b60019150505b92915050565b600033610433858285610778565b61043e8585856107ec565b506001949350505050565b60003361041981858561045c838361052d565b6104669190610d6d565b610654565b610473610997565b61047d82826109f1565b5050565b610489610997565b6104936000610602565b565b60606069805461026490610d33565b600033816104b2828661052d565b9050838110156105125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610380565b61043e8286868403610654565b6000336104198185856107ec565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b610560610997565b6001600160a01b0381166105c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610380565b6105ce81610602565b50565b600054610100900460ff166105f85760405162461bcd60e51b815260040161038090610d8e565b61047d8282610ab2565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0383166106b65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610380565b6001600160a01b0382166107175760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610380565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610784848461052d565b9050600019811461040557818110156107df5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610380565b6104058484848403610654565b6001600160a01b0383166108505760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610380565b6001600160a01b0382166108b25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610380565b6001600160a01b0383166000908152606560205260409020548181101561092a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610380565b6001600160a01b0380851660008181526065602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061098a9086815260200190565b60405180910390a3610405565b6033546001600160a01b031633146104935760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610380565b6001600160a01b038216610a475760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610380565b8060676000828254610a599190610d6d565b90915550506001600160a01b0382166000818152606560209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600054610100900460ff16610ad95760405162461bcd60e51b815260040161038090610d8e565b6068610ae58382610e27565b506069610af28282610e27565b505050565b600060208083528351808285015260005b81811015610b2457858101830151858201604001528201610b08565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610b6c57600080fd5b813567ffffffffffffffff80821115610b8757610b87610b45565b604051601f8301601f19908116603f01168101908282118183101715610baf57610baf610b45565b81604052838152866020858801011115610bc857600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b0381168114610bff57600080fd5b919050565b600080600060608486031215610c1957600080fd5b833567ffffffffffffffff80821115610c3157600080fd5b610c3d87838801610b5b565b94506020860135915080821115610c5357600080fd5b50610c6086828701610b5b565b925050610c6f60408501610be8565b90509250925092565b60008060408385031215610c8b57600080fd5b610c9483610be8565b946020939093013593505050565b600080600060608486031215610cb757600080fd5b610cc084610be8565b9250610cce60208501610be8565b9150604084013590509250925092565b600060208284031215610cf057600080fd5b610cf982610be8565b9392505050565b60008060408385031215610d1357600080fd5b610d1c83610be8565b9150610d2a60208401610be8565b90509250929050565b600181811c90821680610d4757607f821691505b602082108103610d6757634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561041f57634e487b7160e01b600052601160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b601f821115610af257600081815260208120601f850160051c81016020861015610e005750805b601f850160051c820191505b81811015610e1f57828155600101610e0c565b505050505050565b815167ffffffffffffffff811115610e4157610e41610b45565b610e5581610e4f8454610d33565b84610dd9565b602080601f831160018114610e8a5760008415610e725750858301515b600019600386901b1c1916600185901b178555610e1f565b600085815260208120601f198616915b82811015610eb957888601518255948401946001909101908401610e9a565b5085821015610ed75787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220a63d0f73f4511eea4a1e98fdde47555bd40c8bafbdc61032767e8255cba8bbe864736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x242 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x180 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x77F224A EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x15B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x255 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0xAF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x136 PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0xC04 JUMP JUMPDEST PUSH2 0x2E7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14B PUSH2 0x146 CALLDATASIZE PUSH1 0x4 PUSH2 0xC78 JUMP JUMPDEST PUSH2 0x40B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x11A JUMP JUMPDEST PUSH1 0x67 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x11A JUMP JUMPDEST PUSH2 0x14B PUSH2 0x17B CALLDATASIZE PUSH1 0x4 PUSH2 0xCA2 JUMP JUMPDEST PUSH2 0x425 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x11A JUMP JUMPDEST PUSH2 0x14B PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0xC78 JUMP JUMPDEST PUSH2 0x449 JUMP JUMPDEST PUSH2 0x136 PUSH2 0x1B0 CALLDATASIZE PUSH1 0x4 PUSH2 0xC78 JUMP JUMPDEST PUSH2 0x46B JUMP JUMPDEST PUSH2 0x15F PUSH2 0x1C3 CALLDATASIZE PUSH1 0x4 PUSH2 0xCDE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x136 PUSH2 0x481 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x11A JUMP JUMPDEST PUSH2 0x10D PUSH2 0x495 JUMP JUMPDEST PUSH2 0x14B PUSH2 0x217 CALLDATASIZE PUSH1 0x4 PUSH2 0xC78 JUMP JUMPDEST PUSH2 0x4A4 JUMP JUMPDEST PUSH2 0x14B PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0xC78 JUMP JUMPDEST PUSH2 0x51F JUMP JUMPDEST PUSH2 0x15F PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0xD00 JUMP JUMPDEST PUSH2 0x52D JUMP JUMPDEST PUSH2 0x136 PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0xCDE JUMP JUMPDEST PUSH2 0x558 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x68 DUP1 SLOAD PUSH2 0x264 SWAP1 PUSH2 0xD33 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x290 SWAP1 PUSH2 0xD33 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2DD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2B2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2DD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2C0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x307 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x321 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x321 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x389 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x3AC JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x3B6 DUP5 DUP5 PUSH2 0x5D1 JUMP JUMPDEST PUSH2 0x3BF DUP3 PUSH2 0x602 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x405 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x419 DUP2 DUP6 DUP6 PUSH2 0x654 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x433 DUP6 DUP3 DUP6 PUSH2 0x778 JUMP JUMPDEST PUSH2 0x43E DUP6 DUP6 DUP6 PUSH2 0x7EC JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x419 DUP2 DUP6 DUP6 PUSH2 0x45C DUP4 DUP4 PUSH2 0x52D JUMP JUMPDEST PUSH2 0x466 SWAP2 SWAP1 PUSH2 0xD6D JUMP JUMPDEST PUSH2 0x654 JUMP JUMPDEST PUSH2 0x473 PUSH2 0x997 JUMP JUMPDEST PUSH2 0x47D DUP3 DUP3 PUSH2 0x9F1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x489 PUSH2 0x997 JUMP JUMPDEST PUSH2 0x493 PUSH1 0x0 PUSH2 0x602 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x69 DUP1 SLOAD PUSH2 0x264 SWAP1 PUSH2 0xD33 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x4B2 DUP3 DUP7 PUSH2 0x52D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x512 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x380 JUMP JUMPDEST PUSH2 0x43E DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x654 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x419 DUP2 DUP6 DUP6 PUSH2 0x7EC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x560 PUSH2 0x997 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x380 JUMP JUMPDEST PUSH2 0x5CE DUP2 PUSH2 0x602 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x5F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x380 SWAP1 PUSH2 0xD8E JUMP JUMPDEST PUSH2 0x47D DUP3 DUP3 PUSH2 0xAB2 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x6B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x380 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x717 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x380 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x784 DUP5 DUP5 PUSH2 0x52D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x405 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x380 JUMP JUMPDEST PUSH2 0x405 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x654 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x850 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x380 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x8B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x380 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x92A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x380 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x98A SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x405 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x493 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x380 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xA47 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x380 JUMP JUMPDEST DUP1 PUSH1 0x67 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xA59 SWAP2 SWAP1 PUSH2 0xD6D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xAD9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x380 SWAP1 PUSH2 0xD8E JUMP JUMPDEST PUSH1 0x68 PUSH2 0xAE5 DUP4 DUP3 PUSH2 0xE27 JUMP JUMPDEST POP PUSH1 0x69 PUSH2 0xAF2 DUP3 DUP3 PUSH2 0xE27 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB24 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0xB08 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB87 JUMPI PUSH2 0xB87 PUSH2 0xB45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xBAF JUMPI PUSH2 0xBAF PUSH2 0xB45 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0xBC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xBFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xC31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC3D DUP8 DUP4 DUP9 ADD PUSH2 0xB5B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xC53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC60 DUP7 DUP3 DUP8 ADD PUSH2 0xB5B JUMP JUMPDEST SWAP3 POP POP PUSH2 0xC6F PUSH1 0x40 DUP6 ADD PUSH2 0xBE8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC94 DUP4 PUSH2 0xBE8 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xCB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCC0 DUP5 PUSH2 0xBE8 JUMP JUMPDEST SWAP3 POP PUSH2 0xCCE PUSH1 0x20 DUP6 ADD PUSH2 0xBE8 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCF9 DUP3 PUSH2 0xBE8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD1C DUP4 PUSH2 0xBE8 JUMP JUMPDEST SWAP2 POP PUSH2 0xD2A PUSH1 0x20 DUP5 ADD PUSH2 0xBE8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xD47 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xD67 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x41F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xAF2 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0xE00 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xE1F JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xE0C JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE41 JUMPI PUSH2 0xE41 PUSH2 0xB45 JUMP JUMPDEST PUSH2 0xE55 DUP2 PUSH2 0xE4F DUP5 SLOAD PUSH2 0xD33 JUMP JUMPDEST DUP5 PUSH2 0xDD9 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0xE8A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0xE72 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0xE1F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xEB9 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0xE9A JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0xED7 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA6 RETURNDATASIZE 0xF PUSH20 0xF4511EEA4A1E98FDDE47555BD40C8BAFBDC61032 PUSH23 0x7E8255CBA8BBE864736F6C634300081300330000000000 ",
							"sourceMap": "244:400:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2495:98:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;327:206:8;;;;;;:::i;:::-;;:::i;:::-;;4781:197:2;;;;;;:::i;:::-;;:::i;:::-;;;2647:14:9;;2640:22;2622:41;;2610:2;2595:18;4781:197:2;2482:187:9;3592:106:2;3679:12;;3592:106;;;2820:25:9;;;2808:2;2793:18;3592:106:2;2674:177:9;5540:256:2;;;;;;:::i;:::-;;:::i;3441:91::-;;;3523:2;3331:36:9;;3319:2;3304:18;3441:91:2;3189:184:9;6191:234:2;;;;;;:::i;:::-;;:::i;539:103:8:-;;;;;;:::i;:::-;;:::i;3756:125:2:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3856:18:2;3830:7;3856:18;;;:9;:18;;;;;;;3756:125;2064:101:0;;;:::i;1441:85::-;1513:6;;1441:85;;-1:-1:-1;;;;;1513:6:0;;;3715:51:9;;3703:2;3688:18;1441:85:0;3569:203:9;2706:102:2;;;:::i;6912:427::-;;;;;;:::i;:::-;;:::i;4077:189::-;;;;;;:::i;:::-;;:::i;4324:149::-;;;;;;:::i;:::-;;:::i;2314:198:0:-;;;;;;:::i;:::-;;:::i;2495:98:2:-;2549:13;2581:5;2574:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2495:98;:::o;327:206:8:-;3279:19:1;3302:13;;;;;;3301:14;;3347:34;;;;-1:-1:-1;3365:12:1;;3380:1;3365:12;;;;:16;3347:34;3346:108;;;-1:-1:-1;3426:4:1;1713:19:5;:23;;;3387:66:1;;-1:-1:-1;3436:12:1;;;;;:17;3387:66;3325:201;;;;-1:-1:-1;;;3325:201:1;;4629:2:9;3325:201:1;;;4611:21:9;4668:2;4648:18;;;4641:30;4707:34;4687:18;;;4680:62;-1:-1:-1;;;4758:18:9;;;4751:44;4812:19;;3325:201:1;;;;;;;;;3536:12;:16;;-1:-1:-1;;3536:16:1;3551:1;3536:16;;;3562:65;;;;3596:13;:20;;-1:-1:-1;;3596:20:1;;;;;3562:65;465:26:8::1;478:4;484:6;465:12;:26::i;:::-;501:25;520:5;501:18;:25::i;:::-;3651:14:1::0;3647:99;;;3697:5;3681:21;;-1:-1:-1;;3681:21:1;;;3721:14;;-1:-1:-1;3331:36:9;;3721:14:1;;3319:2:9;3304:18;3721:14:1;;;;;;;3647:99;3269:483;327:206:8;;;:::o;4781:197:2:-;4864:4;929:10:6;4918:32:2;929:10:6;4934:7:2;4943:6;4918:8;:32::i;:::-;4967:4;4960:11;;;4781:197;;;;;:::o;5540:256::-;5637:4;929:10:6;5693:38:2;5709:4;929:10:6;5724:6:2;5693:15;:38::i;:::-;5741:27;5751:4;5757:2;5761:6;5741:9;:27::i;:::-;-1:-1:-1;5785:4:2;;5540:256;-1:-1:-1;;;;5540:256:2:o;6191:234::-;6279:4;929:10:6;6333:64:2;929:10:6;6349:7:2;6386:10;6358:25;929:10:6;6349:7:2;6358:9;:25::i;:::-;:38;;;;:::i;:::-;6333:8;:64::i;539:103:8:-;1334:13:0;:11;:13::i;:::-;613:22:8::1;619:7;628:6;613:5;:22::i;:::-;539:103:::0;;:::o;2064:101:0:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;2706:102:2:-;2762:13;2794:7;2787:14;;;;;:::i;6912:427::-;7005:4;929:10:6;7005:4:2;7086:25;929:10:6;7103:7:2;7086:9;:25::i;:::-;7059:52;;7149:15;7129:16;:35;;7121:85;;;;-1:-1:-1;;;7121:85:2;;5470:2:9;7121:85:2;;;5452:21:9;5509:2;5489:18;;;5482:30;5548:34;5528:18;;;5521:62;-1:-1:-1;;;5599:18:9;;;5592:35;5644:19;;7121:85:2;5268:401:9;7121:85:2;7240:60;7249:5;7256:7;7284:15;7265:16;:34;7240:8;:60::i;4077:189::-;4156:4;929:10:6;4210:28:2;929:10:6;4227:2:2;4231:6;4210:9;:28::i;4324:149::-;-1:-1:-1;;;;;4439:18:2;;;4413:7;4439:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4324:149::o;2314:198:0:-;1334:13;:11;:13::i;:::-;-1:-1:-1;;;;;2402:22:0;::::1;2394:73;;;::::0;-1:-1:-1;;;2394:73:0;;5876:2:9;2394:73:0::1;::::0;::::1;5858:21:9::0;5915:2;5895:18;;;5888:30;5954:34;5934:18;;;5927:62;-1:-1:-1;;;6005:18:9;;;5998:36;6051:19;;2394:73:0::1;5674:402:9::0;2394:73:0::1;2477:28;2496:8;2477:18;:28::i;:::-;2314:198:::0;:::o;2118:147:2:-;5374:13:1;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:1;;;;;;;:::i;:::-;2220:38:2::1;2243:5;2250:7;2220:22;:38::i;2666:187:0:-:0;2758:6;;;-1:-1:-1;;;;;2774:17:0;;;-1:-1:-1;;;;;;2774:17:0;;;;;;;2806:40;;2758:6;;;2774:17;2758:6;;2806:40;;2739:16;;2806:40;2729:124;2666:187;:::o;10794:340:2:-;-1:-1:-1;;;;;10895:19:2;;10887:68;;;;-1:-1:-1;;;10887:68:2;;6695:2:9;10887:68:2;;;6677:21:9;6734:2;6714:18;;;6707:30;6773:34;6753:18;;;6746:62;-1:-1:-1;;;6824:18:9;;;6817:34;6868:19;;10887:68:2;6493:400:9;10887:68:2;-1:-1:-1;;;;;10973:21:2;;10965:68;;;;-1:-1:-1;;;10965:68:2;;7100:2:9;10965:68:2;;;7082:21:9;7139:2;7119:18;;;7112:30;7178:34;7158:18;;;7151:62;-1:-1:-1;;;7229:18:9;;;7222:32;7271:19;;10965:68:2;6898:398:9;10965:68:2;-1:-1:-1;;;;;11044:18:2;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11095:32;;2820:25:9;;;11095:32:2;;2793:18:9;11095:32:2;;;;;;;10794:340;;;:::o;11415:411::-;11515:24;11542:25;11552:5;11559:7;11542:9;:25::i;:::-;11515:52;;-1:-1:-1;;11581:16:2;:37;11577:243;;11662:6;11642:16;:26;;11634:68;;;;-1:-1:-1;;;11634:68:2;;7503:2:9;11634:68:2;;;7485:21:9;7542:2;7522:18;;;7515:30;7581:31;7561:18;;;7554:59;7630:18;;11634:68:2;7301:353:9;11634:68:2;11744:51;11753:5;11760:7;11788:6;11769:16;:25;11744:8;:51::i;7793:788::-;-1:-1:-1;;;;;7889:18:2;;7881:68;;;;-1:-1:-1;;;7881:68:2;;7861:2:9;7881:68:2;;;7843:21:9;7900:2;7880:18;;;7873:30;7939:34;7919:18;;;7912:62;-1:-1:-1;;;7990:18:9;;;7983:35;8035:19;;7881:68:2;7659:401:9;7881:68:2;-1:-1:-1;;;;;7967:16:2;;7959:64;;;;-1:-1:-1;;;7959:64:2;;8267:2:9;7959:64:2;;;8249:21:9;8306:2;8286:18;;;8279:30;8345:34;8325:18;;;8318:62;-1:-1:-1;;;8396:18:9;;;8389:33;8439:19;;7959:64:2;8065:399:9;7959:64:2;-1:-1:-1;;;;;8105:15:2;;8083:19;8105:15;;;:9;:15;;;;;;8138:21;;;;8130:72;;;;-1:-1:-1;;;8130:72:2;;8671:2:9;8130:72:2;;;8653:21:9;8710:2;8690:18;;;8683:30;8749:34;8729:18;;;8722:62;-1:-1:-1;;;8800:18:9;;;8793:36;8846:19;;8130:72:2;8469:402:9;8130:72:2;-1:-1:-1;;;;;8236:15:2;;;;;;;:9;:15;;;;;;8254:20;;;8236:38;;8451:13;;;;;;;;;;:23;;;;;;8500:26;;;;;;8268:6;2820:25:9;;2808:2;2793:18;;2674:177;8500:26:2;;;;;;;;8537:37;2271:159;1599:130:0;1513:6;;-1:-1:-1;;;;;1513:6:0;929:10:6;1662:23:0;1654:68;;;;-1:-1:-1;;;1654:68:0;;9078:2:9;1654:68:0;;;9060:21:9;;;9097:18;;;9090:30;9156:34;9136:18;;;9129:62;9208:18;;1654:68:0;8876:356:9;8857:535:2;-1:-1:-1;;;;;8940:21:2;;8932:65;;;;-1:-1:-1;;;8932:65:2;;9439:2:9;8932:65:2;;;9421:21:9;9478:2;9458:18;;;9451:30;9517:33;9497:18;;;9490:61;9568:18;;8932:65:2;9237:355:9;8932:65:2;9084:6;9068:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;9236:18:2;;;;;;:9;:18;;;;;;;;:28;;;;;;9289:37;2820:25:9;;;9289:37:2;;2793:18:9;9289:37:2;;;;;;;539:103:8;;:::o;2271:159:2:-;5374:13:1;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:1;;;;;;;:::i;:::-;2383:5:2::1;:13;2391:5:::0;2383;:13:::1;:::i;:::-;-1:-1:-1::0;2406:7:2::1;:17;2416:7:::0;2406;:17:::1;:::i;:::-;;2271:159:::0;;:::o;14:548:9:-;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:127::-;628:10;623:3;619:20;616:1;609:31;659:4;656:1;649:15;683:4;680:1;673:15;699:719;742:5;795:3;788:4;780:6;776:17;772:27;762:55;;813:1;810;803:12;762:55;849:6;836:20;875:18;912:2;908;905:10;902:36;;;918:18;;:::i;:::-;993:2;987:9;961:2;1047:13;;-1:-1:-1;;1043:22:9;;;1067:2;1039:31;1035:40;1023:53;;;1091:18;;;1111:22;;;1088:46;1085:72;;;1137:18;;:::i;:::-;1177:10;1173:2;1166:22;1212:2;1204:6;1197:18;1258:3;1251:4;1246:2;1238:6;1234:15;1230:26;1227:35;1224:55;;;1275:1;1272;1265:12;1224:55;1339:2;1332:4;1324:6;1320:17;1313:4;1305:6;1301:17;1288:54;1386:1;1379:4;1374:2;1366:6;1362:15;1358:26;1351:37;1406:6;1397:15;;;;;;699:719;;;;:::o;1423:173::-;1491:20;;-1:-1:-1;;;;;1540:31:9;;1530:42;;1520:70;;1586:1;1583;1576:12;1520:70;1423:173;;;:::o;1601:617::-;1698:6;1706;1714;1767:2;1755:9;1746:7;1742:23;1738:32;1735:52;;;1783:1;1780;1773:12;1735:52;1823:9;1810:23;1852:18;1893:2;1885:6;1882:14;1879:34;;;1909:1;1906;1899:12;1879:34;1932:50;1974:7;1965:6;1954:9;1950:22;1932:50;:::i;:::-;1922:60;;2035:2;2024:9;2020:18;2007:32;1991:48;;2064:2;2054:8;2051:16;2048:36;;;2080:1;2077;2070:12;2048:36;;2103:52;2147:7;2136:8;2125:9;2121:24;2103:52;:::i;:::-;2093:62;;;2174:38;2208:2;2197:9;2193:18;2174:38;:::i;:::-;2164:48;;1601:617;;;;;:::o;2223:254::-;2291:6;2299;2352:2;2340:9;2331:7;2327:23;2323:32;2320:52;;;2368:1;2365;2358:12;2320:52;2391:29;2410:9;2391:29;:::i;:::-;2381:39;2467:2;2452:18;;;;2439:32;;-1:-1:-1;;;2223:254:9:o;2856:328::-;2933:6;2941;2949;3002:2;2990:9;2981:7;2977:23;2973:32;2970:52;;;3018:1;3015;3008:12;2970:52;3041:29;3060:9;3041:29;:::i;:::-;3031:39;;3089:38;3123:2;3112:9;3108:18;3089:38;:::i;:::-;3079:48;;3174:2;3163:9;3159:18;3146:32;3136:42;;2856:328;;;;;:::o;3378:186::-;3437:6;3490:2;3478:9;3469:7;3465:23;3461:32;3458:52;;;3506:1;3503;3496:12;3458:52;3529:29;3548:9;3529:29;:::i;:::-;3519:39;3378:186;-1:-1:-1;;;3378:186:9:o;3777:260::-;3845:6;3853;3906:2;3894:9;3885:7;3881:23;3877:32;3874:52;;;3922:1;3919;3912:12;3874:52;3945:29;3964:9;3945:29;:::i;:::-;3935:39;;3993:38;4027:2;4016:9;4012:18;3993:38;:::i;:::-;3983:48;;3777:260;;;;;:::o;4042:380::-;4121:1;4117:12;;;;4164;;;4185:61;;4239:4;4231:6;4227:17;4217:27;;4185:61;4292:2;4284:6;4281:14;4261:18;4258:38;4255:161;;4338:10;4333:3;4329:20;4326:1;4319:31;4373:4;4370:1;4363:15;4401:4;4398:1;4391:15;4255:161;;4042:380;;;:::o;5041:222::-;5106:9;;;5127:10;;;5124:133;;;5179:10;5174:3;5170:20;5167:1;5160:31;5214:4;5211:1;5204:15;5242:4;5239:1;5232:15;6081:407;6283:2;6265:21;;;6322:2;6302:18;;;6295:30;6361:34;6356:2;6341:18;;6334:62;-1:-1:-1;;;6427:2:9;6412:18;;6405:41;6478:3;6463:19;;6081:407::o;9723:545::-;9825:2;9820:3;9817:11;9814:448;;;9861:1;9886:5;9882:2;9875:17;9931:4;9927:2;9917:19;10001:2;9989:10;9985:19;9982:1;9978:27;9972:4;9968:38;10037:4;10025:10;10022:20;10019:47;;;-1:-1:-1;10060:4:9;10019:47;10115:2;10110:3;10106:12;10103:1;10099:20;10093:4;10089:31;10079:41;;10170:82;10188:2;10181:5;10178:13;10170:82;;;10233:17;;;10214:1;10203:13;10170:82;;;10174:3;;;9723:545;;;:::o;10444:1352::-;10570:3;10564:10;10597:18;10589:6;10586:30;10583:56;;;10619:18;;:::i;:::-;10648:97;10738:6;10698:38;10730:4;10724:11;10698:38;:::i;:::-;10692:4;10648:97;:::i;:::-;10800:4;;10864:2;10853:14;;10881:1;10876:663;;;;11583:1;11600:6;11597:89;;;-1:-1:-1;11652:19:9;;;11646:26;11597:89;-1:-1:-1;;10401:1:9;10397:11;;;10393:24;10389:29;10379:40;10425:1;10421:11;;;10376:57;11699:81;;10846:944;;10876:663;9670:1;9663:14;;;9707:4;9694:18;;-1:-1:-1;;10912:20:9;;;11030:236;11044:7;11041:1;11038:14;11030:236;;;11133:19;;;11127:26;11112:42;;11225:27;;;;11193:1;11181:14;;;;11060:19;;11030:236;;;11034:3;11294:6;11285:7;11282:19;11279:201;;;11355:19;;;11349:26;-1:-1:-1;;11438:1:9;11434:14;;;11450:3;11430:24;11426:37;11422:42;11407:58;11392:74;;11279:201;-1:-1:-1;;;;;11526:1:9;11510:14;;;11506:22;11493:36;;-1:-1:-1;10444:1352:9:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "773800",
								"executionCost": "805",
								"totalCost": "774605"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24673",
								"balanceOf(address)": "2560",
								"decimals()": "222",
								"decreaseAllowance(address,uint256)": "26972",
								"increaseAllowance(address,uint256)": "infinite",
								"initialize(string,string,address)": "infinite",
								"mint(address,uint256)": "53061",
								"name()": "infinite",
								"owner()": "2368",
								"renounceOwnership()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2371",
								"transfer(address,uint256)": "51103",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "28424"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 244,
									"end": 644,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 244,
									"end": 644,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 244,
									"end": 644,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 244,
									"end": 644,
									"name": "CALLVALUE",
									"source": 8
								},
								{
									"begin": 244,
									"end": 644,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 244,
									"end": 644,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 244,
									"end": 644,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 244,
									"end": 644,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 244,
									"end": 644,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 644,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 244,
									"end": 644,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 244,
									"end": 644,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 244,
									"end": 644,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 244,
									"end": 644,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 244,
									"end": 644,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 244,
									"end": 644,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 244,
									"end": 644,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 244,
									"end": 644,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 644,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 244,
									"end": 644,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 644,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a63d0f73f4511eea4a1e98fdde47555bd40c8bafbdc61032767e8255cba8bbe864736f6c63430008130033",
									".code": [
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "tag",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "70A08231"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "A457C2D7"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "A457C2D7"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "A9059CBB"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "DD62ED3E"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "F2FDE38B"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "tag",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "70A08231"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "715018A6"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "8DA5CB5B"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "95D89B41"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "tag",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "23B872DD"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "23B872DD"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "313CE567"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "39509351"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "40C10F19"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "tag",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "6FDDE03"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "77F224A"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "95EA7B3"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "18160DDD"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "tag",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 244,
											"end": 644,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 2495,
											"end": 2593,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 2495,
											"end": 2593,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 327,
											"end": 533,
											"name": "tag",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 327,
											"end": 533,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 327,
											"end": 533,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 327,
											"end": 533,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "27"
										},
										{
											"begin": 327,
											"end": 533,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 327,
											"end": 533,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 327,
											"end": 533,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 327,
											"end": 533,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 327,
											"end": 533,
											"name": "tag",
											"source": 8,
											"value": "27"
										},
										{
											"begin": 327,
											"end": 533,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 327,
											"end": 533,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "29"
										},
										{
											"begin": 327,
											"end": 533,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 327,
											"end": 533,
											"name": "tag",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 327,
											"end": 533,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 327,
											"end": 533,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 4781,
											"end": 4978,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 4781,
											"end": 4978,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2647,
											"end": 2661,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2647,
											"end": 2661,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2640,
											"end": 2662,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2622,
											"end": 2663,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2622,
											"end": 2663,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2610,
											"end": 2612,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2595,
											"end": 2613,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2482,
											"end": 2669,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3679,
											"end": 3691,
											"name": "PUSH",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 3679,
											"end": 3691,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2845,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2820,
											"end": 2845,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2820,
											"end": 2845,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2808,
											"end": 2810,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2793,
											"end": 2811,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2674,
											"end": 2851,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 5540,
											"end": 5796,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 5540,
											"end": 5796,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3523,
											"end": 3525,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 3331,
											"end": 3367,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3331,
											"end": 3367,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3319,
											"end": 3321,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3304,
											"end": 3322,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3189,
											"end": 3373,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 6191,
											"end": 6425,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 6191,
											"end": 6425,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 539,
											"end": 642,
											"name": "tag",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 539,
											"end": 642,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 539,
											"end": 642,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 539,
											"end": 642,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "54"
										},
										{
											"begin": 539,
											"end": 642,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 539,
											"end": 642,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 539,
											"end": 642,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 539,
											"end": 642,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 539,
											"end": 642,
											"name": "tag",
											"source": 8,
											"value": "54"
										},
										{
											"begin": 539,
											"end": 642,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 539,
											"end": 642,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "55"
										},
										{
											"begin": 539,
											"end": 642,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 3756,
											"end": 3881,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "tag",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3830,
											"end": 3837,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "PUSH",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2064,
											"end": 2165,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 2064,
											"end": 2165,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2064,
											"end": 2165,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2064,
											"end": 2165,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2064,
											"end": 2165,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3715,
											"end": 3766,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3715,
											"end": 3766,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3703,
											"end": 3705,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3688,
											"end": 3706,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 3569,
											"end": 3772,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2706,
											"end": 2808,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 6912,
											"end": 7339,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 6912,
											"end": 7339,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 4077,
											"end": 4266,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 4077,
											"end": 4266,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 4324,
											"end": 4473,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 4324,
											"end": 4473,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2314,
											"end": 2512,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 2314,
											"end": 2512,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2314,
											"end": 2512,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2314,
											"end": 2512,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 2314,
											"end": 2512,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2314,
											"end": 2512,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2314,
											"end": 2512,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 2314,
											"end": 2512,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2314,
											"end": 2512,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 2314,
											"end": 2512,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2314,
											"end": 2512,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 2314,
											"end": 2512,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2549,
											"end": 2562,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2581,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 2574,
											"end": 2586,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 2574,
											"end": 2586,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2495,
											"end": 2593,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 327,
											"end": 533,
											"name": "tag",
											"source": 8,
											"value": "29"
										},
										{
											"begin": 327,
											"end": 533,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3279,
											"end": 3298,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3301,
											"end": 3315,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3301,
											"end": 3315,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "94"
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3380,
											"end": 3381,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3365,
											"end": 3381,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "tag",
											"source": 1,
											"value": "94"
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3346,
											"end": 3454,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3346,
											"end": 3454,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 3346,
											"end": 3454,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3426,
											"end": 3430,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 1713,
											"end": 1732,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 1713,
											"end": 1736,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1713,
											"end": 1736,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1713,
											"end": 1736,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3387,
											"end": 3453,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 3387,
											"end": 3453,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3436,
											"end": 3448,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3436,
											"end": 3448,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3436,
											"end": 3448,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3436,
											"end": 3448,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3436,
											"end": 3448,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3436,
											"end": 3453,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 3387,
											"end": 3453,
											"name": "tag",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 3387,
											"end": 3453,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4629,
											"end": 4631,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4611,
											"end": 4632,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4668,
											"end": 4670,
											"name": "PUSH",
											"source": 9,
											"value": "2E"
										},
										{
											"begin": 4648,
											"end": 4666,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 4648,
											"end": 4666,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4648,
											"end": 4666,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4641,
											"end": 4671,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4707,
											"end": 4741,
											"name": "PUSH",
											"source": 9,
											"value": "496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
										},
										{
											"begin": 4687,
											"end": 4705,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 4687,
											"end": 4705,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4687,
											"end": 4705,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4680,
											"end": 4742,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "191E481A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4758,
											"end": 4776,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 4758,
											"end": 4776,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4758,
											"end": 4776,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4751,
											"end": 4795,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4812,
											"end": 4831,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 4812,
											"end": 4831,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "tag",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "tag",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3536,
											"end": 3548,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3551,
											"end": 3552,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "102"
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3596,
											"end": 3609,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "tag",
											"source": 1,
											"value": "102"
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 465,
											"end": 491,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 478,
											"end": 482,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 484,
											"end": 490,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 465,
											"end": 477,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "105"
										},
										{
											"begin": 465,
											"end": 491,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 465,
											"end": 491,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 465,
											"end": 491,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 501,
											"end": 526,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "106"
										},
										{
											"begin": 520,
											"end": 525,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 501,
											"end": 519,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "107"
										},
										{
											"begin": 501,
											"end": 526,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 501,
											"end": 526,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "106"
										},
										{
											"begin": 501,
											"end": 526,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3651,
											"end": 3665,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3647,
											"end": 3746,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3647,
											"end": 3746,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "108"
										},
										{
											"begin": 3647,
											"end": 3746,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3697,
											"end": 3702,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3681,
											"end": 3702,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3681,
											"end": 3702,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3681,
											"end": 3702,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3681,
											"end": 3702,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3681,
											"end": 3702,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 3331,
											"end": 3367,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3331,
											"end": 3367,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "PUSH",
											"source": 1,
											"value": "7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3319,
											"end": 3321,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3304,
											"end": 3322,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "LOG1",
											"source": 1
										},
										{
											"begin": 3647,
											"end": 3746,
											"name": "tag",
											"source": 1,
											"value": "108"
										},
										{
											"begin": 3647,
											"end": 3746,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3269,
											"end": 3752,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 327,
											"end": 533,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 327,
											"end": 533,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 327,
											"end": 533,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 327,
											"end": 533,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4864,
											"end": 4868,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4934,
											"end": 4941,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4943,
											"end": 4949,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4918,
											"end": 4926,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 4918,
											"end": 4950,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "tag",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4967,
											"end": 4971,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4960,
											"end": 4971,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4960,
											"end": 4971,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4960,
											"end": 4971,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4781,
											"end": 4978,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5637,
											"end": 5641,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 5709,
											"end": 5713,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5724,
											"end": 5730,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5693,
											"end": 5708,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 5693,
											"end": 5731,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "tag",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 5751,
											"end": 5755,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5757,
											"end": 5759,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5761,
											"end": 5767,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5741,
											"end": 5750,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 5741,
											"end": 5768,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "tag",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5785,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5785,
											"end": 5789,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5540,
											"end": 5796,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6279,
											"end": 6283,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 6333,
											"end": 6397,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6349,
											"end": 6356,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6386,
											"end": 6396,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6349,
											"end": 6356,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6358,
											"end": 6367,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 6358,
											"end": 6383,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "tag",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 6358,
											"end": 6396,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "tag",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6333,
											"end": 6341,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 6333,
											"end": 6397,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 539,
											"end": 642,
											"name": "tag",
											"source": 8,
											"value": "55"
										},
										{
											"begin": 539,
											"end": 642,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 1334,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 1334,
											"end": 1347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 613,
											"end": 635,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "134"
										},
										{
											"begin": 619,
											"end": 626,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 628,
											"end": 634,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 613,
											"end": 618,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "135"
										},
										{
											"begin": 613,
											"end": 635,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 613,
											"end": 635,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "134"
										},
										{
											"begin": 613,
											"end": 635,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 539,
											"end": 642,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 539,
											"end": 642,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 539,
											"end": 642,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2064,
											"end": 2165,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2064,
											"end": 2165,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 1334,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 1334,
											"end": 1347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "tag",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2128,
											"end": 2158,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 2155,
											"end": 2156,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2128,
											"end": 2146,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 2128,
											"end": 2158,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2128,
											"end": 2158,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 2128,
											"end": 2158,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2064,
											"end": 2165,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2762,
											"end": 2775,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2794,
											"end": 2801,
											"name": "PUSH",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 2787,
											"end": 2801,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7005,
											"end": 7009,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7005,
											"end": 7009,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "150"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7103,
											"end": 7110,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7086,
											"end": 7095,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 7086,
											"end": 7111,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "tag",
											"source": 2,
											"value": "150"
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7059,
											"end": 7111,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7059,
											"end": 7111,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7149,
											"end": 7164,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7129,
											"end": 7145,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7129,
											"end": 7164,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 7129,
											"end": 7164,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5470,
											"end": 5472,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5452,
											"end": 5473,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5509,
											"end": 5511,
											"name": "PUSH",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 5489,
											"end": 5507,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 5489,
											"end": 5507,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5489,
											"end": 5507,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5482,
											"end": 5512,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5548,
											"end": 5582,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 5528,
											"end": 5546,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 5528,
											"end": 5546,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5528,
											"end": 5546,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5521,
											"end": 5583,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5599,
											"end": 5617,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 5599,
											"end": 5617,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5599,
											"end": 5617,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5592,
											"end": 5627,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5644,
											"end": 5663,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 5644,
											"end": 5663,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 5268,
											"end": 5669,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "tag",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7240,
											"end": 7300,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 7249,
											"end": 7254,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7256,
											"end": 7263,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7299,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7265,
											"end": 7281,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7265,
											"end": 7299,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7240,
											"end": 7248,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 7240,
											"end": 7300,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4156,
											"end": 4160,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4210,
											"end": 4238,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4227,
											"end": 4229,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4231,
											"end": 4237,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4210,
											"end": 4219,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 4210,
											"end": 4238,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4413,
											"end": 4420,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4450,
											"name": "PUSH",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4324,
											"end": 4473,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2314,
											"end": 2512,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 2314,
											"end": 2512,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 1334,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 1334,
											"end": 1347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "tag",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2402,
											"end": 2424,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2402,
											"end": 2424,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2394,
											"end": 2467,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 2394,
											"end": 2467,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2394,
											"end": 2467,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2394,
											"end": 2467,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2394,
											"end": 2467,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2394,
											"end": 2467,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5876,
											"end": 5878,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2394,
											"end": 2467,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2394,
											"end": 2467,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2394,
											"end": 2467,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5858,
											"end": 5879,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5915,
											"end": 5917,
											"name": "PUSH",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 5895,
											"end": 5913,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 5895,
											"end": 5913,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5895,
											"end": 5913,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5888,
											"end": 5918,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5954,
											"end": 5988,
											"name": "PUSH",
											"source": 9,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 5934,
											"end": 5952,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 5934,
											"end": 5952,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5934,
											"end": 5952,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5927,
											"end": 5989,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6005,
											"end": 6023,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 6005,
											"end": 6023,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6005,
											"end": 6023,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5998,
											"end": 6034,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6051,
											"end": 6070,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 6051,
											"end": 6070,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2394,
											"end": 2467,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 5674,
											"end": 6076,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2394,
											"end": 2467,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 2394,
											"end": 2467,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2477,
											"end": 2505,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 2496,
											"end": 2504,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2477,
											"end": 2495,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 2477,
											"end": 2505,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2477,
											"end": 2505,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 2477,
											"end": 2505,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2314,
											"end": 2512,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2314,
											"end": 2512,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2118,
											"end": 2265,
											"name": "tag",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 2118,
											"end": 2265,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "168"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "170"
										},
										{
											"begin": 5366,
											"end": 5435,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "tag",
											"source": 1,
											"value": "168"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2220,
											"end": 2258,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 2243,
											"end": 2248,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2250,
											"end": 2257,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2220,
											"end": 2242,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 2220,
											"end": 2258,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2666,
											"end": 2853,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 2666,
											"end": 2853,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2758,
											"end": 2764,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2758,
											"end": 2764,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2758,
											"end": 2764,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2774,
											"end": 2791,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2774,
											"end": 2791,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2774,
											"end": 2791,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2774,
											"end": 2791,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2774,
											"end": 2791,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2774,
											"end": 2791,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2774,
											"end": 2791,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2774,
											"end": 2791,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2774,
											"end": 2791,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2774,
											"end": 2791,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2806,
											"end": 2846,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2806,
											"end": 2846,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2758,
											"end": 2764,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2758,
											"end": 2764,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2758,
											"end": 2764,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2774,
											"end": 2791,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2758,
											"end": 2764,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2758,
											"end": 2764,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2806,
											"end": 2846,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2806,
											"end": 2846,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2739,
											"end": 2755,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2739,
											"end": 2755,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2806,
											"end": 2846,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2729,
											"end": 2853,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2666,
											"end": 2853,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2666,
											"end": 2853,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "tag",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10895,
											"end": 10914,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10895,
											"end": 10914,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6695,
											"end": 6697,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6677,
											"end": 6698,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6734,
											"end": 6736,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 6714,
											"end": 6732,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6714,
											"end": 6732,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6714,
											"end": 6732,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6707,
											"end": 6737,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6773,
											"end": 6807,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 6753,
											"end": 6771,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 6753,
											"end": 6771,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6753,
											"end": 6771,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6746,
											"end": 6808,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6824,
											"end": 6842,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 6824,
											"end": 6842,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6824,
											"end": 6842,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6817,
											"end": 6851,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6868,
											"end": 6887,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 6868,
											"end": 6887,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 6493,
											"end": 6893,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "tag",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10973,
											"end": 10994,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10973,
											"end": 10994,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7100,
											"end": 7102,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7082,
											"end": 7103,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7139,
											"end": 7141,
											"name": "PUSH",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 7119,
											"end": 7137,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 7119,
											"end": 7137,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7119,
											"end": 7137,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7112,
											"end": 7142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7178,
											"end": 7212,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 7158,
											"end": 7176,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 7158,
											"end": 7176,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7158,
											"end": 7176,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7151,
											"end": 7213,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7229,
											"end": 7247,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 7229,
											"end": 7247,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7229,
											"end": 7247,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7222,
											"end": 7254,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7271,
											"end": 7290,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 7271,
											"end": 7290,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 6898,
											"end": 7296,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "tag",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11055,
											"name": "PUSH",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11080,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11080,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11044,
											"end": 11080,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2845,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2820,
											"end": 2845,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2820,
											"end": 2845,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2793,
											"end": 2811,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10794,
											"end": 11134,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "tag",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11515,
											"end": 11539,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "185"
										},
										{
											"begin": 11552,
											"end": 11557,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11559,
											"end": 11566,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11542,
											"end": 11551,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 11542,
											"end": 11567,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "tag",
											"source": 2,
											"value": "185"
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11515,
											"end": 11567,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11515,
											"end": 11567,
											"name": "POP",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11581,
											"end": 11597,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11581,
											"end": 11618,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 11577,
											"end": 11820,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 11577,
											"end": 11820,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11662,
											"end": 11668,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11642,
											"end": 11658,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11642,
											"end": 11668,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 11642,
											"end": 11668,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "187"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7503,
											"end": 7505,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7485,
											"end": 7506,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7542,
											"end": 7544,
											"name": "PUSH",
											"source": 9,
											"value": "1D"
										},
										{
											"begin": 7522,
											"end": 7540,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 7522,
											"end": 7540,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7522,
											"end": 7540,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7515,
											"end": 7545,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7581,
											"end": 7612,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 7561,
											"end": 7579,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 7561,
											"end": 7579,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7561,
											"end": 7579,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7554,
											"end": 7613,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7630,
											"end": 7648,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 7630,
											"end": 7648,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7301,
											"end": 7654,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "tag",
											"source": 2,
											"value": "187"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11744,
											"end": 11795,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 11753,
											"end": 11758,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11760,
											"end": 11767,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11788,
											"end": 11794,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11769,
											"end": 11785,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11769,
											"end": 11794,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11744,
											"end": 11752,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 11744,
											"end": 11795,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7793,
											"end": 8581,
											"name": "tag",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 7793,
											"end": 8581,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7889,
											"end": 7907,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7889,
											"end": 7907,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "192"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7861,
											"end": 7863,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7843,
											"end": 7864,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7900,
											"end": 7902,
											"name": "PUSH",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 7880,
											"end": 7898,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 7880,
											"end": 7898,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7880,
											"end": 7898,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7873,
											"end": 7903,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7939,
											"end": 7973,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 7919,
											"end": 7937,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 7919,
											"end": 7937,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7919,
											"end": 7937,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7912,
											"end": 7974,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7990,
											"end": 8008,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 7990,
											"end": 8008,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7990,
											"end": 8008,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7983,
											"end": 8018,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8035,
											"end": 8054,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 8035,
											"end": 8054,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7659,
											"end": 8060,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "tag",
											"source": 2,
											"value": "192"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7967,
											"end": 7983,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7967,
											"end": 7983,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "195"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8267,
											"end": 8269,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8249,
											"end": 8270,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8306,
											"end": 8308,
											"name": "PUSH",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 8286,
											"end": 8304,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 8286,
											"end": 8304,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8286,
											"end": 8304,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8279,
											"end": 8309,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8345,
											"end": 8379,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 8325,
											"end": 8343,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 8325,
											"end": 8343,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8325,
											"end": 8343,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8318,
											"end": 8380,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8396,
											"end": 8414,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 8396,
											"end": 8414,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8396,
											"end": 8414,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8389,
											"end": 8422,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8439,
											"end": 8458,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 8439,
											"end": 8458,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 8065,
											"end": 8464,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "tag",
											"source": 2,
											"value": "195"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8083,
											"end": 8102,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8105,
											"end": 8114,
											"name": "PUSH",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "200"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8671,
											"end": 8673,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8653,
											"end": 8674,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8710,
											"end": 8712,
											"name": "PUSH",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 8690,
											"end": 8708,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 8690,
											"end": 8708,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8690,
											"end": 8708,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8683,
											"end": 8713,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8749,
											"end": 8783,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 8729,
											"end": 8747,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 8729,
											"end": 8747,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8729,
											"end": 8747,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8722,
											"end": 8784,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8800,
											"end": 8818,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 8800,
											"end": 8818,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8800,
											"end": 8818,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8793,
											"end": 8829,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8846,
											"end": 8865,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 8846,
											"end": 8865,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 8469,
											"end": 8871,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "tag",
											"source": 2,
											"value": "200"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8245,
											"name": "PUSH",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8254,
											"end": 8274,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8254,
											"end": 8274,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8254,
											"end": 8274,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8274,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8274,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "203"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8268,
											"end": 8274,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2845,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2820,
											"end": 2845,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2808,
											"end": 2810,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2793,
											"end": 2811,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2793,
											"end": 2811,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2674,
											"end": 2851,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "tag",
											"source": 2,
											"value": "203"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 8537,
											"end": 8574,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 2271,
											"end": 2430,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1599,
											"end": 1729,
											"name": "tag",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 1599,
											"end": 1729,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1662,
											"end": 1685,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9078,
											"end": 9080,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9060,
											"end": 9081,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9060,
											"end": 9081,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9060,
											"end": 9081,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9097,
											"end": 9115,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 9097,
											"end": 9115,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9097,
											"end": 9115,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9090,
											"end": 9120,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9156,
											"end": 9190,
											"name": "PUSH",
											"source": 9,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 9136,
											"end": 9154,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 9136,
											"end": 9154,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9136,
											"end": 9154,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9129,
											"end": 9191,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9208,
											"end": 9226,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 9208,
											"end": 9226,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 8876,
											"end": 9232,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8857,
											"end": 9392,
											"name": "tag",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 8857,
											"end": 9392,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8940,
											"end": 8961,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8940,
											"end": 8961,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "213"
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9439,
											"end": 9441,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9421,
											"end": 9442,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9478,
											"end": 9480,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 9458,
											"end": 9476,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 9458,
											"end": 9476,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9458,
											"end": 9476,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9451,
											"end": 9481,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9517,
											"end": 9550,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A206D696E7420746F20746865207A65726F206164647265737300"
										},
										{
											"begin": 9497,
											"end": 9515,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 9497,
											"end": 9515,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9497,
											"end": 9515,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9490,
											"end": 9551,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9568,
											"end": 9586,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 9568,
											"end": 9586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 9237,
											"end": 9592,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "tag",
											"source": 2,
											"value": "213"
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9084,
											"end": 9090,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9068,
											"end": 9080,
											"name": "PUSH",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 9068,
											"end": 9080,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "217"
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 9068,
											"end": 9090,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "tag",
											"source": 2,
											"value": "217"
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9236,
											"end": 9245,
											"name": "PUSH",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9236,
											"end": 9264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9236,
											"end": 9264,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9236,
											"end": 9264,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 9236,
											"end": 9264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9236,
											"end": 9264,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9236,
											"end": 9264,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2845,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2820,
											"end": 2845,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2820,
											"end": 2845,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2793,
											"end": 2811,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 539,
											"end": 642,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 539,
											"end": 642,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 539,
											"end": 642,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2271,
											"end": 2430,
											"name": "tag",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 2271,
											"end": 2430,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "221"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "170"
										},
										{
											"begin": 5366,
											"end": 5435,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "tag",
											"source": 1,
											"value": "221"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2383,
											"end": 2388,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2383,
											"end": 2396,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "224"
										},
										{
											"begin": 2391,
											"end": 2396,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2383,
											"end": 2388,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2383,
											"end": 2396,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "225"
										},
										{
											"begin": 2383,
											"end": 2396,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2383,
											"end": 2396,
											"modifierDepth": 1,
											"name": "tag",
											"source": 2,
											"value": "224"
										},
										{
											"begin": 2383,
											"end": 2396,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2406,
											"end": 2413,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 2406,
											"end": 2423,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "226"
										},
										{
											"begin": 2416,
											"end": 2423,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2406,
											"end": 2413,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2406,
											"end": 2423,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "225"
										},
										{
											"begin": 2406,
											"end": 2423,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2406,
											"end": 2423,
											"modifierDepth": 1,
											"name": "tag",
											"source": 2,
											"value": "226"
										},
										{
											"begin": 2406,
											"end": 2423,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2406,
											"end": 2423,
											"modifierDepth": 1,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2271,
											"end": 2430,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2271,
											"end": 2430,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2271,
											"end": 2430,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 14,
											"end": 562,
											"name": "tag",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 14,
											"end": 562,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 157,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 184,
											"end": 186,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 173,
											"end": 182,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 166,
											"end": 187,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 216,
											"end": 222,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 210,
											"end": 223,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 259,
											"end": 265,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 254,
											"end": 256,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 243,
											"end": 252,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 239,
											"end": 257,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 232,
											"end": 266,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 284,
											"end": 285,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 308,
											"end": 314,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 305,
											"end": 306,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 302,
											"end": 315,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 294,
											"end": 434,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "239"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 403,
											"end": 417,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 399,
											"end": 422,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 399,
											"end": 422,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 369,
											"end": 386,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 388,
											"end": 390,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 391,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 358,
											"end": 424,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 323,
											"end": 333,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 323,
											"end": 333,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 9,
											"value": "239"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 298,
											"end": 301,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 483,
											"end": 484,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 478,
											"end": 480,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 469,
											"end": 475,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 458,
											"end": 467,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 454,
											"end": 476,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 450,
											"end": 481,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 443,
											"end": 485,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 553,
											"end": 555,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 546,
											"end": 548,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 542,
											"end": 549,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 537,
											"end": 539,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 529,
											"end": 535,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 525,
											"end": 540,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 521,
											"end": 550,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 510,
											"end": 519,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 506,
											"end": 551,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 502,
											"end": 556,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 494,
											"end": 556,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 494,
											"end": 556,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 494,
											"end": 556,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 494,
											"end": 556,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14,
											"end": 562,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 14,
											"end": 562,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 14,
											"end": 562,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14,
											"end": 562,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14,
											"end": 562,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 567,
											"end": 694,
											"name": "tag",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 567,
											"end": 694,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 628,
											"end": 638,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 623,
											"end": 626,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 619,
											"end": 639,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 616,
											"end": 617,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 609,
											"end": 640,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 659,
											"end": 663,
											"name": "PUSH",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 656,
											"end": 657,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 649,
											"end": 664,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 683,
											"end": 687,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 680,
											"end": 681,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 673,
											"end": 688,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 699,
											"end": 1418,
											"name": "tag",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 699,
											"end": 1418,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 742,
											"end": 747,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 795,
											"end": 798,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 788,
											"end": 792,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 780,
											"end": 786,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 776,
											"end": 793,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 772,
											"end": 799,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 762,
											"end": 817,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "242"
										},
										{
											"begin": 762,
											"end": 817,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 813,
											"end": 814,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 810,
											"end": 811,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 803,
											"end": 815,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 762,
											"end": 817,
											"name": "tag",
											"source": 9,
											"value": "242"
										},
										{
											"begin": 762,
											"end": 817,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 849,
											"end": 855,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 836,
											"end": 856,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 875,
											"end": 893,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 914,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 908,
											"end": 910,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 905,
											"end": 915,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 902,
											"end": 938,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 902,
											"end": 938,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "244"
										},
										{
											"begin": 902,
											"end": 938,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 918,
											"end": 936,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "244"
										},
										{
											"begin": 918,
											"end": 936,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 918,
											"end": 936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 918,
											"end": 936,
											"name": "tag",
											"source": 9,
											"value": "244"
										},
										{
											"begin": 918,
											"end": 936,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 993,
											"end": 995,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 987,
											"end": 996,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 961,
											"end": 963,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 1047,
											"end": 1060,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1047,
											"end": 1060,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1043,
											"end": 1065,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1043,
											"end": 1065,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1043,
											"end": 1065,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1067,
											"end": 1069,
											"name": "PUSH",
											"source": 9,
											"value": "3F"
										},
										{
											"begin": 1039,
											"end": 1070,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1035,
											"end": 1075,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1023,
											"end": 1076,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1023,
											"end": 1076,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1023,
											"end": 1076,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1091,
											"end": 1109,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1091,
											"end": 1109,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1091,
											"end": 1109,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 1111,
											"end": 1133,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1111,
											"end": 1133,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1111,
											"end": 1133,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 1088,
											"end": 1134,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 1085,
											"end": 1157,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1085,
											"end": 1157,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "246"
										},
										{
											"begin": 1085,
											"end": 1157,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1137,
											"end": 1155,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "246"
										},
										{
											"begin": 1137,
											"end": 1155,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 1137,
											"end": 1155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1137,
											"end": 1155,
											"name": "tag",
											"source": 9,
											"value": "246"
										},
										{
											"begin": 1137,
											"end": 1155,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1177,
											"end": 1187,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1173,
											"end": 1175,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1166,
											"end": 1188,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1204,
											"end": 1210,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1197,
											"end": 1215,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1258,
											"end": 1261,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1251,
											"end": 1255,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1246,
											"end": 1248,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1238,
											"end": 1244,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 1234,
											"end": 1249,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1230,
											"end": 1256,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1227,
											"end": 1262,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 1224,
											"end": 1279,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1224,
											"end": 1279,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "247"
										},
										{
											"begin": 1224,
											"end": 1279,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1275,
											"end": 1276,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1272,
											"end": 1273,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1265,
											"end": 1277,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1224,
											"end": 1279,
											"name": "tag",
											"source": 9,
											"value": "247"
										},
										{
											"begin": 1224,
											"end": 1279,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1339,
											"end": 1341,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1332,
											"end": 1336,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1324,
											"end": 1330,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 1320,
											"end": 1337,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1313,
											"end": 1317,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1305,
											"end": 1311,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1301,
											"end": 1318,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1288,
											"end": 1342,
											"name": "CALLDATACOPY",
											"source": 9
										},
										{
											"begin": 1386,
											"end": 1387,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1379,
											"end": 1383,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1374,
											"end": 1376,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1372,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 1377,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1358,
											"end": 1384,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1351,
											"end": 1388,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1406,
											"end": 1412,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1397,
											"end": 1412,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 1397,
											"end": 1412,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1397,
											"end": 1412,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1397,
											"end": 1412,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1397,
											"end": 1412,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1397,
											"end": 1412,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 699,
											"end": 1418,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 699,
											"end": 1418,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 699,
											"end": 1418,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 699,
											"end": 1418,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 699,
											"end": 1418,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1423,
											"end": 1596,
											"name": "tag",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 1423,
											"end": 1596,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1491,
											"end": 1511,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1491,
											"end": 1511,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1540,
											"end": 1571,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1540,
											"end": 1571,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1530,
											"end": 1572,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1530,
											"end": 1572,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1520,
											"end": 1590,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "249"
										},
										{
											"begin": 1520,
											"end": 1590,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1586,
											"end": 1587,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1583,
											"end": 1584,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1576,
											"end": 1588,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1520,
											"end": 1590,
											"name": "tag",
											"source": 9,
											"value": "249"
										},
										{
											"begin": 1520,
											"end": 1590,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1423,
											"end": 1596,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1423,
											"end": 1596,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1423,
											"end": 1596,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1423,
											"end": 1596,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1601,
											"end": 2218,
											"name": "tag",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 1601,
											"end": 2218,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1698,
											"end": 1704,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1706,
											"end": 1712,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1714,
											"end": 1720,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1767,
											"end": 1769,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 1755,
											"end": 1764,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1746,
											"end": 1753,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1742,
											"end": 1765,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1738,
											"end": 1770,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1735,
											"end": 1787,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1735,
											"end": 1787,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "251"
										},
										{
											"begin": 1735,
											"end": 1787,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1783,
											"end": 1784,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1780,
											"end": 1781,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1773,
											"end": 1785,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1735,
											"end": 1787,
											"name": "tag",
											"source": 9,
											"value": "251"
										},
										{
											"begin": 1735,
											"end": 1787,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1823,
											"end": 1832,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1833,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1852,
											"end": 1870,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1893,
											"end": 1895,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1885,
											"end": 1891,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1882,
											"end": 1896,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 1879,
											"end": 1913,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1879,
											"end": 1913,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "252"
										},
										{
											"begin": 1879,
											"end": 1913,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1909,
											"end": 1910,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1906,
											"end": 1907,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1899,
											"end": 1911,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1879,
											"end": 1913,
											"name": "tag",
											"source": 9,
											"value": "252"
										},
										{
											"begin": 1879,
											"end": 1913,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1932,
											"end": 1982,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "253"
										},
										{
											"begin": 1974,
											"end": 1981,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 1965,
											"end": 1971,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1954,
											"end": 1963,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 1950,
											"end": 1972,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1932,
											"end": 1982,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 1932,
											"end": 1982,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1932,
											"end": 1982,
											"name": "tag",
											"source": 9,
											"value": "253"
										},
										{
											"begin": 1932,
											"end": 1982,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1922,
											"end": 1982,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 1922,
											"end": 1982,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2035,
											"end": 2037,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2024,
											"end": 2033,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2020,
											"end": 2038,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2007,
											"end": 2039,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1991,
											"end": 2039,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1991,
											"end": 2039,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2064,
											"end": 2066,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2054,
											"end": 2062,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2051,
											"end": 2067,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2084,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2084,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "254"
										},
										{
											"begin": 2048,
											"end": 2084,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2080,
											"end": 2081,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2077,
											"end": 2078,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2070,
											"end": 2082,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2084,
											"name": "tag",
											"source": 9,
											"value": "254"
										},
										{
											"begin": 2048,
											"end": 2084,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2048,
											"end": 2084,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2103,
											"end": 2155,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "255"
										},
										{
											"begin": 2147,
											"end": 2154,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2136,
											"end": 2144,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2125,
											"end": 2134,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2121,
											"end": 2145,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2103,
											"end": 2155,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 2103,
											"end": 2155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2103,
											"end": 2155,
											"name": "tag",
											"source": 9,
											"value": "255"
										},
										{
											"begin": 2103,
											"end": 2155,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2093,
											"end": 2155,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2093,
											"end": 2155,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2093,
											"end": 2155,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2174,
											"end": 2212,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "256"
										},
										{
											"begin": 2208,
											"end": 2210,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2197,
											"end": 2206,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2193,
											"end": 2211,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2174,
											"end": 2212,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 2174,
											"end": 2212,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2174,
											"end": 2212,
											"name": "tag",
											"source": 9,
											"value": "256"
										},
										{
											"begin": 2174,
											"end": 2212,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2164,
											"end": 2212,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2164,
											"end": 2212,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1601,
											"end": 2218,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1601,
											"end": 2218,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1601,
											"end": 2218,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1601,
											"end": 2218,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1601,
											"end": 2218,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1601,
											"end": 2218,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2223,
											"end": 2477,
											"name": "tag",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 2223,
											"end": 2477,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2291,
											"end": 2297,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2299,
											"end": 2305,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2352,
											"end": 2354,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2340,
											"end": 2349,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2331,
											"end": 2338,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2327,
											"end": 2350,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2323,
											"end": 2355,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 2320,
											"end": 2372,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2320,
											"end": 2372,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "258"
										},
										{
											"begin": 2320,
											"end": 2372,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2368,
											"end": 2369,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2365,
											"end": 2366,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2358,
											"end": 2370,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2320,
											"end": 2372,
											"name": "tag",
											"source": 9,
											"value": "258"
										},
										{
											"begin": 2320,
											"end": 2372,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2391,
											"end": 2420,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "259"
										},
										{
											"begin": 2410,
											"end": 2419,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2391,
											"end": 2420,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 2391,
											"end": 2420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2391,
											"end": 2420,
											"name": "tag",
											"source": 9,
											"value": "259"
										},
										{
											"begin": 2391,
											"end": 2420,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2381,
											"end": 2420,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 2467,
											"end": 2469,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2452,
											"end": 2470,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2452,
											"end": 2470,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2452,
											"end": 2470,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2452,
											"end": 2470,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2439,
											"end": 2471,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 2439,
											"end": 2471,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2223,
											"end": 2477,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2856,
											"end": 3184,
											"name": "tag",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 2856,
											"end": 3184,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2933,
											"end": 2939,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2941,
											"end": 2947,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2949,
											"end": 2955,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3002,
											"end": 3004,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2990,
											"end": 2999,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2981,
											"end": 2988,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2977,
											"end": 3000,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2973,
											"end": 3005,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 2970,
											"end": 3022,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2970,
											"end": 3022,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "263"
										},
										{
											"begin": 2970,
											"end": 3022,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3018,
											"end": 3019,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3015,
											"end": 3016,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3008,
											"end": 3020,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2970,
											"end": 3022,
											"name": "tag",
											"source": 9,
											"value": "263"
										},
										{
											"begin": 2970,
											"end": 3022,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3041,
											"end": 3070,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "264"
										},
										{
											"begin": 3060,
											"end": 3069,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3041,
											"end": 3070,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 3041,
											"end": 3070,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3041,
											"end": 3070,
											"name": "tag",
											"source": 9,
											"value": "264"
										},
										{
											"begin": 3041,
											"end": 3070,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3031,
											"end": 3070,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3031,
											"end": 3070,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3089,
											"end": 3127,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "265"
										},
										{
											"begin": 3123,
											"end": 3125,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3112,
											"end": 3121,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3089,
											"end": 3127,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 3089,
											"end": 3127,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3089,
											"end": 3127,
											"name": "tag",
											"source": 9,
											"value": "265"
										},
										{
											"begin": 3089,
											"end": 3127,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3079,
											"end": 3127,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3079,
											"end": 3127,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3174,
											"end": 3176,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3163,
											"end": 3172,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3159,
											"end": 3177,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3146,
											"end": 3178,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 3136,
											"end": 3178,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3136,
											"end": 3178,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2856,
											"end": 3184,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2856,
											"end": 3184,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2856,
											"end": 3184,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2856,
											"end": 3184,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2856,
											"end": 3184,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2856,
											"end": 3184,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3378,
											"end": 3564,
											"name": "tag",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 3378,
											"end": 3564,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3437,
											"end": 3443,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3490,
											"end": 3492,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3478,
											"end": 3487,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3469,
											"end": 3476,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3465,
											"end": 3488,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3461,
											"end": 3493,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 3458,
											"end": 3510,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3458,
											"end": 3510,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "268"
										},
										{
											"begin": 3458,
											"end": 3510,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3506,
											"end": 3507,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3503,
											"end": 3504,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3458,
											"end": 3510,
											"name": "tag",
											"source": 9,
											"value": "268"
										},
										{
											"begin": 3458,
											"end": 3510,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3529,
											"end": 3558,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "269"
										},
										{
											"begin": 3548,
											"end": 3557,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3529,
											"end": 3558,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 3529,
											"end": 3558,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3529,
											"end": 3558,
											"name": "tag",
											"source": 9,
											"value": "269"
										},
										{
											"begin": 3529,
											"end": 3558,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3519,
											"end": 3558,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 3378,
											"end": 3564,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3378,
											"end": 3564,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3777,
											"end": 4037,
											"name": "tag",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3777,
											"end": 4037,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3845,
											"end": 3851,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3853,
											"end": 3859,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3908,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3894,
											"end": 3903,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3885,
											"end": 3892,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3881,
											"end": 3904,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3877,
											"end": 3909,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 3874,
											"end": 3926,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3874,
											"end": 3926,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "272"
										},
										{
											"begin": 3874,
											"end": 3926,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3922,
											"end": 3923,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3919,
											"end": 3920,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3912,
											"end": 3924,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3874,
											"end": 3926,
											"name": "tag",
											"source": 9,
											"value": "272"
										},
										{
											"begin": 3874,
											"end": 3926,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3945,
											"end": 3974,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "273"
										},
										{
											"begin": 3964,
											"end": 3973,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3945,
											"end": 3974,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 3945,
											"end": 3974,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3945,
											"end": 3974,
											"name": "tag",
											"source": 9,
											"value": "273"
										},
										{
											"begin": 3945,
											"end": 3974,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3935,
											"end": 3974,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3935,
											"end": 3974,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3993,
											"end": 4031,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "274"
										},
										{
											"begin": 4027,
											"end": 4029,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4016,
											"end": 4025,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4012,
											"end": 4030,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3993,
											"end": 4031,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 3993,
											"end": 4031,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3993,
											"end": 4031,
											"name": "tag",
											"source": 9,
											"value": "274"
										},
										{
											"begin": 3993,
											"end": 4031,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3983,
											"end": 4031,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3983,
											"end": 4031,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3777,
											"end": 4037,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3777,
											"end": 4037,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3777,
											"end": 4037,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3777,
											"end": 4037,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3777,
											"end": 4037,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3777,
											"end": 4037,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4042,
											"end": 4422,
											"name": "tag",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 4042,
											"end": 4422,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4121,
											"end": 4122,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 4117,
											"end": 4129,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4117,
											"end": 4129,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4117,
											"end": 4129,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 4117,
											"end": 4129,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4164,
											"end": 4176,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4164,
											"end": 4176,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4164,
											"end": 4176,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4185,
											"end": 4246,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "276"
										},
										{
											"begin": 4185,
											"end": 4246,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4239,
											"end": 4243,
											"name": "PUSH",
											"source": 9,
											"value": "7F"
										},
										{
											"begin": 4231,
											"end": 4237,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4227,
											"end": 4244,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4217,
											"end": 4244,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4217,
											"end": 4244,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4185,
											"end": 4246,
											"name": "tag",
											"source": 9,
											"value": "276"
										},
										{
											"begin": 4185,
											"end": 4246,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4292,
											"end": 4294,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4284,
											"end": 4290,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4281,
											"end": 4295,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 4261,
											"end": 4279,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4258,
											"end": 4296,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4255,
											"end": 4416,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "277"
										},
										{
											"begin": 4255,
											"end": 4416,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4338,
											"end": 4348,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 4333,
											"end": 4336,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 4329,
											"end": 4349,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 4326,
											"end": 4327,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4319,
											"end": 4350,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4373,
											"end": 4377,
											"name": "PUSH",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 4370,
											"end": 4371,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4363,
											"end": 4378,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4401,
											"end": 4405,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 4398,
											"end": 4399,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4391,
											"end": 4406,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4255,
											"end": 4416,
											"name": "tag",
											"source": 9,
											"value": "277"
										},
										{
											"begin": 4255,
											"end": 4416,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4255,
											"end": 4416,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4042,
											"end": 4422,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4042,
											"end": 4422,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4042,
											"end": 4422,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4042,
											"end": 4422,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5041,
											"end": 5263,
											"name": "tag",
											"source": 9,
											"value": "129"
										},
										{
											"begin": 5041,
											"end": 5263,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5106,
											"end": 5115,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5106,
											"end": 5115,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5106,
											"end": 5115,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5127,
											"end": 5137,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5127,
											"end": 5137,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5127,
											"end": 5137,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 5124,
											"end": 5257,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5124,
											"end": 5257,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 5124,
											"end": 5257,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5179,
											"end": 5189,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 5174,
											"end": 5177,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 5170,
											"end": 5190,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5168,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5160,
											"end": 5191,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5214,
											"end": 5218,
											"name": "PUSH",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 5211,
											"end": 5212,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5204,
											"end": 5219,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5242,
											"end": 5246,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 5239,
											"end": 5240,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5232,
											"end": 5247,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 6081,
											"end": 6488,
											"name": "tag",
											"source": 9,
											"value": "170"
										},
										{
											"begin": 6081,
											"end": 6488,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6283,
											"end": 6285,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6265,
											"end": 6286,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6265,
											"end": 6286,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6265,
											"end": 6286,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6322,
											"end": 6324,
											"name": "PUSH",
											"source": 9,
											"value": "2B"
										},
										{
											"begin": 6302,
											"end": 6320,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6302,
											"end": 6320,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6302,
											"end": 6320,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6295,
											"end": 6325,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6361,
											"end": 6395,
											"name": "PUSH",
											"source": 9,
											"value": "496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069"
										},
										{
											"begin": 6356,
											"end": 6358,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6341,
											"end": 6359,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6341,
											"end": 6359,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6334,
											"end": 6396,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6E697469616C697A696E67"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6427,
											"end": 6429,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 6412,
											"end": 6430,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6412,
											"end": 6430,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6405,
											"end": 6446,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6478,
											"end": 6481,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 6463,
											"end": 6482,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6463,
											"end": 6482,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6081,
											"end": 6488,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9723,
											"end": 10268,
											"name": "tag",
											"source": 9,
											"value": "233"
										},
										{
											"begin": 9723,
											"end": 10268,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9825,
											"end": 9827,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 9820,
											"end": 9823,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9817,
											"end": 9828,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 9814,
											"end": 10262,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 9814,
											"end": 10262,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "226"
										},
										{
											"begin": 9814,
											"end": 10262,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 9861,
											"end": 9862,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9886,
											"end": 9891,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9882,
											"end": 9884,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9875,
											"end": 9892,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9931,
											"end": 9935,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9927,
											"end": 9929,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9917,
											"end": 9936,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 10001,
											"end": 10003,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 9989,
											"end": 9999,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 9985,
											"end": 10004,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9982,
											"end": 9983,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 9978,
											"end": 10005,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 9972,
											"end": 9976,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9968,
											"end": 10006,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10037,
											"end": 10041,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10025,
											"end": 10035,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 10022,
											"end": 10042,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10019,
											"end": 10066,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 10019,
											"end": 10066,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "296"
										},
										{
											"begin": 10019,
											"end": 10066,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10060,
											"end": 10064,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10019,
											"end": 10066,
											"name": "tag",
											"source": 9,
											"value": "296"
										},
										{
											"begin": 10019,
											"end": 10066,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10115,
											"end": 10117,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 10110,
											"end": 10113,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 10106,
											"end": 10118,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10103,
											"end": 10104,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 10099,
											"end": 10119,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 10093,
											"end": 10097,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10089,
											"end": 10120,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10079,
											"end": 10120,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10079,
											"end": 10120,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10170,
											"end": 10252,
											"name": "tag",
											"source": 9,
											"value": "297"
										},
										{
											"begin": 10170,
											"end": 10252,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10188,
											"end": 10190,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10181,
											"end": 10186,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10178,
											"end": 10191,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10170,
											"end": 10252,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 10170,
											"end": 10252,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "299"
										},
										{
											"begin": 10170,
											"end": 10252,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10233,
											"end": 10250,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10233,
											"end": 10250,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10233,
											"end": 10250,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 10214,
											"end": 10215,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 10203,
											"end": 10216,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10170,
											"end": 10252,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "297"
										},
										{
											"begin": 10170,
											"end": 10252,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10170,
											"end": 10252,
											"name": "tag",
											"source": 9,
											"value": "299"
										},
										{
											"begin": 10170,
											"end": 10252,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10174,
											"end": 10177,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10174,
											"end": 10177,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10174,
											"end": 10177,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9723,
											"end": 10268,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9723,
											"end": 10268,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9723,
											"end": 10268,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9723,
											"end": 10268,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10444,
											"end": 11796,
											"name": "tag",
											"source": 9,
											"value": "225"
										},
										{
											"begin": 10444,
											"end": 11796,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10570,
											"end": 10573,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10564,
											"end": 10574,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 10597,
											"end": 10615,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10589,
											"end": 10595,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10586,
											"end": 10616,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 10583,
											"end": 10639,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 10583,
											"end": 10639,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "303"
										},
										{
											"begin": 10583,
											"end": 10639,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10619,
											"end": 10637,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "303"
										},
										{
											"begin": 10619,
											"end": 10637,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 10619,
											"end": 10637,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10619,
											"end": 10637,
											"name": "tag",
											"source": 9,
											"value": "303"
										},
										{
											"begin": 10619,
											"end": 10637,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10648,
											"end": 10745,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "304"
										},
										{
											"begin": 10738,
											"end": 10744,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10698,
											"end": 10736,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "305"
										},
										{
											"begin": 10730,
											"end": 10734,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 10724,
											"end": 10735,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10698,
											"end": 10736,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 10698,
											"end": 10736,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10698,
											"end": 10736,
											"name": "tag",
											"source": 9,
											"value": "305"
										},
										{
											"begin": 10698,
											"end": 10736,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10692,
											"end": 10696,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 10648,
											"end": 10745,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "233"
										},
										{
											"begin": 10648,
											"end": 10745,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10648,
											"end": 10745,
											"name": "tag",
											"source": 9,
											"value": "304"
										},
										{
											"begin": 10648,
											"end": 10745,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10800,
											"end": 10804,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10800,
											"end": 10804,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10864,
											"end": 10866,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 10853,
											"end": 10867,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10853,
											"end": 10867,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 10881,
											"end": 10882,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 10876,
											"end": 11539,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10876,
											"end": 11539,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 10876,
											"end": 11539,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "307"
										},
										{
											"begin": 10876,
											"end": 11539,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 11583,
											"end": 11584,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 11600,
											"end": 11606,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11597,
											"end": 11686,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 11597,
											"end": 11686,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "308"
										},
										{
											"begin": 11597,
											"end": 11686,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11652,
											"end": 11671,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 11652,
											"end": 11671,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 11652,
											"end": 11671,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11646,
											"end": 11672,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 11597,
											"end": 11686,
											"name": "tag",
											"source": 9,
											"value": "308"
										},
										{
											"begin": 11597,
											"end": 11686,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10401,
											"end": 10402,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 10397,
											"end": 10408,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 10397,
											"end": 10408,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10397,
											"end": 10408,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 10393,
											"end": 10417,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 10389,
											"end": 10418,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 10379,
											"end": 10419,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10425,
											"end": 10426,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 10421,
											"end": 10432,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 10421,
											"end": 10432,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10421,
											"end": 10432,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 10376,
											"end": 10433,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 11699,
											"end": 11780,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 11699,
											"end": 11780,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 10846,
											"end": 11790,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "299"
										},
										{
											"begin": 10846,
											"end": 11790,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10876,
											"end": 11539,
											"name": "tag",
											"source": 9,
											"value": "307"
										},
										{
											"begin": 10876,
											"end": 11539,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9670,
											"end": 9671,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9663,
											"end": 9677,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 9663,
											"end": 9677,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9663,
											"end": 9677,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9707,
											"end": 9711,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9694,
											"end": 9712,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9694,
											"end": 9712,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10912,
											"end": 10932,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 10912,
											"end": 10932,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10912,
											"end": 10932,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 11030,
											"end": 11266,
											"name": "tag",
											"source": 9,
											"value": "311"
										},
										{
											"begin": 11030,
											"end": 11266,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11051,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11041,
											"end": 11042,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11038,
											"end": 11052,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 11030,
											"end": 11266,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 11030,
											"end": 11266,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "313"
										},
										{
											"begin": 11030,
											"end": 11266,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 11133,
											"end": 11152,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 11133,
											"end": 11152,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 11133,
											"end": 11152,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11127,
											"end": 11153,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 11112,
											"end": 11154,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11112,
											"end": 11154,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 11225,
											"end": 11252,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 11225,
											"end": 11252,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11225,
											"end": 11252,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11225,
											"end": 11252,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 11193,
											"end": 11194,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 11181,
											"end": 11195,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11181,
											"end": 11195,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 11181,
											"end": 11195,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11181,
											"end": 11195,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11060,
											"end": 11079,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11060,
											"end": 11079,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11030,
											"end": 11266,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "311"
										},
										{
											"begin": 11030,
											"end": 11266,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 11030,
											"end": 11266,
											"name": "tag",
											"source": 9,
											"value": "313"
										},
										{
											"begin": 11030,
											"end": 11266,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11034,
											"end": 11037,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 11294,
											"end": 11300,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 11285,
											"end": 11292,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11282,
											"end": 11301,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 11279,
											"end": 11480,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 11279,
											"end": 11480,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "314"
										},
										{
											"begin": 11279,
											"end": 11480,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 11355,
											"end": 11374,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 11355,
											"end": 11374,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 11355,
											"end": 11374,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11349,
											"end": 11375,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11438,
											"end": 11439,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 11434,
											"end": 11448,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 11434,
											"end": 11448,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11434,
											"end": 11448,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 11450,
											"end": 11453,
											"name": "PUSH",
											"source": 9,
											"value": "F8"
										},
										{
											"begin": 11430,
											"end": 11454,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 11426,
											"end": 11463,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 11422,
											"end": 11464,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 11407,
											"end": 11465,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 11392,
											"end": 11466,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11392,
											"end": 11466,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 11279,
											"end": 11480,
											"name": "tag",
											"source": 9,
											"value": "314"
										},
										{
											"begin": 11279,
											"end": 11480,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11526,
											"end": 11527,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 11510,
											"end": 11524,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11510,
											"end": 11524,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11510,
											"end": 11524,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 11506,
											"end": 11528,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11493,
											"end": 11529,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11493,
											"end": 11529,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10444,
											"end": 11796,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
								"src/project/IProjectToken.sol",
								"src/project/ProjectToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"initialize(string,string,address)": "077f224a",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/project/ProjectToken.sol\":\"ProjectToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99c8cb3cd19a44bbfb6612605affb7d8b06cee1f6aa9362a37a8672b4f7eeaf8\",\"dweb:/ipfs/QmasyxFDBUp7k5KFgfDWEzM8PYSKEq7GVznzMJ1VxVRF4B\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29d6a502187e88fdb4ac51319b6cfc82e7ba886a435480e229e5f838d2da55ee\",\"dweb:/ipfs/QmQNWKr3axXvQowZi31ydXRdeZ7UnE7oN8XAz9FCkx1JhN\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f\",\"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"src/project/IProjectToken.sol\":{\"keccak256\":\"0x924b067f02f30bf87b07028947fa2767d38b1ebeeada73fa04ff4b9f0589b402\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e6a7a14b42cf3165ac60c2c5390d463b319bd4ee64159464bd9f2c9cc47bc624\",\"dweb:/ipfs/QmU9Tkr9fsn3Dm3QZreMja4jeKRtYG3thx2kuV4sbCa2jE\"]},\"src/project/ProjectToken.sol\":{\"keccak256\":\"0x04f90bcf43fe4211e67039e3d107f4fd2d37d90b17d0ce2c9bde6403228fac2c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://52d6d17899106605ec6331598bd15b5d9e8b2678e56aa93eb1d2c5fa4d0b6f8c\",\"dweb:/ipfs/QmQfd9du32uUDsPCqiqimJutqyY2SsH8FyTPxHiJNCor4m\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "src/project/ProjectToken.sol:ProjectToken",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "src/project/ProjectToken.sol:ProjectToken",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1386,
								"contract": "src/project/ProjectToken.sol:ProjectToken",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "src/project/ProjectToken.sol:ProjectToken",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 130,
								"contract": "src/project/ProjectToken.sol:ProjectToken",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 319,
								"contract": "src/project/ProjectToken.sol:ProjectToken",
								"label": "_balances",
								"offset": 0,
								"slot": "101",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 325,
								"contract": "src/project/ProjectToken.sol:ProjectToken",
								"label": "_allowances",
								"offset": 0,
								"slot": "102",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 327,
								"contract": "src/project/ProjectToken.sol:ProjectToken",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "103",
								"type": "t_uint256"
							},
							{
								"astId": 329,
								"contract": "src/project/ProjectToken.sol:ProjectToken",
								"label": "_name",
								"offset": 0,
								"slot": "104",
								"type": "t_string_storage"
							},
							{
								"astId": 331,
								"contract": "src/project/ProjectToken.sol:ProjectToken",
								"label": "_symbol",
								"offset": 0,
								"slot": "105",
								"type": "t_string_storage"
							},
							{
								"astId": 911,
								"contract": "src/project/ProjectToken.sol:ProjectToken",
								"label": "__gap",
								"offset": 0,
								"slot": "106",
								"type": "t_array(t_uint256)45_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1345
						],
						"ContextUpgradeable": [
							1387
						],
						"Initializable": [
							300
						],
						"OwnableUpgradeable": [
							131
						]
					},
					"id": 132,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 132,
							"sourceUnit": 1388,
							"src": "127:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 132,
							"sourceUnit": 301,
							"src": "169:42:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Initializable",
										"nameLocations": [
											"748:13:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 300,
										"src": "748:13:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "748:13:0"
								},
								{
									"baseName": {
										"id": 7,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"763:18:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1387,
										"src": "763:18:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "763:18:0"
								}
							],
							"canonicalName": "OwnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "213:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 131,
							"linearizedBaseContracts": [
								131,
								1387,
								300
							],
							"name": "OwnableUpgradeable",
							"nameLocation": "726:18:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 10,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "804:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 131,
									"src": "788:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 9,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "788:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 16,
									"name": "OwnershipTransferred",
									"nameLocation": "823:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "860:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "844:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "844:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "891:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "875:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "875:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:57:0"
									},
									"src": "817:84:0"
								},
								{
									"body": {
										"id": 25,
										"nodeType": "Block",
										"src": "1055:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 22,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 37,
														"src": "1065:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1065:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "1065:26:0"
											}
										]
									},
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "907:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 26,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 20,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 19,
												"name": "onlyInitializing",
												"nameLocations": [
													"1038:16:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "1038:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1038:16:0"
										}
									],
									"name": "__Ownable_init",
									"nameLocation": "1012:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1026:2:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1055:0:0"
									},
									"scope": 131,
									"src": "1003:95:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 36,
										"nodeType": "Block",
										"src": "1166:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 32,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1372,
																"src": "1195:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 33,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1195:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 31,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "1176:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1176:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 35,
												"nodeType": "ExpressionStatement",
												"src": "1176:32:0"
											}
										]
									},
									"id": 37,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 29,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 28,
												"name": "onlyInitializing",
												"nameLocations": [
													"1149:16:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "1149:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1149:16:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nameLocation": "1113:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1137:2:0"
									},
									"returnParameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1166:0:0"
									},
									"scope": 131,
									"src": "1104:111:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 44,
										"nodeType": "Block",
										"src": "1324:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 40,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 68,
														"src": "1334:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 41,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1334:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 42,
												"nodeType": "ExpressionStatement",
												"src": "1334:13:0"
											},
											{
												"id": 43,
												"nodeType": "PlaceholderStatement",
												"src": "1357:1:0"
											}
										]
									},
									"documentation": {
										"id": 38,
										"nodeType": "StructuredDocumentation",
										"src": "1221:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 45,
									"name": "onlyOwner",
									"nameLocation": "1312:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1321:2:0"
									},
									"src": "1303:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1496:30:0",
										"statements": [
											{
												"expression": {
													"id": 51,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "1513:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 50,
												"id": 52,
												"nodeType": "Return",
												"src": "1506:13:0"
											}
										]
									},
									"documentation": {
										"id": 46,
										"nodeType": "StructuredDocumentation",
										"src": "1371:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1450:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1455:2:0"
									},
									"returnParameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1487:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1487:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1486:9:0"
									},
									"scope": 131,
									"src": "1441:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1644:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 63,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 59,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 54,
																	"src": "1662:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 60,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1662:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 61,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1372,
																	"src": "1673:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1673:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1662:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1687:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 58,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1654:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1654:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1654:68:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1532:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1608:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1619:2:0"
									},
									"returnParameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1644:0:0"
									},
									"scope": 131,
									"src": "1599:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 81,
										"nodeType": "Block",
										"src": "2118:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 77,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2155:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 76,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2147:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 75,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2147:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 78,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2147:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 74,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "2128:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 79,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2128:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 80,
												"nodeType": "ExpressionStatement",
												"src": "2128:30:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1735:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 82,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 72,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 71,
												"name": "onlyOwner",
												"nameLocations": [
													"2108:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "2108:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2108:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2073:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2090:2:0"
									},
									"returnParameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2118:0:0"
									},
									"scope": 131,
									"src": "2064:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 104,
										"nodeType": "Block",
										"src": "2384:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 96,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 91,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 85,
																"src": "2402:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 94,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2422:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2414:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 92,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2414:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 95,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2414:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2402:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 97,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2426:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 90,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2394:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 98,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2394:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 99,
												"nodeType": "ExpressionStatement",
												"src": "2394:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 101,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 85,
															"src": "2496:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 100,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "2477:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2477:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 103,
												"nodeType": "ExpressionStatement",
												"src": "2477:28:0"
											}
										]
									},
									"documentation": {
										"id": 83,
										"nodeType": "StructuredDocumentation",
										"src": "2171:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 105,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2374:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "2374:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2374:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2323:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2349:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 105,
												"src": "2341:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 84,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2341:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2340:18:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2384:0:0"
									},
									"scope": 131,
									"src": "2314:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 124,
										"nodeType": "Block",
										"src": "2729:124:0",
										"statements": [
											{
												"assignments": [
													112
												],
												"declarations": [
													{
														"constant": false,
														"id": 112,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2747:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 124,
														"src": "2739:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 111,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2739:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 114,
												"initialValue": {
													"id": 113,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "2758:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2739:25:0"
											},
											{
												"expression": {
													"id": 117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 115,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2774:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 116,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 108,
														"src": "2783:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2774:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 118,
												"nodeType": "ExpressionStatement",
												"src": "2774:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 120,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 112,
															"src": "2827:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 121,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 108,
															"src": "2837:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 119,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "2806:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2806:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 123,
												"nodeType": "EmitStatement",
												"src": "2801:45:0"
											}
										]
									},
									"documentation": {
										"id": 106,
										"nodeType": "StructuredDocumentation",
										"src": "2518:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 125,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2675:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 108,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2702:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "2694:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2694:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2693:18:0"
									},
									"returnParameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2729:0:0"
									},
									"scope": 131,
									"src": "2666:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 126,
										"nodeType": "StructuredDocumentation",
										"src": "2859:254:0",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 130,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "3138:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 131,
									"src": "3118:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 127,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3118:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 129,
										"length": {
											"hexValue": "3439",
											"id": 128,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "3126:2:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "3118:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 132,
							"src": "708:2438:0",
							"usedErrors": []
						}
					],
					"src": "102:3045:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1345
						],
						"Initializable": [
							300
						]
					},
					"id": 301,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 133,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
							"file": "../../utils/AddressUpgradeable.sol",
							"id": 134,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 301,
							"sourceUnit": 1346,
							"src": "138:44:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 135,
								"nodeType": "StructuredDocumentation",
								"src": "184:2209:1",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 300,
							"linearizedBaseContracts": [
								300
							],
							"name": "Initializable",
							"nameLocation": "2412:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 136,
										"nodeType": "StructuredDocumentation",
										"src": "2432:109:1",
										"text": " @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"
									},
									"id": 138,
									"mutability": "mutable",
									"name": "_initialized",
									"nameLocation": "2560:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 300,
									"src": "2546:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 137,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "2546:5:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 139,
										"nodeType": "StructuredDocumentation",
										"src": "2579:91:1",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 141,
									"mutability": "mutable",
									"name": "_initializing",
									"nameLocation": "2688:13:1",
									"nodeType": "VariableDeclaration",
									"scope": 300,
									"src": "2675:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 140,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "2675:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 142,
										"nodeType": "StructuredDocumentation",
										"src": "2708:90:1",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"eventSelector": "7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498",
									"id": 146,
									"name": "Initialized",
									"nameLocation": "2809:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 144,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "2827:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2821:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 143,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2821:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2820:15:1"
									},
									"src": "2803:33:1"
								},
								{
									"body": {
										"id": 201,
										"nodeType": "Block",
										"src": "3269:483:1",
										"statements": [
											{
												"assignments": [
													150
												],
												"declarations": [
													{
														"constant": false,
														"id": 150,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "3284:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 201,
														"src": "3279:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 149,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3279:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 153,
												"initialValue": {
													"id": 152,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3301:14:1",
													"subExpression": {
														"id": 151,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "3302:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3279:36:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 174,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 159,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 155,
																			"name": "isTopLevelCall",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 150,
																			"src": "3347:14:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 158,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 156,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 138,
																				"src": "3365:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 157,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3380:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3365:16:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3347:34:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 160,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3346:36:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 172,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 168,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "3387:45:1",
																			"subExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"id": 165,
																								"name": "this",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967268,
																								"src": "3426:4:1",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_Initializable_$300",
																									"typeString": "contract Initializable"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_Initializable_$300",
																									"typeString": "contract Initializable"
																								}
																							],
																							"id": 164,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3418:7:1",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 163,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "3418:7:1",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 166,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3418:13:1",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"expression": {
																						"id": 161,
																						"name": "AddressUpgradeable",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1345,
																						"src": "3388:18:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$1345_$",
																							"typeString": "type(library AddressUpgradeable)"
																						}
																					},
																					"id": 162,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "3407:10:1",
																					"memberName": "isContract",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1033,
																					"src": "3388:29:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address) view returns (bool)"
																					}
																				},
																				"id": 167,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3388:44:1",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 171,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 169,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 138,
																				"src": "3436:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 170,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3452:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3436:17:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3387:66:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 173,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3386:68:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3346:108:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 175,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3468:48:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 154,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3325:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3325:201:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 177,
												"nodeType": "ExpressionStatement",
												"src": "3325:201:1"
											},
											{
												"expression": {
													"id": 180,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 178,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 138,
														"src": "3536:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 179,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3551:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3536:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 181,
												"nodeType": "ExpressionStatement",
												"src": "3536:16:1"
											},
											{
												"condition": {
													"id": 182,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 150,
													"src": "3566:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 188,
												"nodeType": "IfStatement",
												"src": "3562:65:1",
												"trueBody": {
													"id": 187,
													"nodeType": "Block",
													"src": "3582:45:1",
													"statements": [
														{
															"expression": {
																"id": 185,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 183,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 141,
																	"src": "3596:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 184,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3612:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3596:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 186,
															"nodeType": "ExpressionStatement",
															"src": "3596:20:1"
														}
													]
												}
											},
											{
												"id": 189,
												"nodeType": "PlaceholderStatement",
												"src": "3636:1:1"
											},
											{
												"condition": {
													"id": 190,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 150,
													"src": "3651:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 200,
												"nodeType": "IfStatement",
												"src": "3647:99:1",
												"trueBody": {
													"id": 199,
													"nodeType": "Block",
													"src": "3667:79:1",
													"statements": [
														{
															"expression": {
																"id": 193,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 191,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 141,
																	"src": "3681:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 192,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3697:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "3681:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 194,
															"nodeType": "ExpressionStatement",
															"src": "3681:21:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 196,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3733:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 195,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 146,
																	"src": "3721:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 197,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3721:14:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 198,
															"nodeType": "EmitStatement",
															"src": "3716:19:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 147,
										"nodeType": "StructuredDocumentation",
										"src": "2842:399:1",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."
									},
									"id": 202,
									"name": "initializer",
									"nameLocation": "3255:11:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3266:2:1"
									},
									"src": "3246:506:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 234,
										"nodeType": "Block",
										"src": "4863:255:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 213,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 209,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "4881:14:1",
																"subExpression": {
																	"id": 208,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 141,
																	"src": "4882:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 212,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 210,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 138,
																	"src": "4899:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 211,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 205,
																	"src": "4914:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "4899:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4881:40:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 214,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4923:48:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 207,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4873:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 215,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4873:99:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 216,
												"nodeType": "ExpressionStatement",
												"src": "4873:99:1"
											},
											{
												"expression": {
													"id": 219,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 217,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 138,
														"src": "4982:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 218,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 205,
														"src": "4997:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4982:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 220,
												"nodeType": "ExpressionStatement",
												"src": "4982:22:1"
											},
											{
												"expression": {
													"id": 223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 221,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "5014:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 222,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5030:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "5014:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 224,
												"nodeType": "ExpressionStatement",
												"src": "5014:20:1"
											},
											{
												"id": 225,
												"nodeType": "PlaceholderStatement",
												"src": "5044:1:1"
											},
											{
												"expression": {
													"id": 228,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 226,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "5055:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 227,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5071:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "5055:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 229,
												"nodeType": "ExpressionStatement",
												"src": "5055:21:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 231,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 205,
															"src": "5103:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 230,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "5091:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
															"typeString": "function (uint8)"
														}
													},
													"id": 232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5091:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 233,
												"nodeType": "EmitStatement",
												"src": "5086:25:1"
											}
										]
									},
									"documentation": {
										"id": 203,
										"nodeType": "StructuredDocumentation",
										"src": "3758:1062:1",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 235,
									"name": "reinitializer",
									"nameLocation": "4834:13:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "4854:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 235,
												"src": "4848:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 204,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4848:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4847:15:1"
									},
									"src": "4825:293:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 244,
										"nodeType": "Block",
										"src": "5356:97:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 239,
															"name": "_initializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 141,
															"src": "5374:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67",
															"id": 240,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5389:45:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															},
															"value": "Initializable: contract is not initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															}
														],
														"id": 238,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5366:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5366:69:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 242,
												"nodeType": "ExpressionStatement",
												"src": "5366:69:1"
											},
											{
												"id": 243,
												"nodeType": "PlaceholderStatement",
												"src": "5445:1:1"
											}
										]
									},
									"documentation": {
										"id": 236,
										"nodeType": "StructuredDocumentation",
										"src": "5124:199:1",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 245,
									"name": "onlyInitializing",
									"nameLocation": "5337:16:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5353:2:1"
									},
									"src": "5328:125:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 280,
										"nodeType": "Block",
										"src": "5988:231:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 251,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "6006:14:1",
															"subExpression": {
																"id": 250,
																"name": "_initializing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 141,
																"src": "6007:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67",
															"id": 252,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6022:41:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															},
															"value": "Initializable: contract is initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															}
														],
														"id": 249,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5998:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5998:66:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 254,
												"nodeType": "ExpressionStatement",
												"src": "5998:66:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 255,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 138,
														"src": "6078:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 258,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6099:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	},
																	"typeName": {
																		"id": 257,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "6099:5:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	}
																],
																"id": 256,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "6094:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 259,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6094:11:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint8",
																"typeString": "type(uint8)"
															}
														},
														"id": 260,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "6106:3:1",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "6094:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "6078:31:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 279,
												"nodeType": "IfStatement",
												"src": "6074:139:1",
												"trueBody": {
													"id": 278,
													"nodeType": "Block",
													"src": "6111:102:1",
													"statements": [
														{
															"expression": {
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 262,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 138,
																	"src": "6125:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 265,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6145:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 264,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "6145:5:1",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				}
																			],
																			"id": 263,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "6140:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 266,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6140:11:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint8",
																			"typeString": "type(uint8)"
																		}
																	},
																	"id": 267,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "6152:3:1",
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "6140:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "6125:30:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 269,
															"nodeType": "ExpressionStatement",
															"src": "6125:30:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 273,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "6191:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					},
																					"typeName": {
																						"id": 272,
																						"name": "uint8",
																						"nodeType": "ElementaryTypeName",
																						"src": "6191:5:1",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					}
																				],
																				"id": 271,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "6186:4:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 274,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6186:11:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint8",
																				"typeString": "type(uint8)"
																			}
																		},
																		"id": 275,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6198:3:1",
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "6186:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 270,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 146,
																	"src": "6174:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 276,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6174:28:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 277,
															"nodeType": "EmitStatement",
															"src": "6169:33:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 246,
										"nodeType": "StructuredDocumentation",
										"src": "5459:475:1",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 281,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "5948:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5968:2:1"
									},
									"returnParameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5988:0:1"
									},
									"scope": 300,
									"src": "5939:280:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 289,
										"nodeType": "Block",
										"src": "6393:36:1",
										"statements": [
											{
												"expression": {
													"id": 287,
													"name": "_initialized",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 138,
													"src": "6410:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 286,
												"id": 288,
												"nodeType": "Return",
												"src": "6403:19:1"
											}
										]
									},
									"documentation": {
										"id": 282,
										"nodeType": "StructuredDocumentation",
										"src": "6225:99:1",
										"text": " @dev Returns the highest version that has been initialized. See {reinitializer}."
									},
									"id": 290,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "6338:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6360:2:1"
									},
									"returnParameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 290,
												"src": "6386:5:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 284,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6386:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6385:7:1"
									},
									"scope": 300,
									"src": "6329:100:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 298,
										"nodeType": "Block",
										"src": "6601:37:1",
										"statements": [
											{
												"expression": {
													"id": 296,
													"name": "_initializing",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 141,
													"src": "6618:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 295,
												"id": 297,
												"nodeType": "Return",
												"src": "6611:20:1"
											}
										]
									},
									"documentation": {
										"id": 291,
										"nodeType": "StructuredDocumentation",
										"src": "6435:105:1",
										"text": " @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."
									},
									"id": 299,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "6554:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6569:2:1"
									},
									"returnParameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "6595:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 293,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6595:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6594:6:1"
									},
									"scope": 300,
									"src": "6545:93:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 301,
							"src": "2394:4246:1",
							"usedErrors": []
						}
					],
					"src": "113:6528:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1345
						],
						"ContextUpgradeable": [
							1387
						],
						"ERC20Upgradeable": [
							912
						],
						"IERC20MetadataUpgradeable": [
							1015
						],
						"IERC20Upgradeable": [
							990
						],
						"Initializable": [
							300
						]
					},
					"id": 913,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 302,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "./IERC20Upgradeable.sol",
							"id": 303,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 913,
							"sourceUnit": 991,
							"src": "130:33:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
							"file": "./extensions/IERC20MetadataUpgradeable.sol",
							"id": 304,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 913,
							"sourceUnit": 1016,
							"src": "164:52:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../../utils/ContextUpgradeable.sol",
							"id": 305,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 913,
							"sourceUnit": 1388,
							"src": "217:44:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 306,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 913,
							"sourceUnit": 301,
							"src": "262:45:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 308,
										"name": "Initializable",
										"nameLocations": [
											"1640:13:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 300,
										"src": "1640:13:2"
									},
									"id": 309,
									"nodeType": "InheritanceSpecifier",
									"src": "1640:13:2"
								},
								{
									"baseName": {
										"id": 310,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"1655:18:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1387,
										"src": "1655:18:2"
									},
									"id": 311,
									"nodeType": "InheritanceSpecifier",
									"src": "1655:18:2"
								},
								{
									"baseName": {
										"id": 312,
										"name": "IERC20Upgradeable",
										"nameLocations": [
											"1675:17:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 990,
										"src": "1675:17:2"
									},
									"id": 313,
									"nodeType": "InheritanceSpecifier",
									"src": "1675:17:2"
								},
								{
									"baseName": {
										"id": 314,
										"name": "IERC20MetadataUpgradeable",
										"nameLocations": [
											"1694:25:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1015,
										"src": "1694:25:2"
									},
									"id": 315,
									"nodeType": "InheritanceSpecifier",
									"src": "1694:25:2"
								}
							],
							"canonicalName": "ERC20Upgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 307,
								"nodeType": "StructuredDocumentation",
								"src": "309:1301:2",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 912,
							"linearizedBaseContracts": [
								912,
								1015,
								990,
								1387,
								300
							],
							"name": "ERC20Upgradeable",
							"nameLocation": "1620:16:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 319,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1762:9:2",
									"nodeType": "VariableDeclaration",
									"scope": 912,
									"src": "1726:45:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 318,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 316,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1734:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1726:27:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 317,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1745:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 325,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1834:11:2",
									"nodeType": "VariableDeclaration",
									"scope": 912,
									"src": "1778:67:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 324,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 320,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1786:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1778:47:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 323,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 321,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1805:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1797:27:2",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 322,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1816:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 327,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1868:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 912,
									"src": "1852:28:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 326,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1852:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 329,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1902:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 912,
									"src": "1887:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 328,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1887:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 331,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1928:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 912,
									"src": "1913:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 330,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1913:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 346,
										"nodeType": "Block",
										"src": "2210:55:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 342,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 334,
															"src": "2243:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 343,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 336,
															"src": "2250:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 341,
														"name": "__ERC20_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 365,
														"src": "2220:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2220:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 345,
												"nodeType": "ExpressionStatement",
												"src": "2220:38:2"
											}
										]
									},
									"documentation": {
										"id": 332,
										"nodeType": "StructuredDocumentation",
										"src": "1942:171:2",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 347,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 339,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 338,
												"name": "onlyInitializing",
												"nameLocations": [
													"2193:16:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "2193:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2193:16:2"
										}
									],
									"name": "__ERC20_init",
									"nameLocation": "2127:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 334,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2154:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "2140:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 333,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2140:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 336,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2175:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "2161:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 335,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2161:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2139:44:2"
									},
									"returnParameters": {
										"id": 340,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2210:0:2"
									},
									"scope": 912,
									"src": "2118:147:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 364,
										"nodeType": "Block",
										"src": "2373:57:2",
										"statements": [
											{
												"expression": {
													"id": 358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 356,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 329,
														"src": "2383:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 357,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 349,
														"src": "2391:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2383:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 359,
												"nodeType": "ExpressionStatement",
												"src": "2383:13:2"
											},
											{
												"expression": {
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 360,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 331,
														"src": "2406:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 361,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 351,
														"src": "2416:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2406:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 363,
												"nodeType": "ExpressionStatement",
												"src": "2406:17:2"
											}
										]
									},
									"id": 365,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 354,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 353,
												"name": "onlyInitializing",
												"nameLocations": [
													"2356:16:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "2356:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2356:16:2"
										}
									],
									"name": "__ERC20_init_unchained",
									"nameLocation": "2280:22:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2317:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "2303:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 348,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2303:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2338:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "2324:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 350,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2324:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2302:44:2"
									},
									"returnParameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2373:0:2"
									},
									"scope": 912,
									"src": "2271:159:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1002
									],
									"body": {
										"id": 374,
										"nodeType": "Block",
										"src": "2564:29:2",
										"statements": [
											{
												"expression": {
													"id": 372,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 329,
													"src": "2581:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 371,
												"id": 373,
												"nodeType": "Return",
												"src": "2574:12:2"
											}
										]
									},
									"documentation": {
										"id": 366,
										"nodeType": "StructuredDocumentation",
										"src": "2436:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 375,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2504:4:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 368,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2531:8:2"
									},
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2508:2:2"
									},
									"returnParameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "2549:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 369,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2549:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2548:15:2"
									},
									"scope": 912,
									"src": "2495:98:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1008
									],
									"body": {
										"id": 384,
										"nodeType": "Block",
										"src": "2777:31:2",
										"statements": [
											{
												"expression": {
													"id": 382,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 331,
													"src": "2794:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 381,
												"id": 383,
												"nodeType": "Return",
												"src": "2787:14:2"
											}
										]
									},
									"documentation": {
										"id": 376,
										"nodeType": "StructuredDocumentation",
										"src": "2599:102:2",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 385,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2715:6:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 378,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2744:8:2"
									},
									"parameters": {
										"id": 377,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2721:2:2"
									},
									"returnParameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 380,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "2762:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 379,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2762:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2761:15:2"
									},
									"scope": 912,
									"src": "2706:102:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1014
									],
									"body": {
										"id": 394,
										"nodeType": "Block",
										"src": "3506:26:2",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 392,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3523:2:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 391,
												"id": 393,
												"nodeType": "Return",
												"src": "3516:9:2"
											}
										]
									},
									"documentation": {
										"id": 386,
										"nodeType": "StructuredDocumentation",
										"src": "2814:622:2",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 395,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3450:8:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 388,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3481:8:2"
									},
									"parameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3458:2:2"
									},
									"returnParameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 395,
												"src": "3499:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 389,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3499:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3498:7:2"
									},
									"scope": 912,
									"src": "3441:91:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										939
									],
									"body": {
										"id": 404,
										"nodeType": "Block",
										"src": "3662:36:2",
										"statements": [
											{
												"expression": {
													"id": 402,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 327,
													"src": "3679:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 401,
												"id": 403,
												"nodeType": "Return",
												"src": "3672:19:2"
											}
										]
									},
									"documentation": {
										"id": 396,
										"nodeType": "StructuredDocumentation",
										"src": "3538:49:2",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 405,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3601:11:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 398,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3635:8:2"
									},
									"parameters": {
										"id": 397,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3612:2:2"
									},
									"returnParameters": {
										"id": 401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "3653:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 399,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3653:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3652:9:2"
									},
									"scope": 912,
									"src": "3592:106:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										947
									],
									"body": {
										"id": 418,
										"nodeType": "Block",
										"src": "3839:42:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 414,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 319,
														"src": "3856:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 416,
													"indexExpression": {
														"id": 415,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 408,
														"src": "3866:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3856:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 413,
												"id": 417,
												"nodeType": "Return",
												"src": "3849:25:2"
											}
										]
									},
									"documentation": {
										"id": 406,
										"nodeType": "StructuredDocumentation",
										"src": "3704:47:2",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 419,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3765:9:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 410,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3812:8:2"
									},
									"parameters": {
										"id": 409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 408,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3783:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 419,
												"src": "3775:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 407,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3775:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3774:17:2"
									},
									"returnParameters": {
										"id": 413,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 412,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 419,
												"src": "3830:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 411,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3830:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3829:9:2"
									},
									"scope": 912,
									"src": "3756:125:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										957
									],
									"body": {
										"id": 443,
										"nodeType": "Block",
										"src": "4162:104:2",
										"statements": [
											{
												"assignments": [
													431
												],
												"declarations": [
													{
														"constant": false,
														"id": 431,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4180:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 443,
														"src": "4172:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 430,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4172:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 434,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 432,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1372,
														"src": "4188:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 433,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4188:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4172:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 436,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 431,
															"src": "4220:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 437,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 422,
															"src": "4227:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 438,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 424,
															"src": "4231:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 435,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 667,
														"src": "4210:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4210:28:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 440,
												"nodeType": "ExpressionStatement",
												"src": "4210:28:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 441,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4255:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 429,
												"id": 442,
												"nodeType": "Return",
												"src": "4248:11:2"
											}
										]
									},
									"documentation": {
										"id": 420,
										"nodeType": "StructuredDocumentation",
										"src": "3887:185:2",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 444,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4086:8:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 426,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4138:8:2"
									},
									"parameters": {
										"id": 425,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 422,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4103:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "4095:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 421,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4095:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 424,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4115:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "4107:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 423,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4107:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4094:28:2"
									},
									"returnParameters": {
										"id": 429,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 428,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "4156:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 427,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4156:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4155:6:2"
									},
									"scope": 912,
									"src": "4077:189:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										967
									],
									"body": {
										"id": 461,
										"nodeType": "Block",
										"src": "4422:51:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 455,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 325,
															"src": "4439:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 457,
														"indexExpression": {
															"id": 456,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 447,
															"src": "4451:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4439:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 459,
													"indexExpression": {
														"id": 458,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 449,
														"src": "4458:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4439:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 454,
												"id": 460,
												"nodeType": "Return",
												"src": "4432:34:2"
											}
										]
									},
									"documentation": {
										"id": 445,
										"nodeType": "StructuredDocumentation",
										"src": "4272:47:2",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 462,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4333:9:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 451,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4395:8:2"
									},
									"parameters": {
										"id": 450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 447,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4351:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 462,
												"src": "4343:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 446,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4343:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4366:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 462,
												"src": "4358:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 448,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4358:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4342:32:2"
									},
									"returnParameters": {
										"id": 454,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 462,
												"src": "4413:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 452,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4413:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4412:9:2"
									},
									"scope": 912,
									"src": "4324:149:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										977
									],
									"body": {
										"id": 486,
										"nodeType": "Block",
										"src": "4870:108:2",
										"statements": [
											{
												"assignments": [
													474
												],
												"declarations": [
													{
														"constant": false,
														"id": 474,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4888:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 486,
														"src": "4880:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 473,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4880:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 477,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 475,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1372,
														"src": "4896:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4896:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4880:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 479,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 474,
															"src": "4927:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 480,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 465,
															"src": "4934:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 481,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 467,
															"src": "4943:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 478,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 841,
														"src": "4918:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 482,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4918:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 483,
												"nodeType": "ExpressionStatement",
												"src": "4918:32:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 484,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4967:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 472,
												"id": 485,
												"nodeType": "Return",
												"src": "4960:11:2"
											}
										]
									},
									"documentation": {
										"id": 463,
										"nodeType": "StructuredDocumentation",
										"src": "4479:297:2",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 487,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4790:7:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 469,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4846:8:2"
									},
									"parameters": {
										"id": 468,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 465,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4806:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "4798:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 464,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4798:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 467,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4823:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "4815:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 466,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4815:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4797:33:2"
									},
									"returnParameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "4864:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 470,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4864:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4863:6:2"
									},
									"scope": 912,
									"src": "4781:197:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										989
									],
									"body": {
										"id": 519,
										"nodeType": "Block",
										"src": "5643:153:2",
										"statements": [
											{
												"assignments": [
													501
												],
												"declarations": [
													{
														"constant": false,
														"id": 501,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5661:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 519,
														"src": "5653:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 500,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5653:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 504,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 502,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1372,
														"src": "5671:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 503,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5671:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5653:30:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 506,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 490,
															"src": "5709:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 507,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 501,
															"src": "5715:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 508,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 494,
															"src": "5724:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 505,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 884,
														"src": "5693:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5693:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 510,
												"nodeType": "ExpressionStatement",
												"src": "5693:38:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 512,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 490,
															"src": "5751:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 513,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 492,
															"src": "5757:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 514,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 494,
															"src": "5761:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 511,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 667,
														"src": "5741:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 515,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5741:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 516,
												"nodeType": "ExpressionStatement",
												"src": "5741:27:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 517,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5785:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 499,
												"id": 518,
												"nodeType": "Return",
												"src": "5778:11:2"
											}
										]
									},
									"documentation": {
										"id": 488,
										"nodeType": "StructuredDocumentation",
										"src": "4984:551:2",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 520,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5549:12:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 496,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5619:8:2"
									},
									"parameters": {
										"id": 495,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 490,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5570:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 520,
												"src": "5562:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 489,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5562:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 492,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5584:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 520,
												"src": "5576:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 491,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5576:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 494,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5596:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 520,
												"src": "5588:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 493,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5588:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5561:42:2"
									},
									"returnParameters": {
										"id": 499,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 520,
												"src": "5637:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 497,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5637:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5636:6:2"
									},
									"scope": 912,
									"src": "5540:256:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 548,
										"nodeType": "Block",
										"src": "6285:140:2",
										"statements": [
											{
												"assignments": [
													531
												],
												"declarations": [
													{
														"constant": false,
														"id": 531,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6303:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 548,
														"src": "6295:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 530,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6295:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 534,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 532,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1372,
														"src": "6311:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 533,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6311:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6295:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 536,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 531,
															"src": "6342:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 537,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 523,
															"src": "6349:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 543,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 539,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 531,
																		"src": "6368:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 540,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 523,
																		"src": "6375:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 538,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 462,
																	"src": "6358:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 541,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6358:25:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 542,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 525,
																"src": "6386:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6358:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 535,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 841,
														"src": "6333:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 544,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6333:64:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 545,
												"nodeType": "ExpressionStatement",
												"src": "6333:64:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 546,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6414:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 529,
												"id": 547,
												"nodeType": "Return",
												"src": "6407:11:2"
											}
										]
									},
									"documentation": {
										"id": 521,
										"nodeType": "StructuredDocumentation",
										"src": "5802:384:2",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 549,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "6200:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 523,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6226:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "6218:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 522,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6218:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "6243:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "6235:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 524,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6235:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6217:37:2"
									},
									"returnParameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "6279:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 527,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6279:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6278:6:2"
									},
									"scope": 912,
									"src": "6191:234:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 589,
										"nodeType": "Block",
										"src": "7011:328:2",
										"statements": [
											{
												"assignments": [
													560
												],
												"declarations": [
													{
														"constant": false,
														"id": 560,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "7029:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 589,
														"src": "7021:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 559,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7021:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 563,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 561,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1372,
														"src": "7037:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 562,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7037:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7021:28:2"
											},
											{
												"assignments": [
													565
												],
												"declarations": [
													{
														"constant": false,
														"id": 565,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "7067:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 589,
														"src": "7059:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 564,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7059:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 570,
												"initialValue": {
													"arguments": [
														{
															"id": 567,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 560,
															"src": "7096:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 568,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 552,
															"src": "7103:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 566,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 462,
														"src": "7086:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 569,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7086:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7059:52:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 574,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 572,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 565,
																"src": "7129:16:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 573,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 554,
																"src": "7149:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7129:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 575,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7166:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 571,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7121:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7121:85:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 577,
												"nodeType": "ExpressionStatement",
												"src": "7121:85:2"
											},
											{
												"id": 586,
												"nodeType": "UncheckedBlock",
												"src": "7216:95:2",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 579,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 560,
																	"src": "7249:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 580,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 552,
																	"src": "7256:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 583,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 581,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 565,
																		"src": "7265:16:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 582,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 554,
																		"src": "7284:15:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7265:34:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 578,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 841,
																"src": "7240:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 584,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7240:60:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 585,
														"nodeType": "ExpressionStatement",
														"src": "7240:60:2"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 587,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7328:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 558,
												"id": 588,
												"nodeType": "Return",
												"src": "7321:11:2"
											}
										]
									},
									"documentation": {
										"id": 550,
										"nodeType": "StructuredDocumentation",
										"src": "6431:476:2",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 590,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6921:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 552,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6947:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 590,
												"src": "6939:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 551,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6939:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6964:15:2",
												"nodeType": "VariableDeclaration",
												"scope": 590,
												"src": "6956:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 553,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6956:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6938:42:2"
									},
									"returnParameters": {
										"id": 558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 557,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 590,
												"src": "7005:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 556,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7005:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7004:6:2"
									},
									"scope": 912,
									"src": "6912:427:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 666,
										"nodeType": "Block",
										"src": "7871:710:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 606,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 601,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 593,
																"src": "7889:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 604,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7905:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 603,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7897:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 602,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7897:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 605,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7897:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7889:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 607,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7909:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 600,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7881:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 608,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7881:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 609,
												"nodeType": "ExpressionStatement",
												"src": "7881:68:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 616,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 611,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 595,
																"src": "7967:2:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 614,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7981:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 613,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7973:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 612,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7973:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 615,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7973:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7967:16:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 617,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7985:37:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 610,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7959:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 618,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7959:64:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 619,
												"nodeType": "ExpressionStatement",
												"src": "7959:64:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 621,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 593,
															"src": "8055:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 622,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 595,
															"src": "8061:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 623,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 597,
															"src": "8065:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 620,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 895,
														"src": "8034:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 624,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8034:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 625,
												"nodeType": "ExpressionStatement",
												"src": "8034:38:2"
											},
											{
												"assignments": [
													627
												],
												"declarations": [
													{
														"constant": false,
														"id": 627,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "8091:11:2",
														"nodeType": "VariableDeclaration",
														"scope": 666,
														"src": "8083:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 626,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8083:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 631,
												"initialValue": {
													"baseExpression": {
														"id": 628,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 319,
														"src": "8105:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 630,
													"indexExpression": {
														"id": 629,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 593,
														"src": "8115:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8105:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8083:37:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 635,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 633,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 627,
																"src": "8138:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 634,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 597,
																"src": "8153:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8138:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 636,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8161:40:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 632,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8130:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 637,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8130:72:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 638,
												"nodeType": "ExpressionStatement",
												"src": "8130:72:2"
											},
											{
												"id": 653,
												"nodeType": "UncheckedBlock",
												"src": "8212:273:2",
												"statements": [
													{
														"expression": {
															"id": 645,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 639,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 319,
																	"src": "8236:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 641,
																"indexExpression": {
																	"id": 640,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 593,
																	"src": "8246:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8236:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 644,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 642,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 627,
																	"src": "8254:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 643,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 597,
																	"src": "8268:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8254:20:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8236:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 646,
														"nodeType": "ExpressionStatement",
														"src": "8236:38:2"
													},
													{
														"expression": {
															"id": 651,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 647,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 319,
																	"src": "8451:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 649,
																"indexExpression": {
																	"id": 648,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 595,
																	"src": "8461:2:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8451:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 650,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 597,
																"src": "8468:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8451:23:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 652,
														"nodeType": "ExpressionStatement",
														"src": "8451:23:2"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 655,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 593,
															"src": "8509:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 656,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 595,
															"src": "8515:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 657,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 597,
															"src": "8519:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 654,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 924,
														"src": "8500:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 658,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8500:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 659,
												"nodeType": "EmitStatement",
												"src": "8495:31:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 661,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 593,
															"src": "8557:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 662,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 595,
															"src": "8563:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 663,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 597,
															"src": "8567:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 660,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 906,
														"src": "8537:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 664,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8537:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 665,
												"nodeType": "ExpressionStatement",
												"src": "8537:37:2"
											}
										]
									},
									"documentation": {
										"id": 591,
										"nodeType": "StructuredDocumentation",
										"src": "7345:443:2",
										"text": " @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 667,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7802:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 598,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 593,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7820:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "7812:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 592,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7812:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 595,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7834:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "7826:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 594,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7826:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 597,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7846:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "7838:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 596,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7838:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7811:42:2"
									},
									"returnParameters": {
										"id": 599,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7871:0:2"
									},
									"scope": 912,
									"src": "7793:788:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 723,
										"nodeType": "Block",
										"src": "8922:470:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 681,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 676,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 670,
																"src": "8940:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 679,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8959:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 678,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8951:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 677,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8951:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 680,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8951:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8940:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 682,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8963:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 675,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8932:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 683,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8932:65:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 684,
												"nodeType": "ExpressionStatement",
												"src": "8932:65:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 688,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9037:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 687,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9029:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 686,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9029:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 689,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9029:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 690,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 670,
															"src": "9041:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 691,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 672,
															"src": "9050:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 685,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 895,
														"src": "9008:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 692,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9008:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 693,
												"nodeType": "ExpressionStatement",
												"src": "9008:49:2"
											},
											{
												"expression": {
													"id": 696,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 694,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 327,
														"src": "9068:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 695,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 672,
														"src": "9084:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9068:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 697,
												"nodeType": "ExpressionStatement",
												"src": "9068:22:2"
											},
											{
												"id": 704,
												"nodeType": "UncheckedBlock",
												"src": "9100:175:2",
												"statements": [
													{
														"expression": {
															"id": 702,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 698,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 319,
																	"src": "9236:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 700,
																"indexExpression": {
																	"id": 699,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 670,
																	"src": "9246:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9236:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 701,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 672,
																"src": "9258:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9236:28:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 703,
														"nodeType": "ExpressionStatement",
														"src": "9236:28:2"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 708,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9306:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 707,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9298:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 706,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9298:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 709,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9298:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 710,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 670,
															"src": "9310:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 711,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 672,
															"src": "9319:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 705,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 924,
														"src": "9289:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9289:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 713,
												"nodeType": "EmitStatement",
												"src": "9284:42:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 717,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9365:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 716,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9357:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 715,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9357:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 718,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9357:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 719,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 670,
															"src": "9369:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 720,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 672,
															"src": "9378:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 714,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 906,
														"src": "9337:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9337:48:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 722,
												"nodeType": "ExpressionStatement",
												"src": "9337:48:2"
											}
										]
									},
									"documentation": {
										"id": 668,
										"nodeType": "StructuredDocumentation",
										"src": "8587:265:2",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 724,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8866:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 670,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8880:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "8872:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 669,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8872:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 672,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8897:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "8889:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 671,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8889:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8871:33:2"
									},
									"returnParameters": {
										"id": 674,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8922:0:2"
									},
									"scope": 912,
									"src": "8857:535:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 795,
										"nodeType": "Block",
										"src": "9777:594:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 738,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 733,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 727,
																"src": "9795:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 736,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9814:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 735,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9806:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 734,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9806:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 737,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9806:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9795:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 739,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9818:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 732,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9787:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 740,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9787:67:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 741,
												"nodeType": "ExpressionStatement",
												"src": "9787:67:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 743,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "9886:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 746,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9903:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 745,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9895:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 744,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9895:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 747,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9895:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 748,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 729,
															"src": "9907:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 742,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 895,
														"src": "9865:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 749,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9865:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 750,
												"nodeType": "ExpressionStatement",
												"src": "9865:49:2"
											},
											{
												"assignments": [
													752
												],
												"declarations": [
													{
														"constant": false,
														"id": 752,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9933:14:2",
														"nodeType": "VariableDeclaration",
														"scope": 795,
														"src": "9925:22:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 751,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9925:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 756,
												"initialValue": {
													"baseExpression": {
														"id": 753,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 319,
														"src": "9950:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 755,
													"indexExpression": {
														"id": 754,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 727,
														"src": "9960:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9950:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9925:43:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 760,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 758,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 752,
																"src": "9986:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 759,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 729,
																"src": "10004:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9986:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 761,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10012:36:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 757,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9978:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 762,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9978:71:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 763,
												"nodeType": "ExpressionStatement",
												"src": "9978:71:2"
											},
											{
												"id": 776,
												"nodeType": "UncheckedBlock",
												"src": "10059:194:2",
												"statements": [
													{
														"expression": {
															"id": 770,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 764,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 319,
																	"src": "10083:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 766,
																"indexExpression": {
																	"id": 765,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 727,
																	"src": "10093:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "10083:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 769,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 767,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 752,
																	"src": "10104:14:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 768,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 729,
																	"src": "10121:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10104:23:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10083:44:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 771,
														"nodeType": "ExpressionStatement",
														"src": "10083:44:2"
													},
													{
														"expression": {
															"id": 774,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 772,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 327,
																"src": "10220:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"id": 773,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 729,
																"src": "10236:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10220:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 775,
														"nodeType": "ExpressionStatement",
														"src": "10220:22:2"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 778,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "10277:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 781,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10294:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 780,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10286:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 779,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10286:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 782,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10286:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 783,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 729,
															"src": "10298:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 777,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 924,
														"src": "10268:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 784,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10268:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 785,
												"nodeType": "EmitStatement",
												"src": "10263:42:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 787,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "10336:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 790,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10353:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 789,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10345:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 788,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10345:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 791,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10345:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 792,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 729,
															"src": "10357:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 786,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 906,
														"src": "10316:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 793,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10316:48:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 794,
												"nodeType": "ExpressionStatement",
												"src": "10316:48:2"
											}
										]
									},
									"documentation": {
										"id": 725,
										"nodeType": "StructuredDocumentation",
										"src": "9398:309:2",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 796,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9721:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 730,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 727,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9735:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 796,
												"src": "9727:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 726,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9727:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 729,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9752:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 796,
												"src": "9744:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 728,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9744:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9726:33:2"
									},
									"returnParameters": {
										"id": 731,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9777:0:2"
									},
									"scope": 912,
									"src": "9712:659:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 840,
										"nodeType": "Block",
										"src": "10877:257:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 812,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 807,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 799,
																"src": "10895:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 810,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10912:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 809,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10904:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 808,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10904:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 811,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10904:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10895:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 813,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10916:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 806,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10887:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 814,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10887:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 815,
												"nodeType": "ExpressionStatement",
												"src": "10887:68:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 822,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 817,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 801,
																"src": "10973:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 820,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10992:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 819,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10984:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 818,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10984:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 821,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10984:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10973:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 823,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10996:36:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 816,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10965:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 824,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10965:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 825,
												"nodeType": "ExpressionStatement",
												"src": "10965:68:2"
											},
											{
												"expression": {
													"id": 832,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 826,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 325,
																"src": "11044:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 829,
															"indexExpression": {
																"id": 827,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 799,
																"src": "11056:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11044:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 830,
														"indexExpression": {
															"id": 828,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 801,
															"src": "11063:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11044:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 831,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 803,
														"src": "11074:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11044:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 833,
												"nodeType": "ExpressionStatement",
												"src": "11044:36:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 835,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "11104:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 836,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 801,
															"src": "11111:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 837,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 803,
															"src": "11120:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 834,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 933,
														"src": "11095:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 838,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11095:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 839,
												"nodeType": "EmitStatement",
												"src": "11090:37:2"
											}
										]
									},
									"documentation": {
										"id": 797,
										"nodeType": "StructuredDocumentation",
										"src": "10377:412:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 841,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10803:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 804,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 799,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10820:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 841,
												"src": "10812:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 798,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10812:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 801,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10835:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 841,
												"src": "10827:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 800,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10827:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 803,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10852:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 841,
												"src": "10844:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 802,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10844:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10811:48:2"
									},
									"returnParameters": {
										"id": 805,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10877:0:2"
									},
									"scope": 912,
									"src": "10794:340:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 883,
										"nodeType": "Block",
										"src": "11505:321:2",
										"statements": [
											{
												"assignments": [
													852
												],
												"declarations": [
													{
														"constant": false,
														"id": 852,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11523:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 883,
														"src": "11515:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 851,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11515:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 857,
												"initialValue": {
													"arguments": [
														{
															"id": 854,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 844,
															"src": "11552:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 855,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 846,
															"src": "11559:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 853,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 462,
														"src": "11542:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 856,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11542:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11515:52:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 864,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 858,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 852,
														"src": "11581:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 861,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11606:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 860,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11606:7:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 859,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11601:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 862,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11601:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 863,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "11615:3:2",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11601:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11581:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 882,
												"nodeType": "IfStatement",
												"src": "11577:243:2",
												"trueBody": {
													"id": 881,
													"nodeType": "Block",
													"src": "11620:200:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 868,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 866,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 852,
																			"src": "11642:16:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 867,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 848,
																			"src": "11662:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11642:26:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 869,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11670:31:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 865,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11634:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 870,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11634:68:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 871,
															"nodeType": "ExpressionStatement",
															"src": "11634:68:2"
														},
														{
															"id": 880,
															"nodeType": "UncheckedBlock",
															"src": "11716:94:2",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 873,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 844,
																				"src": "11753:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 874,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 846,
																				"src": "11760:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 877,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 875,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 852,
																					"src": "11769:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 876,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 848,
																					"src": "11788:6:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11769:25:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 872,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 841,
																			"src": "11744:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 878,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11744:51:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 879,
																	"nodeType": "ExpressionStatement",
																	"src": "11744:51:2"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 842,
										"nodeType": "StructuredDocumentation",
										"src": "11140:270:2",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 884,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11424:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 849,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 844,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11448:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "11440:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 843,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11440:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 846,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11463:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "11455:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 845,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11455:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 848,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11480:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "11472:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 847,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11472:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11439:48:2"
									},
									"returnParameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11505:0:2"
									},
									"scope": 912,
									"src": "11415:411:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 894,
										"nodeType": "Block",
										"src": "12499:2:2",
										"statements": []
									},
									"documentation": {
										"id": 885,
										"nodeType": "StructuredDocumentation",
										"src": "11832:573:2",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 895,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "12419:20:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 887,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12448:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 895,
												"src": "12440:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 886,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12440:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 889,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12462:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 895,
												"src": "12454:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 888,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12454:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12474:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 895,
												"src": "12466:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 890,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12466:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12439:42:2"
									},
									"returnParameters": {
										"id": 893,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12499:0:2"
									},
									"scope": 912,
									"src": "12410:91:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 905,
										"nodeType": "Block",
										"src": "13177:2:2",
										"statements": []
									},
									"documentation": {
										"id": 896,
										"nodeType": "StructuredDocumentation",
										"src": "12507:577:2",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 906,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "13098:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 903,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 898,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "13126:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 906,
												"src": "13118:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 897,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13118:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 900,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "13140:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 906,
												"src": "13132:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 899,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13132:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 902,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13152:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 906,
												"src": "13144:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 901,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13144:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13117:42:2"
									},
									"returnParameters": {
										"id": 904,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13177:0:2"
									},
									"scope": 912,
									"src": "13089:90:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 907,
										"nodeType": "StructuredDocumentation",
										"src": "13185:254:2",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 911,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "13464:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 912,
									"src": "13444:25:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$45_storage",
										"typeString": "uint256[45]"
									},
									"typeName": {
										"baseType": {
											"id": 908,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "13444:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 910,
										"length": {
											"hexValue": "3435",
											"id": 909,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "13452:2:2",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_45_by_1",
												"typeString": "int_const 45"
											},
											"value": "45"
										},
										"nodeType": "ArrayTypeName",
										"src": "13444:11:2",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$45_storage_ptr",
											"typeString": "uint256[45]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 913,
							"src": "1611:11861:2",
							"usedErrors": []
						}
					],
					"src": "105:13368:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
					"exportedSymbols": {
						"IERC20Upgradeable": [
							990
						]
					},
					"id": 991,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 914,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Upgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 915,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 990,
							"linearizedBaseContracts": [
								990
							],
							"name": "IERC20Upgradeable",
							"nameLocation": "212:17:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 916,
										"nodeType": "StructuredDocumentation",
										"src": "236:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 924,
									"name": "Transfer",
									"nameLocation": "405:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 923,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 918,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "430:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "414:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 917,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "414:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 920,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "452:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "436:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 919,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "436:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 922,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "464:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "456:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 921,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "456:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "413:57:3"
									},
									"src": "399:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 925,
										"nodeType": "StructuredDocumentation",
										"src": "477:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 933,
									"name": "Approval",
									"nameLocation": "636:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 927,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "661:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "645:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 926,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "645:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 929,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "684:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "668:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 928,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 931,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "701:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "693:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 930,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "644:63:3"
									},
									"src": "630:78:3"
								},
								{
									"documentation": {
										"id": 934,
										"nodeType": "StructuredDocumentation",
										"src": "714:66:3",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 939,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "794:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 935,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "805:2:3"
									},
									"returnParameters": {
										"id": 938,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 937,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "831:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 936,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "831:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "830:9:3"
									},
									"scope": 990,
									"src": "785:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 940,
										"nodeType": "StructuredDocumentation",
										"src": "846:72:3",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 947,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "932:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "950:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 947,
												"src": "942:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 941,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "942:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "941:17:3"
									},
									"returnParameters": {
										"id": 946,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 945,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 947,
												"src": "982:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 944,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "982:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "981:9:3"
									},
									"scope": 990,
									"src": "923:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 948,
										"nodeType": "StructuredDocumentation",
										"src": "997:202:3",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 957,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 953,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 950,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "1222:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 949,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 952,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1242:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "1234:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 951,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:28:3"
									},
									"returnParameters": {
										"id": 956,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 955,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "1268:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 954,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:6:3"
									},
									"scope": 990,
									"src": "1204:70:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 958,
										"nodeType": "StructuredDocumentation",
										"src": "1280:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 967,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1558:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 963,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1576:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "1568:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 959,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1568:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 962,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1591:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "1583:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 961,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1583:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1567:32:3"
									},
									"returnParameters": {
										"id": 966,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "1623:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 964,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1623:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1622:9:3"
									},
									"scope": 990,
									"src": "1549:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 968,
										"nodeType": "StructuredDocumentation",
										"src": "1638:642:3",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 977,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2294:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 973,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 970,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2310:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "2302:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 969,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2302:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 972,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2327:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "2319:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 971,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2319:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2301:33:3"
									},
									"returnParameters": {
										"id": 976,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 975,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "2353:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 974,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2353:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2352:6:3"
									},
									"scope": 990,
									"src": "2285:74:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 978,
										"nodeType": "StructuredDocumentation",
										"src": "2365:287:3",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 989,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2666:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 985,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 980,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2687:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 989,
												"src": "2679:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 979,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 982,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2701:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 989,
												"src": "2693:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 981,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2693:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 984,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2713:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 989,
												"src": "2705:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 983,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2705:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2678:42:3"
									},
									"returnParameters": {
										"id": 988,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 987,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 989,
												"src": "2739:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 986,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2739:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2738:6:3"
									},
									"scope": 990,
									"src": "2657:88:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 991,
							"src": "202:2545:3",
							"usedErrors": []
						}
					],
					"src": "106:2642:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
					"exportedSymbols": {
						"IERC20MetadataUpgradeable": [
							1015
						],
						"IERC20Upgradeable": [
							990
						]
					},
					"id": 1016,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 992,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "../IERC20Upgradeable.sol",
							"id": 993,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1016,
							"sourceUnit": 991,
							"src": "135:34:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 995,
										"name": "IERC20Upgradeable",
										"nameLocations": [
											"327:17:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 990,
										"src": "327:17:4"
									},
									"id": 996,
									"nodeType": "InheritanceSpecifier",
									"src": "327:17:4"
								}
							],
							"canonicalName": "IERC20MetadataUpgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 994,
								"nodeType": "StructuredDocumentation",
								"src": "171:116:4",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 1015,
							"linearizedBaseContracts": [
								1015,
								990
							],
							"name": "IERC20MetadataUpgradeable",
							"nameLocation": "298:25:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 997,
										"nodeType": "StructuredDocumentation",
										"src": "351:54:4",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1002,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "419:4:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 998,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "423:2:4"
									},
									"returnParameters": {
										"id": 1001,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1000,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1002,
												"src": "449:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 999,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "449:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "448:15:4"
									},
									"scope": 1015,
									"src": "410:54:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1003,
										"nodeType": "StructuredDocumentation",
										"src": "470:56:4",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1008,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "540:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "546:2:4"
									},
									"returnParameters": {
										"id": 1007,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1006,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1008,
												"src": "572:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1005,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "572:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "571:15:4"
									},
									"scope": 1015,
									"src": "531:56:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1009,
										"nodeType": "StructuredDocumentation",
										"src": "593:65:4",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1014,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "672:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1010,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "680:2:4"
									},
									"returnParameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1012,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "706:5:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1011,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "706:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "705:7:4"
									},
									"scope": 1015,
									"src": "663:50:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1016,
							"src": "288:427:4",
							"usedErrors": []
						}
					],
					"src": "110:606:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1345
						]
					},
					"id": 1346,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1017,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "AddressUpgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1018,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:5",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1345,
							"linearizedBaseContracts": [
								1345
							],
							"name": "AddressUpgradeable",
							"nameLocation": "202:18:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1032,
										"nodeType": "Block",
										"src": "1489:254:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1030,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1026,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1021,
																"src": "1713:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1027,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1721:4:5",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1713:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1028,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1726:6:5",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1713:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1029,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1735:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1713:23:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1025,
												"id": 1031,
												"nodeType": "Return",
												"src": "1706:30:5"
											}
										]
									},
									"documentation": {
										"id": 1019,
										"nodeType": "StructuredDocumentation",
										"src": "227:1191:5",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 1033,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1432:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1022,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1451:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "1443:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1020,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1443:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1442:17:5"
									},
									"returnParameters": {
										"id": 1025,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1024,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "1483:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1023,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1483:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1482:6:5"
									},
									"scope": 1345,
									"src": "1423:320:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1066,
										"nodeType": "Block",
										"src": "2729:241:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1048,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1044,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2755:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1345",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1345",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 1043,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2747:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1042,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2747:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1045,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2747:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1046,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2761:7:5",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2747:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1047,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1038,
																"src": "2772:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2747:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 1049,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2780:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 1041,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2739:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1050,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2739:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1051,
												"nodeType": "ExpressionStatement",
												"src": "2739:73:5"
											},
											{
												"assignments": [
													1053,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1053,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2829:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1066,
														"src": "2824:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1052,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2824:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1060,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1058,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2872:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1054,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1036,
																"src": "2842:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1055,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2852:4:5",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2842:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1057,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1056,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1038,
																"src": "2864:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2842:29:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1059,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2842:33:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2823:52:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1062,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1053,
															"src": "2893:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 1063,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2902:60:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 1061,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2885:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1064,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2885:78:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1065,
												"nodeType": "ExpressionStatement",
												"src": "2885:78:5"
											}
										]
									},
									"documentation": {
										"id": 1034,
										"nodeType": "StructuredDocumentation",
										"src": "1749:904:5",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 1067,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2667:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1036,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2693:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "2677:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1035,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:15:5",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2712:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "2704:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1037,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2704:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2676:43:5"
									},
									"returnParameters": {
										"id": 1040,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2729:0:5"
									},
									"scope": 1345,
									"src": "2658:312:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1084,
										"nodeType": "Block",
										"src": "3801:96:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1078,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1070,
															"src": "3840:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1079,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1072,
															"src": "3848:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1080,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3854:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 1081,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3857:32:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 1077,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1125,
															1169
														],
														"referencedDeclaration": 1169,
														"src": "3818:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1082,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3818:72:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1076,
												"id": 1083,
												"nodeType": "Return",
												"src": "3811:79:5"
											}
										]
									},
									"documentation": {
										"id": 1068,
										"nodeType": "StructuredDocumentation",
										"src": "2976:731:5",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 1085,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3721:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1073,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1070,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3742:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "3734:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1069,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3734:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1072,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3763:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "3750:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1071,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3750:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3733:35:5"
									},
									"returnParameters": {
										"id": 1076,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1075,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "3787:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1074,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3787:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3786:14:5"
									},
									"scope": 1345,
									"src": "3712:185:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1104,
										"nodeType": "Block",
										"src": "4266:76:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1098,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1088,
															"src": "4305:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1099,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1090,
															"src": "4313:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1100,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4319:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1101,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1092,
															"src": "4322:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1097,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1125,
															1169
														],
														"referencedDeclaration": 1169,
														"src": "4283:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4283:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1096,
												"id": 1103,
												"nodeType": "Return",
												"src": "4276:59:5"
											}
										]
									},
									"documentation": {
										"id": 1086,
										"nodeType": "StructuredDocumentation",
										"src": "3903:211:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1105,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "4128:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1093,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4158:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1105,
												"src": "4150:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1087,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4150:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1090,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4187:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1105,
												"src": "4174:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1089,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4174:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1092,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "4215:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1105,
												"src": "4201:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1091,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4201:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4140:93:5"
									},
									"returnParameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1105,
												"src": "4252:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1094,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4252:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4251:14:5"
									},
									"scope": 1345,
									"src": "4119:223:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1124,
										"nodeType": "Block",
										"src": "4817:111:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1118,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1108,
															"src": "4856:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1119,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1110,
															"src": "4864:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1120,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1112,
															"src": "4870:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 1121,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4877:43:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 1117,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1125,
															1169
														],
														"referencedDeclaration": 1169,
														"src": "4834:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4834:87:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1116,
												"id": 1123,
												"nodeType": "Return",
												"src": "4827:94:5"
											}
										]
									},
									"documentation": {
										"id": 1106,
										"nodeType": "StructuredDocumentation",
										"src": "4348:351:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 1125,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4713:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1108,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4743:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1125,
												"src": "4735:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4735:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1110,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4764:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1125,
												"src": "4751:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1109,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4751:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1112,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4778:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1125,
												"src": "4770:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1111,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4770:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4734:50:5"
									},
									"returnParameters": {
										"id": 1116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1115,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1125,
												"src": "4803:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1114,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4803:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4802:14:5"
									},
									"scope": 1345,
									"src": "4704:224:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1168,
										"nodeType": "Block",
										"src": "5355:267:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1146,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1142,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5381:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1345",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1345",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 1141,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5373:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1140,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5373:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1143,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5373:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1144,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5387:7:5",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5373:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1145,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1132,
																"src": "5398:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5373:30:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 1147,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5405:40:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 1139,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5365:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1148,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5365:81:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1149,
												"nodeType": "ExpressionStatement",
												"src": "5365:81:5"
											},
											{
												"assignments": [
													1151,
													1153
												],
												"declarations": [
													{
														"constant": false,
														"id": 1151,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5462:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1168,
														"src": "5457:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1150,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5457:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1153,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5484:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 1168,
														"src": "5471:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1152,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5471:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1160,
												"initialValue": {
													"arguments": [
														{
															"id": 1158,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1130,
															"src": "5524:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 1154,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1128,
																"src": "5498:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1155,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5505:4:5",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5498:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1157,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1156,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1132,
																"src": "5517:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5498:25:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1159,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5498:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5456:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1162,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1128,
															"src": "5573:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1163,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1151,
															"src": "5581:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1164,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1153,
															"src": "5590:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1165,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1134,
															"src": "5602:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1161,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1300,
														"src": "5546:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1166,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5546:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1138,
												"id": 1167,
												"nodeType": "Return",
												"src": "5539:76:5"
											}
										]
									},
									"documentation": {
										"id": 1126,
										"nodeType": "StructuredDocumentation",
										"src": "4934:237:5",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1169,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "5185:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1128,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5224:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1169,
												"src": "5216:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1127,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5216:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1130,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5253:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1169,
												"src": "5240:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1129,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5240:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5275:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1169,
												"src": "5267:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1131,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5267:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1134,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5304:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1169,
												"src": "5290:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1133,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5290:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5206:116:5"
									},
									"returnParameters": {
										"id": 1138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1137,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1169,
												"src": "5341:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1136,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5341:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5340:14:5"
									},
									"scope": 1345,
									"src": "5176:446:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1185,
										"nodeType": "Block",
										"src": "5899:97:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1180,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1172,
															"src": "5935:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1181,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1174,
															"src": "5943:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 1182,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5949:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 1179,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1186,
															1215
														],
														"referencedDeclaration": 1215,
														"src": "5916:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1183,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5916:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1178,
												"id": 1184,
												"nodeType": "Return",
												"src": "5909:80:5"
											}
										]
									},
									"documentation": {
										"id": 1170,
										"nodeType": "StructuredDocumentation",
										"src": "5628:166:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1186,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5808:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1172,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5835:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "5827:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1171,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5827:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1174,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5856:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "5843:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1173,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5843:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5826:35:5"
									},
									"returnParameters": {
										"id": 1178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1177,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "5885:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1176,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5885:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5884:14:5"
									},
									"scope": 1345,
									"src": "5799:197:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1214,
										"nodeType": "Block",
										"src": "6338:168:5",
										"statements": [
											{
												"assignments": [
													1199,
													1201
												],
												"declarations": [
													{
														"constant": false,
														"id": 1199,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6354:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1214,
														"src": "6349:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1198,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6349:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1201,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6376:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 1214,
														"src": "6363:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1200,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6363:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1206,
												"initialValue": {
													"arguments": [
														{
															"id": 1204,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1191,
															"src": "6408:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1202,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1189,
															"src": "6390:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1203,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6397:10:5",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6390:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6390:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6348:65:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1208,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1189,
															"src": "6457:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1209,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1199,
															"src": "6465:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1210,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1201,
															"src": "6474:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1211,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1193,
															"src": "6486:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1207,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1300,
														"src": "6430:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6430:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1197,
												"id": 1213,
												"nodeType": "Return",
												"src": "6423:76:5"
											}
										]
									},
									"documentation": {
										"id": 1187,
										"nodeType": "StructuredDocumentation",
										"src": "6002:173:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1215,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6189:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1189,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6225:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1215,
												"src": "6217:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1188,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6217:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1191,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6254:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1215,
												"src": "6241:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1190,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6241:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1193,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6282:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1215,
												"src": "6268:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1192,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6268:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6207:93:5"
									},
									"returnParameters": {
										"id": 1197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1196,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1215,
												"src": "6324:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1195,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6324:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6323:14:5"
									},
									"scope": 1345,
									"src": "6180:326:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1231,
										"nodeType": "Block",
										"src": "6782:101:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1226,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1218,
															"src": "6820:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1227,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1220,
															"src": "6828:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 1228,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6834:41:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 1225,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1232,
															1261
														],
														"referencedDeclaration": 1261,
														"src": "6799:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 1229,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6799:77:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1224,
												"id": 1230,
												"nodeType": "Return",
												"src": "6792:84:5"
											}
										]
									},
									"documentation": {
										"id": 1216,
										"nodeType": "StructuredDocumentation",
										"src": "6512:168:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 1232,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6694:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1218,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6723:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1232,
												"src": "6715:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6715:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1220,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6744:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1232,
												"src": "6731:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1219,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6731:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6714:35:5"
									},
									"returnParameters": {
										"id": 1224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1223,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1232,
												"src": "6768:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1222,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6768:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6767:14:5"
									},
									"scope": 1345,
									"src": "6685:198:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1260,
										"nodeType": "Block",
										"src": "7224:170:5",
										"statements": [
											{
												"assignments": [
													1245,
													1247
												],
												"declarations": [
													{
														"constant": false,
														"id": 1245,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7240:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1260,
														"src": "7235:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1244,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7235:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1247,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7262:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 1260,
														"src": "7249:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1246,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7249:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1252,
												"initialValue": {
													"arguments": [
														{
															"id": 1250,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1237,
															"src": "7296:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1248,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1235,
															"src": "7276:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1249,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7283:12:5",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7276:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 1251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7276:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7234:67:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1254,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1235,
															"src": "7345:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1255,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1245,
															"src": "7353:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1256,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1247,
															"src": "7362:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1257,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1239,
															"src": "7374:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1253,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1300,
														"src": "7318:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1258,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7318:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1243,
												"id": 1259,
												"nodeType": "Return",
												"src": "7311:76:5"
											}
										]
									},
									"documentation": {
										"id": 1233,
										"nodeType": "StructuredDocumentation",
										"src": "6889:175:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 1261,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "7078:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7116:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1261,
												"src": "7108:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1234,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7108:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1237,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7145:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1261,
												"src": "7132:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1236,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7132:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1239,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7173:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1261,
												"src": "7159:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1238,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7159:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7098:93:5"
									},
									"returnParameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1242,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1261,
												"src": "7210:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1241,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7210:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7209:14:5"
									},
									"scope": 1345,
									"src": "7069:325:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1299,
										"nodeType": "Block",
										"src": "7876:434:5",
										"statements": [
											{
												"condition": {
													"id": 1275,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1266,
													"src": "7890:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1297,
													"nodeType": "Block",
													"src": "8246:58:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1293,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1268,
																		"src": "8268:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1294,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1270,
																		"src": "8280:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1292,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1344,
																	"src": "8260:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1295,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8260:33:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1296,
															"nodeType": "ExpressionStatement",
															"src": "8260:33:5"
														}
													]
												},
												"id": 1298,
												"nodeType": "IfStatement",
												"src": "7886:418:5",
												"trueBody": {
													"id": 1291,
													"nodeType": "Block",
													"src": "7899:341:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1279,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1276,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1268,
																		"src": "7917:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1277,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7928:6:5",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7917:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1278,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7938:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7917:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1288,
															"nodeType": "IfStatement",
															"src": "7913:286:5",
															"trueBody": {
																"id": 1287,
																"nodeType": "Block",
																"src": "7941:258:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 1282,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1264,
																							"src": "8143:6:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 1281,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1033,
																						"src": "8132:10:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 1283,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8132:18:5",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 1284,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "8152:31:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 1280,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "8124:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 1285,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8124:60:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1286,
																		"nodeType": "ExpressionStatement",
																		"src": "8124:60:5"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 1289,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1268,
																"src": "8219:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1274,
															"id": 1290,
															"nodeType": "Return",
															"src": "8212:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1262,
										"nodeType": "StructuredDocumentation",
										"src": "7400:277:5",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 1300,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7691:26:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1264,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7735:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "7727:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7727:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1266,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7756:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "7751:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1265,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7751:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1268,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7786:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "7773:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1267,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7773:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1270,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7820:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "7806:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1269,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7806:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7717:121:5"
									},
									"returnParameters": {
										"id": 1274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1273,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "7862:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1272,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7862:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7861:14:5"
									},
									"scope": 1345,
									"src": "7682:628:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1323,
										"nodeType": "Block",
										"src": "8691:135:5",
										"statements": [
											{
												"condition": {
													"id": 1312,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1303,
													"src": "8705:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1321,
													"nodeType": "Block",
													"src": "8762:58:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1317,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1305,
																		"src": "8784:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1318,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1307,
																		"src": "8796:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1316,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1344,
																	"src": "8776:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1319,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8776:33:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1320,
															"nodeType": "ExpressionStatement",
															"src": "8776:33:5"
														}
													]
												},
												"id": 1322,
												"nodeType": "IfStatement",
												"src": "8701:119:5",
												"trueBody": {
													"id": 1315,
													"nodeType": "Block",
													"src": "8714:42:5",
													"statements": [
														{
															"expression": {
																"id": 1313,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1305,
																"src": "8735:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1311,
															"id": 1314,
															"nodeType": "Return",
															"src": "8728:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1301,
										"nodeType": "StructuredDocumentation",
										"src": "8316:210:5",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 1324,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8540:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1308,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1303,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8571:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "8566:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1302,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8566:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1305,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8601:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "8588:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1304,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8588:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1307,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8635:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "8621:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1306,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8621:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8556:97:5"
									},
									"returnParameters": {
										"id": 1311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1310,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "8677:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1309,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8677:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8676:14:5"
									},
									"scope": 1345,
									"src": "8531:295:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1343,
										"nodeType": "Block",
										"src": "8915:457:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1331,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1326,
															"src": "8991:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1332,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "9002:6:5",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8991:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1333,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9011:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8991:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1341,
													"nodeType": "Block",
													"src": "9321:45:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1338,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1328,
																		"src": "9342:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1337,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9335:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 1339,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9335:20:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1340,
															"nodeType": "ExpressionStatement",
															"src": "9335:20:5"
														}
													]
												},
												"id": 1342,
												"nodeType": "IfStatement",
												"src": "8987:379:5",
												"trueBody": {
													"id": 1336,
													"nodeType": "Block",
													"src": "9014:301:5",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "9172:133:5",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9190:40:5",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9219:10:5"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "9213:5:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9213:17:5"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "9194:15:5",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9258:2:5",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9262:10:5"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9254:3:5"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9254:19:5"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9275:15:5"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9247:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9247:44:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9247:44:5"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "paris",
															"externalReferences": [
																{
																	"declaration": 1326,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9219:10:5",
																	"valueSize": 1
																},
																{
																	"declaration": 1326,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9262:10:5",
																	"valueSize": 1
																}
															],
															"id": 1335,
															"nodeType": "InlineAssembly",
															"src": "9163:142:5"
														}
													]
												}
											}
										]
									},
									"id": 1344,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8841:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1326,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8862:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1344,
												"src": "8849:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1325,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8849:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1328,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8888:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1344,
												"src": "8874:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1327,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8874:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8848:53:5"
									},
									"returnParameters": {
										"id": 1330,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8915:0:5"
									},
									"scope": 1345,
									"src": "8832:540:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1346,
							"src": "194:9180:5",
							"usedErrors": []
						}
					],
					"src": "101:9274:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1345
						],
						"ContextUpgradeable": [
							1387
						],
						"Initializable": [
							300
						]
					},
					"id": 1388,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1347,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 1348,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1388,
							"sourceUnit": 301,
							"src": "110:42:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1350,
										"name": "Initializable",
										"nameLocations": [
											"691:13:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 300,
										"src": "691:13:6"
									},
									"id": 1351,
									"nodeType": "InheritanceSpecifier",
									"src": "691:13:6"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1349,
								"nodeType": "StructuredDocumentation",
								"src": "154:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1387,
							"linearizedBaseContracts": [
								1387,
								300
							],
							"name": "ContextUpgradeable",
							"nameLocation": "669:18:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1356,
										"nodeType": "Block",
										"src": "763:7:6",
										"statements": []
									},
									"id": 1357,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1354,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1353,
												"name": "onlyInitializing",
												"nameLocations": [
													"746:16:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "746:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "746:16:6"
										}
									],
									"name": "__Context_init",
									"nameLocation": "720:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1352,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "734:2:6"
									},
									"returnParameters": {
										"id": 1355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "763:0:6"
									},
									"scope": 1387,
									"src": "711:59:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1362,
										"nodeType": "Block",
										"src": "838:7:6",
										"statements": []
									},
									"id": 1363,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1360,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1359,
												"name": "onlyInitializing",
												"nameLocations": [
													"821:16:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "821:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "821:16:6"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "785:24:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1358,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "809:2:6"
									},
									"returnParameters": {
										"id": 1361,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "838:0:6"
									},
									"scope": 1387,
									"src": "776:69:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1371,
										"nodeType": "Block",
										"src": "912:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1368,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "929:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1369,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "933:6:6",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "929:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1367,
												"id": 1370,
												"nodeType": "Return",
												"src": "922:17:6"
											}
										]
									},
									"id": 1372,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "859:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1364,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "869:2:6"
									},
									"returnParameters": {
										"id": 1367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1366,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1372,
												"src": "903:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1365,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "903:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "902:9:6"
									},
									"scope": 1387,
									"src": "850:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1380,
										"nodeType": "Block",
										"src": "1019:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1377,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1036:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1040:4:6",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1036:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1376,
												"id": 1379,
												"nodeType": "Return",
												"src": "1029:15:6"
											}
										]
									},
									"id": 1381,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "961:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "969:2:6"
									},
									"returnParameters": {
										"id": 1376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1375,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1381,
												"src": "1003:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1374,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1003:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1002:16:6"
									},
									"scope": 1387,
									"src": "952:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1382,
										"nodeType": "StructuredDocumentation",
										"src": "1057:254:6",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 1386,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1336:5:6",
									"nodeType": "VariableDeclaration",
									"scope": 1387,
									"src": "1316:25:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 1383,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1316:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1385,
										"length": {
											"hexValue": "3530",
											"id": 1384,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1324:2:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1316:11:6",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1388,
							"src": "651:693:6",
							"usedErrors": []
						}
					],
					"src": "86:1259:6"
				},
				"id": 6
			},
			"src/project/IProjectToken.sol": {
				"ast": {
					"absolutePath": "src/project/IProjectToken.sol",
					"exportedSymbols": {
						"IProjectToken": [
							1406
						]
					},
					"id": 1407,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1389,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IProjectToken",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1406,
							"linearizedBaseContracts": [
								1406
							],
							"name": "IProjectToken",
							"nameLocation": "68:13:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "077f224a",
									"id": 1398,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "97:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1391,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "122:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "108:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1390,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "108:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1393,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "142:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "128:20:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1392,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "128:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1395,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "158:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "150:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1394,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "150:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "107:57:7"
									},
									"returnParameters": {
										"id": 1397,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "173:0:7"
									},
									"scope": 1406,
									"src": "88:86:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "40c10f19",
									"id": 1405,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "189:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1403,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1400,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "202:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1405,
												"src": "194:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1399,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "194:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1402,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "219:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1405,
												"src": "211:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1401,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "211:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "193:33:7"
									},
									"returnParameters": {
										"id": 1404,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "235:0:7"
									},
									"scope": 1406,
									"src": "180:56:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1407,
							"src": "58:180:7",
							"usedErrors": []
						}
					],
					"src": "32:207:7"
				},
				"id": 7
			},
			"src/project/ProjectToken.sol": {
				"ast": {
					"absolutePath": "src/project/ProjectToken.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1345
						],
						"ContextUpgradeable": [
							1387
						],
						"ERC20Upgradeable": [
							912
						],
						"IERC20MetadataUpgradeable": [
							1015
						],
						"IERC20Upgradeable": [
							990
						],
						"IProjectToken": [
							1406
						],
						"Initializable": [
							300
						],
						"OwnableUpgradeable": [
							131
						],
						"ProjectToken": [
							1454
						]
					},
					"id": 1455,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1408,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 1409,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1455,
							"sourceUnit": 132,
							"src": "58:75:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"id": 1410,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1455,
							"sourceUnit": 913,
							"src": "134:78:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/project/IProjectToken.sol",
							"file": "./IProjectToken.sol",
							"id": 1411,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1455,
							"sourceUnit": 1407,
							"src": "213:29:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1412,
										"name": "OwnableUpgradeable",
										"nameLocations": [
											"269:18:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 131,
										"src": "269:18:8"
									},
									"id": 1413,
									"nodeType": "InheritanceSpecifier",
									"src": "269:18:8"
								},
								{
									"baseName": {
										"id": 1414,
										"name": "ERC20Upgradeable",
										"nameLocations": [
											"289:16:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 912,
										"src": "289:16:8"
									},
									"id": 1415,
									"nodeType": "InheritanceSpecifier",
									"src": "289:16:8"
								},
								{
									"baseName": {
										"id": 1416,
										"name": "IProjectToken",
										"nameLocations": [
											"307:13:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1406,
										"src": "307:13:8"
									},
									"id": 1417,
									"nodeType": "InheritanceSpecifier",
									"src": "307:13:8"
								}
							],
							"canonicalName": "ProjectToken",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1454,
							"linearizedBaseContracts": [
								1454,
								1406,
								912,
								1015,
								990,
								131,
								1387,
								300
							],
							"name": "ProjectToken",
							"nameLocation": "253:12:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										1398
									],
									"body": {
										"id": 1437,
										"nodeType": "Block",
										"src": "455:78:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1429,
															"name": "name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1419,
															"src": "478:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 1430,
															"name": "symbol",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1421,
															"src": "484:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1428,
														"name": "__ERC20_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 347,
														"src": "465:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 1431,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "465:26:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1432,
												"nodeType": "ExpressionStatement",
												"src": "465:26:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1434,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1423,
															"src": "520:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1433,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "501:18:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "501:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1436,
												"nodeType": "ExpressionStatement",
												"src": "501:25:8"
											}
										]
									},
									"functionSelector": "077f224a",
									"id": 1438,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1426,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1425,
												"name": "initializer",
												"nameLocations": [
													"443:11:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 202,
												"src": "443:11:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "443:11:8"
										}
									],
									"name": "initialize",
									"nameLocation": "336:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1419,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "370:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "356:18:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1418,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "356:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1421,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "398:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "384:20:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1420,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "384:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1423,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "422:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "414:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1422,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "414:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "346:87:8"
									},
									"returnParameters": {
										"id": 1427,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "455:0:8"
									},
									"scope": 1454,
									"src": "327:206:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1405
									],
									"body": {
										"id": 1452,
										"nodeType": "Block",
										"src": "603:39:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1448,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1440,
															"src": "619:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1449,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1442,
															"src": "628:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1447,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 724,
														"src": "613:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1450,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "613:22:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1451,
												"nodeType": "ExpressionStatement",
												"src": "613:22:8"
											}
										]
									},
									"functionSelector": "40c10f19",
									"id": 1453,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1445,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1444,
												"name": "onlyOwner",
												"nameLocations": [
													"593:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "593:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "593:9:8"
										}
									],
									"name": "mint",
									"nameLocation": "548:4:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1440,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "561:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "553:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1439,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "553:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1442,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "578:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "570:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1441,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "570:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "552:33:8"
									},
									"returnParameters": {
										"id": 1446,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "603:0:8"
									},
									"scope": 1454,
									"src": "539:103:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1455,
							"src": "244:400:8",
							"usedErrors": []
						}
					],
					"src": "32:613:8"
				},
				"id": 8
			}
		}
	}
}